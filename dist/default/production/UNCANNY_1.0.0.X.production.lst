

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Wed Mar  1 06:13:36 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    14                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	text0,global,reloc=2,class=CODE,delta=1
    16                           	psect	text1,global,reloc=2,class=CODE,delta=1
    17                           	psect	text2,global,reloc=2,class=CODE,delta=1
    18                           	psect	text3,global,reloc=2,class=CODE,delta=1
    19                           	psect	text4,global,reloc=2,class=CODE,delta=1
    20                           	psect	text5,global,reloc=2,class=CODE,delta=1
    21                           	psect	text6,global,reloc=2,class=CODE,delta=1
    22                           	psect	text7,global,reloc=2,class=CODE,delta=1
    23                           	psect	text8,global,reloc=2,class=CODE,delta=1
    24                           	psect	text9,global,reloc=2,class=CODE,delta=1
    25                           	psect	text10,global,reloc=2,class=CODE,delta=1
    26                           	psect	text11,global,reloc=2,class=CODE,delta=1
    27                           	psect	text12,global,reloc=2,class=CODE,delta=1
    28                           	psect	text13,global,reloc=2,class=CODE,delta=1
    29                           	psect	text14,global,reloc=2,class=CODE,delta=1
    30                           	psect	text15,global,reloc=2,class=CODE,delta=1
    31                           	psect	text16,global,reloc=2,class=CODE,delta=1
    32                           	psect	text17,global,reloc=2,class=CODE,delta=1
    33                           	psect	text18,global,reloc=2,class=CODE,delta=1
    34                           	psect	text19,global,reloc=2,class=CODE,delta=1
    35                           	psect	text20,global,reloc=2,class=CODE,delta=1
    36                           	psect	text21,global,reloc=2,class=CODE,delta=1
    37                           	psect	text22,global,reloc=2,class=CODE,delta=1
    38                           	psect	text23,global,reloc=2,class=CODE,delta=1
    39                           	psect	text24,global,reloc=2,class=CODE,delta=1
    40                           	psect	text25,global,reloc=2,class=CODE,delta=1
    41                           	psect	text26,global,reloc=2,class=CODE,delta=1
    42                           	psect	text27,global,reloc=2,class=CODE,delta=1
    43                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    44                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    45                           	psect	text29,global,reloc=2,class=CODE,delta=1
    46                           	psect	text30,global,reloc=2,class=CODE,delta=1
    47                           	psect	text31,global,reloc=2,class=CODE,delta=1
    48                           	psect	text32,global,reloc=2,class=CODE,delta=1
    49                           	psect	text33,global,reloc=2,class=CODE,delta=1
    50                           	psect	text34,global,reloc=2,class=CODE,delta=1
    51                           	psect	text35,global,reloc=2,class=CODE,delta=1
    52                           	psect	text36,global,reloc=2,class=CODE,delta=1
    53                           	psect	text37,global,reloc=2,class=CODE,delta=1
    54                           	psect	text38,global,reloc=2,class=CODE,delta=1
    55                           	psect	text39,global,reloc=2,class=CODE,delta=1
    56                           	psect	text40,global,reloc=2,class=CODE,delta=1
    57                           	psect	text41,global,reloc=2,class=CODE,delta=1
    58                           	psect	text42,global,reloc=2,class=CODE,delta=1
    59                           	psect	text43,global,reloc=2,class=CODE,delta=1
    60                           	psect	text44,global,reloc=2,class=CODE,delta=1
    61                           	psect	text45,global,reloc=2,class=CODE,delta=1
    62                           	psect	text46,global,reloc=2,class=CODE,delta=1
    63                           	psect	text47,global,reloc=2,class=CODE,delta=1
    64                           	psect	text48,global,reloc=2,class=CODE,delta=1
    65                           	psect	text49,global,reloc=2,class=CODE,delta=1
    66                           	psect	text50,global,reloc=2,class=CODE,delta=1
    67                           	psect	text51,global,reloc=2,class=CODE,delta=1
    68                           	psect	text52,global,reloc=2,class=CODE,delta=1
    69                           	psect	text53,global,reloc=2,class=CODE,delta=1
    70                           	psect	text54,global,reloc=2,class=CODE,delta=1
    71                           	psect	text55,global,reloc=2,class=CODE,delta=1
    72                           	psect	text56,global,reloc=2,class=CODE,delta=1
    73                           	psect	text57,global,reloc=2,class=CODE,delta=1
    74                           	psect	text58,global,reloc=2,class=CODE,delta=1
    75                           	psect	text59,global,reloc=2,class=CODE,delta=1
    76                           	psect	text60,global,reloc=2,class=CODE,delta=1
    77                           	psect	text61,global,reloc=2,class=CODE,delta=1
    78                           	psect	text62,global,reloc=2,class=CODE,delta=1
    79                           	psect	text63,global,reloc=2,class=CODE,delta=1
    80                           	psect	text64,global,reloc=2,class=CODE,delta=1
    81                           	psect	text65,global,reloc=2,class=CODE,delta=1
    82                           	psect	text66,global,reloc=2,class=CODE,delta=1
    83                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    84                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    85                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    86  0000                     
    87                           ; Version 1.40
    88                           ; Generated 01/12/2016 GMT
    89                           ; 
    90                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    91                           ; All rights reserved.
    92                           ; 
    93                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    94                           ; 
    95                           ; Redistribution and use in source and binary forms, with or without modification, are
    96                           ; permitted provided that the following conditions are met:
    97                           ; 
    98                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    99                           ;        conditions and the following disclaimer.
   100                           ; 
   101                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   102                           ;        of conditions and the following disclaimer in the documentation and/or other
   103                           ;        materials provided with the distribution.
   104                           ; 
   105                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   106                           ;        software without specific prior written permission.
   107                           ; 
   108                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   109                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   110                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   111                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   112                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   113                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   114                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   115                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   116                           ; 
   117                           ; 
   118                           ; Code-generator required, PIC18F4620 Definitions
   119                           ; 
   120                           ; SFR Addresses
   121  0000                     
   122                           	psect	idataBANK0
   123  0034C8                     __pidataBANK0:
   124                           	opt stack 0
   125                           
   126                           ;initializer for _can_count_disp
   127  0034C8  FFFF               	dw	65535
   128                           
   129                           ;initializer for _log_position
   130  0034CA  FFFF               	dw	65535
   131                           
   132                           	psect	mediumconst
   133  00FD86                     __pmediumconst:
   134                           	opt stack 0
   135  00FD86  00                 	db	0
   136  00FD87                     _keys:
   137                           	opt stack 0
   138  00FD87  31                 	db	49
   139  00FD88  32                 	db	50
   140  00FD89  33                 	db	51
   141  00FD8A  41                 	db	65
   142  00FD8B  34                 	db	52
   143  00FD8C  35                 	db	53
   144  00FD8D  36                 	db	54
   145  00FD8E  42                 	db	66
   146  00FD8F  37                 	db	55
   147  00FD90  38                 	db	56
   148  00FD91  39                 	db	57
   149  00FD92  43                 	db	67
   150  00FD93  2A                 	db	42
   151  00FD94  30                 	db	48
   152  00FD95  23                 	db	35
   153  00FD96  44                 	db	68
   154  00FD97  00                 	db	0
   155  00FD98                     __end_of_keys:
   156                           	opt stack 0
   157  00FD98                     _octpowers:
   158                           	opt stack 0
   159  00FD98  0001               	dw	1
   160  00FD9A  0008               	dw	8
   161  00FD9C  0040               	dw	64
   162  00FD9E  0200               	dw	512
   163  00FDA0  1000               	dw	4096
   164  00FDA2  8000               	dw	32768
   165  00FDA4                     __end_of_octpowers:
   166                           	opt stack 0
   167  00FDA4                     _dpowers:
   168                           	opt stack 0
   169  00FDA4  0001               	dw	1
   170  00FDA6  000A               	dw	10
   171  00FDA8  0064               	dw	100
   172  00FDAA  03E8               	dw	1000
   173  00FDAC  2710               	dw	10000
   174  00FDAE                     __end_of_dpowers:
   175                           	opt stack 0
   176  00FDAE                     _hexpowers:
   177                           	opt stack 0
   178  00FDAE  0001               	dw	1
   179  00FDB0  0010               	dw	16
   180  00FDB2  0100               	dw	256
   181  00FDB4  1000               	dw	4096
   182  00FDB6                     __end_of_hexpowers:
   183                           	opt stack 0
   184  00FDB6                     _currentTime:
   185                           	opt stack 0
   186  00FDB6  50                 	db	80
   187  00FDB7  35                 	db	53
   188  00FDB8  21                 	db	33
   189  00FDB9  08                 	db	8
   190  00FDBA  05                 	db	5
   191  00FDBB  02                 	db	2
   192  00FDBC  17                 	db	23
   193  00FDBD                     __end_of_currentTime:
   194                           	opt stack 0
   195  00FDBD                     exp@coeff:
   196                           	opt stack 0
   197  00FDBD  00                 	db	0
   198  00FDBE  80                 	db	128
   199  00FDBF  3F                 	db	63
   200  00FDC0  72                 	db	114
   201  00FDC1  31                 	db	49
   202  00FDC2  3F                 	db	63
   203  00FDC3  FE                 	db	254
   204  00FDC4  75                 	db	117
   205  00FDC5  3E                 	db	62
   206  00FDC6  58                 	db	88
   207  00FDC7  63                 	db	99
   208  00FDC8  3D                 	db	61
   209  00FDC9  95                 	db	149
   210  00FDCA  1D                 	db	29
   211  00FDCB  3C                 	db	60
   212  00FDCC  C5                 	db	197
   213  00FDCD  AE                 	db	174
   214  00FDCE  3A                 	db	58
   215  00FDCF  79                 	db	121
   216  00FDD0  21                 	db	33
   217  00FDD1  39                 	db	57
   218  00FDD2  94                 	db	148
   219  00FDD3  80                 	db	128
   220  00FDD4  37                 	db	55
   221  00FDD5  93                 	db	147
   222  00FDD6  A7                 	db	167
   223  00FDD7  35                 	db	53
   224  00FDD8  56                 	db	86
   225  00FDD9  15                 	db	21
   226  00FDDA  34                 	db	52
   227  00FDDB                     __end_ofexp@coeff:
   228                           	opt stack 0
   229  00FDDB                     log@coeff:
   230                           	opt stack 0
   231  00FDDB  00                 	db	0
   232  00FDDC  00                 	db	0
   233  00FDDD  00                 	db	0
   234  00FDDE  00                 	db	0
   235  00FDDF  80                 	db	128
   236  00FDE0  3F                 	db	63
   237  00FDE1  F0                 	db	240
   238  00FDE2  FF                 	db	255
   239  00FDE3  BE                 	db	190
   240  00FDE4  E2                 	db	226
   241  00FDE5  A9                 	db	169
   242  00FDE6  3E                 	db	62
   243  00FDE7  83                 	db	131
   244  00FDE8  76                 	db	118
   245  00FDE9  BE                 	db	190
   246  00FDEA  AE                 	db	174
   247  00FDEB  2B                 	db	43
   248  00FDEC  3E                 	db	62
   249  00FDED  3C                 	db	60
   250  00FDEE  C3                 	db	195
   251  00FDEF  BD                 	db	189
   252  00FDF0  D2                 	db	210
   253  00FDF1  13                 	db	19
   254  00FDF2  3D                 	db	61
   255  00FDF3  78                 	db	120
   256  00FDF4  D3                 	db	211
   257  00FDF5  BB                 	db	187
   258  00FDF6                     __end_oflog@coeff:
   259                           	opt stack 0
   260  0000                     _TMR0	set	4054
   261  0000                     _ADCON0	set	4034
   262  0000                     _ADCON1	set	4033
   263  0000                     _CVRCON	set	4021
   264  0000                     _INTCONbits	set	4082
   265  0000                     _LATA	set	3977
   266  0000                     _LATAbits	set	3977
   267  0000                     _LATB	set	3978
   268  0000                     _LATC	set	3979
   269  0000                     _LATCbits	set	3979
   270  0000                     _LATD	set	3980
   271  0000                     _LATDbits	set	3980
   272  0000                     _LATE	set	3981
   273  0000                     _OSCCON	set	4051
   274  0000                     _OSCTUNEbits	set	3995
   275  0000                     _PORTAbits	set	3968
   276  0000                     _PORTB	set	3969
   277  0000                     _PORTBbits	set	3969
   278  0000                     _SSPADD	set	4040
   279  0000                     _SSPBUF	set	4041
   280  0000                     _SSPCON1	set	4038
   281  0000                     _SSPCON2	set	4037
   282  0000                     _SSPSTAT	set	4039
   283  0000                     _TRISA	set	3986
   284  0000                     _TRISB	set	3987
   285  0000                     _TRISC	set	3988
   286  0000                     _TRISD	set	3989
   287  0000                     _TRISE	set	3990
   288  0000                     _ACKDT	set	32301
   289  0000                     _ACKEN	set	32300
   290  0000                     _ADFM	set	32263
   291  0000                     _GIE	set	32663
   292  0000                     _INT0IE	set	32660
   293  0000                     _INT0IF	set	32657
   294  0000                     _INT1IE	set	32643
   295  0000                     _INT1IF	set	32640
   296  0000                     _INT2IE	set	32644
   297  0000                     _INT2IF	set	32641
   298  0000                     _PEN	set	32298
   299  0000                     _PSA	set	32427
   300  0000                     _RCEN	set	32299
   301  0000                     _RSEN	set	32297
   302  0000                     _SEN	set	32296
   303  0000                     _T08BIT	set	32430
   304  0000                     _T0CS	set	32429
   305  0000                     _T0PS0	set	32424
   306  0000                     _T0PS1	set	32425
   307  0000                     _T0PS2	set	32426
   308  0000                     _TMR0IE	set	32661
   309  0000                     _TMR0IF	set	32658
   310  0000                     _TMR0ON	set	32431
   311  0000                     _TRISC3	set	31907
   312  0000                     _TRISC4	set	31908
   313  0000                     _nRBPU	set	32655
   314  00FDF6                     STR_38:
   315  00FDF6  52                 	db	82	;'R'
   316  00FDF7  75                 	db	117	;'u'
   317  00FDF8  6E                 	db	110	;'n'
   318  00FDF9  6E                 	db	110	;'n'
   319  00FDFA  69                 	db	105	;'i'
   320  00FDFB  6E                 	db	110	;'n'
   321  00FDFC  67                 	db	103	;'g'
   322  00FDFD  2E                 	db	46
   323  00FDFE  2E                 	db	46
   324  00FDFF  2E                 	db	46
   325  00FE00  20                 	db	32
   326  00FE01  20                 	db	32
   327  00FE02  20                 	db	32
   328  00FE03  20                 	db	32
   329  00FE04  20                 	db	32
   330  00FE05  20                 	db	32
   331  00FE06  20                 	db	32
   332  00FE07  20                 	db	32
   333  00FE08  20                 	db	32
   334  00FE09  20                 	db	32
   335  00FE0A  20                 	db	32
   336  00FE0B  20                 	db	32
   337  00FE0C  20                 	db	32
   338  00FE0D  20                 	db	32
   339  00FE0E  00                 	db	0
   340  00FE0F                     STR_37:
   341  00FE0F  52                 	db	82	;'R'
   342  00FE10  75                 	db	117	;'u'
   343  00FE11  6E                 	db	110	;'n'
   344  00FE12  6E                 	db	110	;'n'
   345  00FE13  69                 	db	105	;'i'
   346  00FE14  6E                 	db	110	;'n'
   347  00FE15  67                 	db	103	;'g'
   348  00FE16  2E                 	db	46
   349  00FE17  2E                 	db	46
   350  00FE18  20                 	db	32
   351  00FE19  20                 	db	32
   352  00FE1A  20                 	db	32
   353  00FE1B  20                 	db	32
   354  00FE1C  20                 	db	32
   355  00FE1D  20                 	db	32
   356  00FE1E  20                 	db	32
   357  00FE1F  20                 	db	32
   358  00FE20  20                 	db	32
   359  00FE21  20                 	db	32
   360  00FE22  20                 	db	32
   361  00FE23  20                 	db	32
   362  00FE24  20                 	db	32
   363  00FE25  20                 	db	32
   364  00FE26  00                 	db	0
   365  00FE27                     STR_36:
   366  00FE27  52                 	db	82	;'R'
   367  00FE28  75                 	db	117	;'u'
   368  00FE29  6E                 	db	110	;'n'
   369  00FE2A  6E                 	db	110	;'n'
   370  00FE2B  69                 	db	105	;'i'
   371  00FE2C  6E                 	db	110	;'n'
   372  00FE2D  67                 	db	103	;'g'
   373  00FE2E  2E                 	db	46
   374  00FE2F  20                 	db	32
   375  00FE30  20                 	db	32
   376  00FE31  20                 	db	32
   377  00FE32  20                 	db	32
   378  00FE33  20                 	db	32
   379  00FE34  20                 	db	32
   380  00FE35  20                 	db	32
   381  00FE36  20                 	db	32
   382  00FE37  20                 	db	32
   383  00FE38  20                 	db	32
   384  00FE39  20                 	db	32
   385  00FE3A  20                 	db	32
   386  00FE3B  20                 	db	32
   387  00FE3C  20                 	db	32
   388  00FE3D  00                 	db	0
   389  00FE3E  25                 	db	37
   390  00FE3F  30                 	db	48	;'0'
   391  00FE40  32                 	db	50	;'2'
   392  00FE41  78                 	db	120	;'x'
   393  00FE42  2F                 	db	47
   394  00FE43  25                 	db	37
   395  00FE44  30                 	db	48	;'0'
   396  00FE45  32                 	db	50	;'2'
   397  00FE46  78                 	db	120	;'x'
   398  00FE47  2F                 	db	47
   399  00FE48  25                 	db	37
   400  00FE49  30                 	db	48	;'0'
   401  00FE4A  32                 	db	50	;'2'
   402  00FE4B  78                 	db	120	;'x'
   403  00FE4C  20                 	db	32
   404  00FE4D  20                 	db	32
   405  00FE4E  20                 	db	32
   406  00FE4F  20                 	db	32
   407  00FE50  20                 	db	32
   408  00FE51  20                 	db	32
   409  00FE52  00                 	db	0
   410  00FE53  25                 	db	37
   411  00FE54  30                 	db	48	;'0'
   412  00FE55  32                 	db	50	;'2'
   413  00FE56  78                 	db	120	;'x'
   414  00FE57  3A                 	db	58	;':'
   415  00FE58  25                 	db	37
   416  00FE59  30                 	db	48	;'0'
   417  00FE5A  32                 	db	50	;'2'
   418  00FE5B  78                 	db	120	;'x'
   419  00FE5C  3A                 	db	58	;':'
   420  00FE5D  25                 	db	37
   421  00FE5E  30                 	db	48	;'0'
   422  00FE5F  32                 	db	50	;'2'
   423  00FE60  78                 	db	120	;'x'
   424  00FE61  20                 	db	32
   425  00FE62  20                 	db	32
   426  00FE63  20                 	db	32
   427  00FE64  20                 	db	32
   428  00FE65  20                 	db	32
   429  00FE66  20                 	db	32
   430  00FE67  00                 	db	0
   431  00FE68                     STR_35:
   432  00FE68  54                 	db	84	;'T'
   433  00FE69  69                 	db	105	;'i'
   434  00FE6A  6D                 	db	109	;'m'
   435  00FE6B  65                 	db	101	;'e'
   436  00FE6C  3A                 	db	58	;':'
   437  00FE6D  20                 	db	32
   438  00FE6E  25                 	db	37
   439  00FE6F  64                 	db	100	;'d'
   440  00FE70  20                 	db	32
   441  00FE71  73                 	db	115	;'s'
   442  00FE72  20                 	db	32
   443  00FE73  20                 	db	32
   444  00FE74  20                 	db	32
   445  00FE75  20                 	db	32
   446  00FE76  20                 	db	32
   447  00FE77  20                 	db	32
   448  00FE78  20                 	db	32
   449  00FE79  00                 	db	0
   450  00FE7A                     STR_10:
   451  00FE7A  53                 	db	83	;'S'
   452  00FE7B  4F                 	db	79	;'O'
   453  00FE7C  55                 	db	85	;'U'
   454  00FE7D  50                 	db	80	;'P'
   455  00FE7E  20                 	db	32
   456  00FE7F  4C                 	db	76	;'L'
   457  00FE80  42                 	db	66	;'B'
   458  00FE81  4C                 	db	76	;'L'
   459  00FE82  3A                 	db	58	;':'
   460  00FE83  20                 	db	32
   461  00FE84  25                 	db	37
   462  00FE85  64                 	db	100	;'d'
   463  00FE86  20                 	db	32
   464  00FE87  20                 	db	32
   465  00FE88  20                 	db	32
   466  00FE89  20                 	db	32
   467  00FE8A  20                 	db	32
   468  00FE8B  00                 	db	0
   469  00FE8C                     STR_16:
   470  00FE8C  23                 	db	35
   471  00FE8D  20                 	db	32
   472  00FE8E  6F                 	db	111	;'o'
   473  00FE8F  66                 	db	102	;'f'
   474  00FE90  20                 	db	32
   475  00FE91  63                 	db	99	;'c'
   476  00FE92  61                 	db	97	;'a'
   477  00FE93  6E                 	db	110	;'n'
   478  00FE94  73                 	db	115	;'s'
   479  00FE95  3A                 	db	58	;':'
   480  00FE96  20                 	db	32
   481  00FE97  31                 	db	49	;'1'
   482  00FE98  30                 	db	48	;'0'
   483  00FE99  20                 	db	32
   484  00FE9A  20                 	db	32
   485  00FE9B  20                 	db	32
   486  00FE9C  20                 	db	32
   487  00FE9D  00                 	db	0
   488  00FE9E                     STR_20:
   489  00FE9E  23                 	db	35
   490  00FE9F  20                 	db	32
   491  00FEA0  73                 	db	115	;'s'
   492  00FEA1  6F                 	db	111	;'o'
   493  00FEA2  75                 	db	117	;'u'
   494  00FEA3  70                 	db	112	;'p'
   495  00FEA4  20                 	db	32
   496  00FEA5  63                 	db	99	;'c'
   497  00FEA6  61                 	db	97	;'a'
   498  00FEA7  6E                 	db	110	;'n'
   499  00FEA8  73                 	db	115	;'s'
   500  00FEA9  3A                 	db	58	;':'
   501  00FEAA  20                 	db	32
   502  00FEAB  34                 	db	52	;'4'
   503  00FEAC  20                 	db	32
   504  00FEAD  20                 	db	32
   505  00FEAE  20                 	db	32
   506  00FEAF  00                 	db	0
   507  00FEB0                     STR_18:
   508  00FEB0  23                 	db	35
   509  00FEB1  20                 	db	32
   510  00FEB2  73                 	db	115	;'s'
   511  00FEB3  6F                 	db	111	;'o'
   512  00FEB4  64                 	db	100	;'d'
   513  00FEB5  61                 	db	97	;'a'
   514  00FEB6  20                 	db	32
   515  00FEB7  63                 	db	99	;'c'
   516  00FEB8  61                 	db	97	;'a'
   517  00FEB9  6E                 	db	110	;'n'
   518  00FEBA  73                 	db	115	;'s'
   519  00FEBB  3A                 	db	58	;':'
   520  00FEBC  20                 	db	32
   521  00FEBD  36                 	db	54	;'6'
   522  00FEBE  20                 	db	32
   523  00FEBF  20                 	db	32
   524  00FEC0  20                 	db	32
   525  00FEC1  00                 	db	0
   526  00FEC2                     STR_12:
   527  00FEC2  50                 	db	80	;'P'
   528  00FEC3  4F                 	db	79	;'O'
   529  00FEC4  50                 	db	80	;'P'
   530  00FEC5  43                 	db	67	;'C'
   531  00FEC6  41                 	db	65	;'A'
   532  00FEC7  4E                 	db	78	;'N'
   533  00FEC8  20                 	db	32
   534  00FEC9  54                 	db	84	;'T'
   535  00FECA  41                 	db	65	;'A'
   536  00FECB  42                 	db	66	;'B'
   537  00FECC  3A                 	db	58	;':'
   538  00FECD  20                 	db	32
   539  00FECE  25                 	db	37
   540  00FECF  64                 	db	100	;'d'
   541  00FED0  20                 	db	32
   542  00FED1  20                 	db	32
   543  00FED2  20                 	db	32
   544  00FED3  00                 	db	0
   545  00FED4                     STR_11:
   546  00FED4  53                 	db	83	;'S'
   547  00FED5  4F                 	db	79	;'O'
   548  00FED6  55                 	db	85	;'U'
   549  00FED7  50                 	db	80	;'P'
   550  00FED8  20                 	db	32
   551  00FED9  4E                 	db	78	;'N'
   552  00FEDA  4F                 	db	79	;'O'
   553  00FEDB  4C                 	db	76	;'L'
   554  00FEDC  42                 	db	66	;'B'
   555  00FEDD  4C                 	db	76	;'L'
   556  00FEDE  3A                 	db	58	;':'
   557  00FEDF  20                 	db	32
   558  00FEE0  25                 	db	37
   559  00FEE1  64                 	db	100	;'d'
   560  00FEE2  20                 	db	32
   561  00FEE3  20                 	db	32
   562  00FEE4  20                 	db	32
   563  00FEE5  00                 	db	0
   564  00FEE6                     STR_42:
   565  00FEE6  4F                 	db	79	;'O'
   566  00FEE7  70                 	db	112	;'p'
   567  00FEE8  65                 	db	101	;'e'
   568  00FEE9  72                 	db	114	;'r'
   569  00FEEA  61                 	db	97	;'a'
   570  00FEEB  74                 	db	116	;'t'
   571  00FEEC  69                 	db	105	;'i'
   572  00FEED  6F                 	db	111	;'o'
   573  00FEEE  6E                 	db	110	;'n'
   574  00FEEF  20                 	db	32
   575  00FEF0  44                 	db	68	;'D'
   576  00FEF1  6F                 	db	111	;'o'
   577  00FEF2  6E                 	db	110	;'n'
   578  00FEF3  65                 	db	101	;'e'
   579  00FEF4  21                 	db	33
   580  00FEF5  20                 	db	32
   581  00FEF6  20                 	db	32
   582  00FEF7  00                 	db	0
   583  00FEF8                     STR_41:
   584  00FEF8  50                 	db	80	;'P'
   585  00FEF9  52                 	db	82	;'R'
   586  00FEFA  45                 	db	69	;'E'
   587  00FEFB  53                 	db	83	;'S'
   588  00FEFC  53                 	db	83	;'S'
   589  00FEFD  20                 	db	32
   590  00FEFE  34                 	db	52	;'4'
   591  00FEFF  20                 	db	32
   592  00FF00  54                 	db	84	;'T'
   593  00FF01  4F                 	db	79	;'O'
   594  00FF02  20                 	db	32
   595  00FF03  53                 	db	83	;'S'
   596  00FF04  54                 	db	84	;'T'
   597  00FF05  4F                 	db	79	;'O'
   598  00FF06  50                 	db	80	;'P'
   599  00FF07  20                 	db	32
   600  00FF08  20                 	db	32
   601  00FF09  00                 	db	0
   602  00FF0A                     STR_34:
   603  00FF0A  54                 	db	84	;'T'
   604  00FF0B  6F                 	db	111	;'o'
   605  00FF0C  74                 	db	116	;'t'
   606  00FF0D  61                 	db	97	;'a'
   607  00FF0E  6C                 	db	108	;'l'
   608  00FF0F  20                 	db	32
   609  00FF10  4F                 	db	79	;'O'
   610  00FF11  70                 	db	112	;'p'
   611  00FF12  65                 	db	101	;'e'
   612  00FF13  72                 	db	114	;'r'
   613  00FF14  61                 	db	97	;'a'
   614  00FF15  74                 	db	116	;'t'
   615  00FF16  69                 	db	105	;'i'
   616  00FF17  6F                 	db	111	;'o'
   617  00FF18  6E                 	db	110	;'n'
   618  00FF19  20                 	db	32
   619  00FF1A  20                 	db	32
   620  00FF1B  00                 	db	0
   621  00FF1C                     STR_15:
   622  00FF1C  52                 	db	82	;'R'
   623  00FF1D  75                 	db	117	;'u'
   624  00FF1E  6E                 	db	110	;'n'
   625  00FF1F  23                 	db	35
   626  00FF20  31                 	db	49	;'1'
   627  00FF21  20                 	db	32
   628  00FF22  20                 	db	32
   629  00FF23  20                 	db	32
   630  00FF24  20                 	db	32
   631  00FF25  41                 	db	65	;'A'
   632  00FF26  3A                 	db	58	;':'
   633  00FF27  4E                 	db	78	;'N'
   634  00FF28  65                 	db	101	;'e'
   635  00FF29  78                 	db	120	;'x'
   636  00FF2A  74                 	db	116	;'t'
   637  00FF2B  20                 	db	32
   638  00FF2C  20                 	db	32
   639  00FF2D  00                 	db	0
   640  00FF2E                     STR_21:
   641  00FF2E  52                 	db	82	;'R'
   642  00FF2F  75                 	db	117	;'u'
   643  00FF30  6E                 	db	110	;'n'
   644  00FF31  23                 	db	35
   645  00FF32  32                 	db	50	;'2'
   646  00FF33  20                 	db	32
   647  00FF34  20                 	db	32
   648  00FF35  20                 	db	32
   649  00FF36  20                 	db	32
   650  00FF37  41                 	db	65	;'A'
   651  00FF38  3A                 	db	58	;':'
   652  00FF39  4E                 	db	78	;'N'
   653  00FF3A  65                 	db	101	;'e'
   654  00FF3B  78                 	db	120	;'x'
   655  00FF3C  74                 	db	116	;'t'
   656  00FF3D  20                 	db	32
   657  00FF3E  20                 	db	32
   658  00FF3F  00                 	db	0
   659  00FF40                     STR_27:
   660  00FF40  52                 	db	82	;'R'
   661  00FF41  75                 	db	117	;'u'
   662  00FF42  6E                 	db	110	;'n'
   663  00FF43  23                 	db	35
   664  00FF44  33                 	db	51	;'3'
   665  00FF45  20                 	db	32
   666  00FF46  20                 	db	32
   667  00FF47  20                 	db	32
   668  00FF48  20                 	db	32
   669  00FF49  41                 	db	65	;'A'
   670  00FF4A  3A                 	db	58	;':'
   671  00FF4B  4E                 	db	78	;'N'
   672  00FF4C  65                 	db	101	;'e'
   673  00FF4D  78                 	db	120	;'x'
   674  00FF4E  74                 	db	116	;'t'
   675  00FF4F  20                 	db	32
   676  00FF50  20                 	db	32
   677  00FF51  00                 	db	0
   678  00FF52                     STR_13:
   679  00FF52  50                 	db	80	;'P'
   680  00FF53  4F                 	db	79	;'O'
   681  00FF54  50                 	db	80	;'P'
   682  00FF55  43                 	db	67	;'C'
   683  00FF56  41                 	db	65	;'A'
   684  00FF57  4E                 	db	78	;'N'
   685  00FF58  20                 	db	32
   686  00FF59  4E                 	db	78	;'N'
   687  00FF5A  4F                 	db	79	;'O'
   688  00FF5B  54                 	db	84	;'T'
   689  00FF5C  41                 	db	65	;'A'
   690  00FF5D  42                 	db	66	;'B'
   691  00FF5E  3A                 	db	58	;':'
   692  00FF5F  20                 	db	32
   693  00FF60  25                 	db	37
   694  00FF61  64                 	db	100	;'d'
   695  00FF62  20                 	db	32
   696  00FF63  00                 	db	0
   697  00FF64                     STR_43:
   698  00FF64  45                 	db	69	;'E'
   699  00FF65  4D                 	db	77	;'M'
   700  00FF66  45                 	db	69	;'E'
   701  00FF67  52                 	db	82	;'R'
   702  00FF68  47                 	db	71	;'G'
   703  00FF69  45                 	db	69	;'E'
   704  00FF6A  4E                 	db	78	;'N'
   705  00FF6B  43                 	db	67	;'C'
   706  00FF6C  59                 	db	89	;'Y'
   707  00FF6D  2C                 	db	44
   708  00FF6E  53                 	db	83	;'S'
   709  00FF6F  54                 	db	84	;'T'
   710  00FF70  4F                 	db	79	;'O'
   711  00FF71  50                 	db	80	;'P'
   712  00FF72  50                 	db	80	;'P'
   713  00FF73  45                 	db	69	;'E'
   714  00FF74  44                 	db	68	;'D'
   715  00FF75  00                 	db	0
   716  00FF76                     STR_44:
   717  00FF76  30                 	db	48	;'0'
   718  00FF77  31                 	db	49	;'1'
   719  00FF78  32                 	db	50	;'2'
   720  00FF79  33                 	db	51	;'3'
   721  00FF7A  34                 	db	52	;'4'
   722  00FF7B  35                 	db	53	;'5'
   723  00FF7C  36                 	db	54	;'6'
   724  00FF7D  37                 	db	55	;'7'
   725  00FF7E  38                 	db	56	;'8'
   726  00FF7F  39                 	db	57	;'9'
   727  00FF80  41                 	db	65	;'A'
   728  00FF81  42                 	db	66	;'B'
   729  00FF82  43                 	db	67	;'C'
   730  00FF83  44                 	db	68	;'D'
   731  00FF84  45                 	db	69	;'E'
   732  00FF85  46                 	db	70	;'F'
   733  00FF86  00                 	db	0
   734  00FF87                     STR_45:
   735  00FF87  30                 	db	48	;'0'
   736  00FF88  31                 	db	49	;'1'
   737  00FF89  32                 	db	50	;'2'
   738  00FF8A  33                 	db	51	;'3'
   739  00FF8B  34                 	db	52	;'4'
   740  00FF8C  35                 	db	53	;'5'
   741  00FF8D  36                 	db	54	;'6'
   742  00FF8E  37                 	db	55	;'7'
   743  00FF8F  38                 	db	56	;'8'
   744  00FF90  39                 	db	57	;'9'
   745  00FF91  61                 	db	97	;'a'
   746  00FF92  62                 	db	98	;'b'
   747  00FF93  63                 	db	99	;'c'
   748  00FF94  64                 	db	100	;'d'
   749  00FF95  65                 	db	101	;'e'
   750  00FF96  66                 	db	102	;'f'
   751  00FF97  00                 	db	0
   752  00FF98                     STR_9:
   753  00FF98  54                 	db	84	;'T'
   754  00FF99  6F                 	db	111	;'o'
   755  00FF9A  74                 	db	116	;'t'
   756  00FF9B  61                 	db	97	;'a'
   757  00FF9C  6C                 	db	108	;'l'
   758  00FF9D  3A                 	db	58	;':'
   759  00FF9E  20                 	db	32
   760  00FF9F  25                 	db	37
   761  00FFA0  64                 	db	100	;'d'
   762  00FFA1  20                 	db	32
   763  00FFA2  20                 	db	32
   764  00FFA3  20                 	db	32
   765  00FFA4  20                 	db	32
   766  00FFA5  20                 	db	32
   767  00FFA6  20                 	db	32
   768  00FFA7  20                 	db	32
   769  00FFA8  00                 	db	0
   770  00FFA9                     STR_8:
   771  00FFA9  43                 	db	67	;'C'
   772  00FFAA  61                 	db	97	;'a'
   773  00FFAB  6E                 	db	110	;'n'
   774  00FFAC  20                 	db	32
   775  00FFAD  43                 	db	67	;'C'
   776  00FFAE  6F                 	db	111	;'o'
   777  00FFAF  75                 	db	117	;'u'
   778  00FFB0  6E                 	db	110	;'n'
   779  00FFB1  74                 	db	116	;'t'
   780  00FFB2  20                 	db	32
   781  00FFB3  20                 	db	32
   782  00FFB4  20                 	db	32
   783  00FFB5  20                 	db	32
   784  00FFB6  20                 	db	32
   785  00FFB7  20                 	db	32
   786  00FFB8  20                 	db	32
   787  00FFB9  00                 	db	0
   788  00FFBA                     STR_5:
   789  00FFBA  44                 	db	68	;'D'
   790  00FFBB  45                 	db	69	;'E'
   791  00FFBC  42                 	db	66	;'B'
   792  00FFBD  55                 	db	85	;'U'
   793  00FFBE  47                 	db	71	;'G'
   794  00FFBF  50                 	db	80	;'P'
   795  00FFC0  4F                 	db	79	;'O'
   796  00FFC1  52                 	db	82	;'R'
   797  00FFC2  54                 	db	84	;'T'
   798  00FFC3  42                 	db	66	;'B'
   799  00FFC4  3A                 	db	58	;':'
   800  00FFC5  20                 	db	32
   801  00FFC6  25                 	db	37
   802  00FFC7  64                 	db	100	;'d'
   803  00FFC8  20                 	db	32
   804  00FFC9  00                 	db	0
   805  00FFCA                     STR_3:
   806  00FFCA  49                 	db	73	;'I'
   807  00FFCB  6E                 	db	110	;'n'
   808  00FFCC  76                 	db	118	;'v'
   809  00FFCD  61                 	db	97	;'a'
   810  00FFCE  6C                 	db	108	;'l'
   811  00FFCF  69                 	db	105	;'i'
   812  00FFD0  64                 	db	100	;'d'
   813  00FFD1  20                 	db	32
   814  00FFD2  41                 	db	65	;'A'
   815  00FFD3  63                 	db	99	;'c'
   816  00FFD4  74                 	db	116	;'t'
   817  00FFD5  69                 	db	105	;'i'
   818  00FFD6  6F                 	db	111	;'o'
   819  00FFD7  6E                 	db	110	;'n'
   820  00FFD8  00                 	db	0
   821  00FFD9                     STR_4:
   822  00FFD9  41                 	db	65	;'A'
   823  00FFDA  3A                 	db	58	;':'
   824  00FFDB  53                 	db	83	;'S'
   825  00FFDC  74                 	db	116	;'t'
   826  00FFDD  61                 	db	97	;'a'
   827  00FFDE  72                 	db	114	;'r'
   828  00FFDF  74                 	db	116	;'t'
   829  00FFE0  20                 	db	32
   830  00FFE1  23                 	db	35
   831  00FFE2  3A                 	db	58	;':'
   832  00FFE3  4C                 	db	76	;'L'
   833  00FFE4  6F                 	db	111	;'o'
   834  00FFE5  67                 	db	103	;'g'
   835  00FFE6  73                 	db	115	;'s'
   836  00FFE7  00                 	db	0
   837  00FFE8                     STR_1:
   838  00FFE8  72                 	db	114	;'r'
   839  00FFE9  65                 	db	101	;'e'
   840  00FFEA  61                 	db	97	;'a'
   841  00FFEB  63                 	db	99	;'c'
   842  00FFEC  68                 	db	104	;'h'
   843  00FFED  65                 	db	101	;'e'
   844  00FFEE  64                 	db	100	;'d'
   845  00FFEF  20                 	db	32
   846  00FFF0  6C                 	db	108	;'l'
   847  00FFF1  6F                 	db	111	;'o'
   848  00FFF2  67                 	db	103	;'g'
   849  00FFF3  73                 	db	115	;'s'
   850  00FFF4  00                 	db	0
   851  00FFF5                     STR_14:
   852  00FFF5  45                 	db	69	;'E'
   853  00FFF6  52                 	db	82	;'R'
   854  00FFF7  52                 	db	82	;'R'
   855  00FFF8  4F                 	db	79	;'O'
   856  00FFF9  52                 	db	82	;'R'
   857  00FFFA  3A                 	db	58	;':'
   858  00FFFB  20                 	db	32
   859  00FFFC  25                 	db	37
   860  00FFFD  64                 	db	100	;'d'
   861  00FFFE  00                 	db	0
   862  0000                     
   863                           ; #config settings
   864  00FFFF  00                 	db	0	; dummy byte at the end
   865  0000                     
   866                           	psect	cinit
   867  00309A                     __pcinit:
   868                           	opt stack 0
   869  00309A                     start_initialization:
   870                           	opt stack 0
   871  00309A                     __initialization:
   872                           	opt stack 0
   873                           
   874                           ; Initialize objects allocated to BANK0 (4 bytes)
   875                           ; load TBLPTR registers with __pidataBANK0
   876  00309A  0EC8               	movlw	low __pidataBANK0
   877  00309C  6EF6               	movwf	tblptrl,c
   878  00309E  0E34               	movlw	high __pidataBANK0
   879  0030A0  6EF7               	movwf	tblptrh,c
   880  0030A2  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   881  0030A4  6EF8               	movwf	tblptru,c
   882  0030A6  EE00  F0EB         	lfsr	0,__pdataBANK0
   883  0030AA  EE10 F004          	lfsr	1,4
   884  0030AE                     copy_data0:
   885  0030AE  0009               	tblrd		*+
   886  0030B0  CFF5 FFEE          	movff	tablat,postinc0
   887  0030B4  50E5               	movf	postdec1,w,c
   888  0030B6  50E1               	movf	fsr1l,w,c
   889  0030B8  E1FA               	bnz	copy_data0
   890                           
   891                           ; Clear objects allocated to BANK1 (22 bytes)
   892  0030BA  EE01  F000         	lfsr	0,__pbssBANK1
   893  0030BE  0E16               	movlw	22
   894  0030C0                     clear_0:
   895  0030C0  6AEE               	clrf	postinc0,c
   896  0030C2  06E8               	decf	wreg,f,c
   897  0030C4  E1FD               	bnz	clear_0
   898                           
   899                           ; Clear objects allocated to BANK0 (40 bytes)
   900  0030C6  EE00  F0C3         	lfsr	0,__pbssBANK0
   901  0030CA  0E28               	movlw	40
   902  0030CC                     clear_1:
   903  0030CC  6AEE               	clrf	postinc0,c
   904  0030CE  06E8               	decf	wreg,f,c
   905  0030D0  E1FD               	bnz	clear_1
   906                           
   907                           ; Clear objects allocated to COMRAM (9 bytes)
   908  0030D2  EE00  F076         	lfsr	0,__pbssCOMRAM
   909  0030D6  0E09               	movlw	9
   910  0030D8                     clear_2:
   911  0030D8  6AEE               	clrf	postinc0,c
   912  0030DA  06E8               	decf	wreg,f,c
   913  0030DC  E1FD               	bnz	clear_2
   914  0030DE                     end_of_initialization:
   915                           	opt stack 0
   916  0030DE                     __end_of__initialization:
   917                           	opt stack 0
   918  0030DE  907F               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   919  0030E0  927F               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   920  0030E2  0E00               	movlw	low (__Lmediumconst shr (0+16))
   921  0030E4  6EF8               	movwf	tblptru,c
   922  0030E6  0100               	movlb	0
   923  0030E8  EF13  F010         	goto	_main	;jump to C main() function
   924                           tblptru	equ	0xFF8
   925                           tblptrh	equ	0xFF7
   926                           tblptrl	equ	0xFF6
   927                           tablat	equ	0xFF5
   928                           postinc0	equ	0xFEE
   929                           wreg	equ	0xFE8
   930                           postdec1	equ	0xFE5
   931                           fsr1l	equ	0xFE1
   932                           
   933                           	psect	bssCOMRAM
   934  000076                     __pbssCOMRAM:
   935                           	opt stack 0
   936  000076                     _end_time:
   937                           	opt stack 0
   938  000076                     	ds	2
   939  000078                     _etime:
   940                           	opt stack 0
   941  000078                     	ds	2
   942  00007A                     _start_time:
   943                           	opt stack 0
   944  00007A                     	ds	2
   945  00007C                     _stime:
   946                           	opt stack 0
   947  00007C                     	ds	2
   948  00007E                     _keypress:
   949                           	opt stack 0
   950  00007E                     	ds	1
   951                           tblptru	equ	0xFF8
   952                           tblptrh	equ	0xFF7
   953                           tblptrl	equ	0xFF6
   954                           tablat	equ	0xFF5
   955                           postinc0	equ	0xFEE
   956                           wreg	equ	0xFE8
   957                           postdec1	equ	0xFE5
   958                           fsr1l	equ	0xFE1
   959                           
   960                           	psect	bssBANK0
   961  0000C3                     __pbssBANK0:
   962                           	opt stack 0
   963  0000C3                     _time:
   964                           	opt stack 0
   965  0000C3                     	ds	7
   966  0000CA                     _POPCAN_NOTAB_count:
   967                           	opt stack 0
   968  0000CA                     	ds	2
   969  0000CC                     _POPCAN_TAB_count:
   970                           	opt stack 0
   971  0000CC                     	ds	2
   972  0000CE                     _SOUP_LBL_count:
   973                           	opt stack 0
   974  0000CE                     	ds	2
   975  0000D0                     _SOUP_NOLBL_COUNT:
   976                           	opt stack 0
   977  0000D0                     	ds	2
   978  0000D2                     _bottlequeue_head:
   979                           	opt stack 0
   980  0000D2                     	ds	2
   981  0000D4                     _bottlequeue_tail:
   982                           	opt stack 0
   983  0000D4                     	ds	2
   984  0000D6                     _data:
   985                           	opt stack 0
   986  0000D6                     	ds	2
   987  0000D8                     _errno:
   988                           	opt stack 0
   989  0000D8                     	ds	2
   990  0000DA                     _eska_count:
   991                           	opt stack 0
   992  0000DA                     	ds	2
   993  0000DC                     _eskacap_count:
   994                           	opt stack 0
   995  0000DC                     	ds	2
   996  0000DE                     _eskacaplbl_count:
   997                           	opt stack 0
   998  0000DE                     	ds	2
   999  0000E0                     _eskalbl_count:
  1000                           	opt stack 0
  1001  0000E0                     	ds	2
  1002  0000E2                     _operation_disp:
  1003                           	opt stack 0
  1004  0000E2                     	ds	2
  1005  0000E4                     _operation_time:
  1006                           	opt stack 0
  1007  0000E4                     	ds	2
  1008  0000E6                     _testdata:
  1009                           	opt stack 0
  1010  0000E6                     	ds	2
  1011  0000E8                     _total_bottle_count:
  1012                           	opt stack 0
  1013  0000E8                     	ds	2
  1014  0000EA                     _curr_state:
  1015                           	opt stack 0
  1016  0000EA                     	ds	1
  1017                           tblptru	equ	0xFF8
  1018                           tblptrh	equ	0xFF7
  1019                           tblptrl	equ	0xFF6
  1020                           tablat	equ	0xFF5
  1021                           postinc0	equ	0xFEE
  1022                           wreg	equ	0xFE8
  1023                           postdec1	equ	0xFE5
  1024                           fsr1l	equ	0xFE1
  1025                           
  1026                           	psect	dataBANK0
  1027  0000EB                     __pdataBANK0:
  1028                           	opt stack 0
  1029  0000EB                     _can_count_disp:
  1030                           	opt stack 0
  1031  0000EB                     	ds	2
  1032  0000ED                     _log_position:
  1033                           	opt stack 0
  1034  0000ED                     	ds	2
  1035                           tblptru	equ	0xFF8
  1036                           tblptrh	equ	0xFF7
  1037                           tblptrl	equ	0xFF6
  1038                           tablat	equ	0xFF5
  1039                           postinc0	equ	0xFEE
  1040                           wreg	equ	0xFE8
  1041                           postdec1	equ	0xFE5
  1042                           fsr1l	equ	0xFE1
  1043                           
  1044                           	psect	bssBANK1
  1045  000100                     __pbssBANK1:
  1046                           	opt stack 0
  1047  000100                     _bottlequeue:
  1048                           	opt stack 0
  1049  000100                     	ds	22
  1050                           tblptru	equ	0xFF8
  1051                           tblptrh	equ	0xFF7
  1052                           tblptrl	equ	0xFF6
  1053                           tablat	equ	0xFF5
  1054                           postinc0	equ	0xFEE
  1055                           wreg	equ	0xFE8
  1056                           postdec1	equ	0xFE5
  1057                           fsr1l	equ	0xFE1
  1058                           
  1059                           	psect	cstackBANK1
  1060  000116                     __pcstackBANK1:
  1061                           	opt stack 0
  1062  000116                     ??_main:
  1063                           
  1064                           ; 1 bytes @ 0x0
  1065  000116                     	ds	2
  1066                           tblptru	equ	0xFF8
  1067                           tblptrh	equ	0xFF7
  1068                           tblptrl	equ	0xFF6
  1069                           tablat	equ	0xFF5
  1070                           postinc0	equ	0xFEE
  1071                           wreg	equ	0xFE8
  1072                           postdec1	equ	0xFE5
  1073                           fsr1l	equ	0xFE1
  1074                           
  1075                           	psect	cstackBANK0
  1076  000080                     __pcstackBANK0:
  1077                           	opt stack 0
  1078  000080                     ??_isr:
  1079                           
  1080                           ; 1 bytes @ 0x0
  1081  000080                     	ds	16
  1082  000090                     ??_isdigit:
  1083  000090                     ??_I2C_Master_Wait:
  1084  000090                     ?___wmul:
  1085                           	opt stack 0
  1086  000090                     ?___awmod:
  1087                           	opt stack 0
  1088  000090                     ?___lwdiv:
  1089                           	opt stack 0
  1090  000090                     ?___lldiv:
  1091                           	opt stack 0
  1092  000090                     lcdNibble@temp:
  1093                           	opt stack 0
  1094  000090                     ___wmul@multiplier:
  1095                           	opt stack 0
  1096  000090                     ___awmod@dividend:
  1097                           	opt stack 0
  1098  000090                     ___lwdiv@dividend:
  1099                           	opt stack 0
  1100  000090                     ___lldiv@dividend:
  1101                           	opt stack 0
  1102                           
  1103                           ; 4 bytes @ 0x10
  1104  000090                     	ds	1
  1105  000091                     I2C_Master_Read@a:
  1106                           	opt stack 0
  1107  000091                     lcdNibble@data:
  1108                           	opt stack 0
  1109  000091                     _isdigit$962:
  1110                           	opt stack 0
  1111  000091                     I2C_Master_Write@d:
  1112                           	opt stack 0
  1113                           
  1114                           ; 2 bytes @ 0x11
  1115  000091                     	ds	1
  1116  000092                     I2C_Master_Read@temp:
  1117                           	opt stack 0
  1118  000092                     lcdInst@data:
  1119                           	opt stack 0
  1120  000092                     putch@data:
  1121                           	opt stack 0
  1122  000092                     isdigit@c:
  1123                           	opt stack 0
  1124  000092                     ___wmul@multiplicand:
  1125                           	opt stack 0
  1126  000092                     ___awmod@divisor:
  1127                           	opt stack 0
  1128  000092                     ___lwdiv@divisor:
  1129                           	opt stack 0
  1130                           
  1131                           ; 2 bytes @ 0x12
  1132  000092                     	ds	1
  1133  000093                     ??_initLCD:
  1134  000093                     getRTC@j:
  1135                           	opt stack 0
  1136                           
  1137                           ; 1 bytes @ 0x13
  1138  000093                     	ds	1
  1139  000094                     ___awmod@counter:
  1140                           	opt stack 0
  1141  000094                     ___wmul@product:
  1142                           	opt stack 0
  1143  000094                     ___lwdiv@quotient:
  1144                           	opt stack 0
  1145  000094                     ___lldiv@divisor:
  1146                           	opt stack 0
  1147                           
  1148                           ; 4 bytes @ 0x14
  1149  000094                     	ds	1
  1150  000095                     ___awmod@sign:
  1151                           	opt stack 0
  1152                           
  1153                           ; 1 bytes @ 0x15
  1154  000095                     	ds	1
  1155  000096                     ___lwdiv@counter:
  1156                           	opt stack 0
  1157                           
  1158                           ; 1 bytes @ 0x16
  1159  000096                     	ds	1
  1160  000097                     ?___lwmod:
  1161                           	opt stack 0
  1162  000097                     ___lwmod@dividend:
  1163                           	opt stack 0
  1164                           
  1165                           ; 2 bytes @ 0x17
  1166  000097                     	ds	1
  1167  000098                     ___lldiv@quotient:
  1168                           	opt stack 0
  1169                           
  1170                           ; 4 bytes @ 0x18
  1171  000098                     	ds	1
  1172  000099                     ___lwmod@divisor:
  1173                           	opt stack 0
  1174                           
  1175                           ; 2 bytes @ 0x19
  1176  000099                     	ds	2
  1177  00009B                     ___lwmod@counter:
  1178                           	opt stack 0
  1179                           
  1180                           ; 1 bytes @ 0x1B
  1181  00009B                     	ds	1
  1182  00009C                     ?_printf:
  1183                           	opt stack 0
  1184  00009C                     ___lldiv@counter:
  1185                           	opt stack 0
  1186  00009C                     printf@f:
  1187                           	opt stack 0
  1188                           
  1189                           ; 2 bytes @ 0x1C
  1190  00009C                     	ds	1
  1191  00009D                     I2C_Master_Init@c:
  1192                           	opt stack 0
  1193                           
  1194                           ; 4 bytes @ 0x1D
  1195  00009D                     	ds	4
  1196  0000A1                     ??_I2C_Master_Init:
  1197                           
  1198                           ; 1 bytes @ 0x21
  1199  0000A1                     	ds	7
  1200  0000A8                     ??_printf:
  1201                           
  1202                           ; 1 bytes @ 0x28
  1203  0000A8                     	ds	4
  1204  0000AC                     printf@cp:
  1205                           	opt stack 0
  1206                           
  1207                           ; 2 bytes @ 0x2C
  1208  0000AC                     	ds	2
  1209  0000AE                     _printf$741:
  1210                           	opt stack 0
  1211                           
  1212                           ; 2 bytes @ 0x2E
  1213  0000AE                     	ds	2
  1214  0000B0                     _printf$742:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0x30
  1218  0000B0                     	ds	2
  1219  0000B2                     _printf$748:
  1220                           	opt stack 0
  1221                           
  1222                           ; 2 bytes @ 0x32
  1223  0000B2                     	ds	2
  1224  0000B4                     printf@idx:
  1225                           	opt stack 0
  1226                           
  1227                           ; 1 bytes @ 0x34
  1228  0000B4                     	ds	1
  1229  0000B5                     printf@len:
  1230                           	opt stack 0
  1231                           
  1232                           ; 2 bytes @ 0x35
  1233  0000B5                     	ds	2
  1234  0000B7                     printf@ap:
  1235                           	opt stack 0
  1236                           
  1237                           ; 2 bytes @ 0x37
  1238  0000B7                     	ds	2
  1239  0000B9                     printf@val:
  1240                           	opt stack 0
  1241                           
  1242                           ; 2 bytes @ 0x39
  1243  0000B9                     	ds	2
  1244  0000BB                     printf@prec:
  1245                           	opt stack 0
  1246                           
  1247                           ; 1 bytes @ 0x3B
  1248  0000BB                     	ds	1
  1249  0000BC                     printf@width:
  1250                           	opt stack 0
  1251                           
  1252                           ; 2 bytes @ 0x3C
  1253  0000BC                     	ds	2
  1254  0000BE                     printf@c:
  1255                           	opt stack 0
  1256                           
  1257                           ; 1 bytes @ 0x3E
  1258  0000BE                     	ds	1
  1259  0000BF                     printf@flag:
  1260                           	opt stack 0
  1261                           
  1262                           ; 2 bytes @ 0x3F
  1263  0000BF                     	ds	2
  1264  0000C1                     ??_operation:
  1265  0000C1                     
  1266                           ; 1 bytes @ 0x41
  1267  0000C1                     	ds	2
  1268                           tblptru	equ	0xFF8
  1269                           tblptrh	equ	0xFF7
  1270                           tblptrl	equ	0xFF6
  1271                           tablat	equ	0xFF5
  1272                           postinc0	equ	0xFEE
  1273                           wreg	equ	0xFE8
  1274                           postdec1	equ	0xFE5
  1275                           fsr1l	equ	0xFE1
  1276                           
  1277                           	psect	cstackCOMRAM
  1278  000001                     __pcstackCOMRAM:
  1279                           	opt stack 0
  1280  000001                     ??i2_I2C_Master_Wait:
  1281  000001                     ??i2_isdigit:
  1282  000001                     ?i2___wmul:
  1283                           	opt stack 0
  1284  000001                     ?i2___lwdiv:
  1285                           	opt stack 0
  1286  000001                     ?___ftpack:
  1287                           	opt stack 0
  1288  000001                     ?_frexp:
  1289                           	opt stack 0
  1290  000001                     ?___ftneg:
  1291                           	opt stack 0
  1292  000001                     i2lcdNibble@temp:
  1293                           	opt stack 0
  1294  000001                     servo_rotate0@degree:
  1295                           	opt stack 0
  1296  000001                     i2___wmul@multiplier:
  1297                           	opt stack 0
  1298  000001                     i2___lwdiv@dividend:
  1299                           	opt stack 0
  1300  000001                     ___ftpack@arg:
  1301                           	opt stack 0
  1302  000001                     ___ftge@ff1:
  1303                           	opt stack 0
  1304  000001                     ___ftneg@f1:
  1305                           	opt stack 0
  1306  000001                     frexp@value:
  1307                           	opt stack 0
  1308                           
  1309                           ; 3 bytes @ 0x0
  1310  000001                     	ds	1
  1311  000002                     i2I2C_Master_Read@a:
  1312                           	opt stack 0
  1313  000002                     i2lcdNibble@data:
  1314                           	opt stack 0
  1315  000002                     i2_isdigit$962:
  1316                           	opt stack 0
  1317  000002                     i2I2C_Master_Write@d:
  1318                           	opt stack 0
  1319                           
  1320                           ; 2 bytes @ 0x1
  1321  000002                     	ds	1
  1322  000003                     ??_servo_rotate0:
  1323  000003                     i2I2C_Master_Read@temp:
  1324                           	opt stack 0
  1325  000003                     i2lcdInst@data:
  1326                           	opt stack 0
  1327  000003                     i2putch@data:
  1328                           	opt stack 0
  1329  000003                     i2isdigit@c:
  1330                           	opt stack 0
  1331  000003                     i2___wmul@multiplicand:
  1332                           	opt stack 0
  1333  000003                     i2___lwdiv@divisor:
  1334                           	opt stack 0
  1335                           
  1336                           ; 2 bytes @ 0x2
  1337  000003                     	ds	1
  1338  000004                     read_time@i:
  1339                           	opt stack 0
  1340  000004                     ___ftpack@exp:
  1341                           	opt stack 0
  1342  000004                     frexp@eptr:
  1343                           	opt stack 0
  1344  000004                     ___ftge@ff2:
  1345                           	opt stack 0
  1346                           
  1347                           ; 3 bytes @ 0x3
  1348  000004                     	ds	1
  1349  000005                     ___ftpack@sign:
  1350                           	opt stack 0
  1351  000005                     servo_rotate0@duty:
  1352                           	opt stack 0
  1353  000005                     i2___wmul@product:
  1354                           	opt stack 0
  1355  000005                     i2___lwdiv@quotient:
  1356                           	opt stack 0
  1357                           
  1358                           ; 2 bytes @ 0x4
  1359  000005                     	ds	1
  1360  000006                     ??___ftpack:
  1361  000006                     ??_frexp:
  1362                           
  1363                           ; 1 bytes @ 0x5
  1364  000006                     	ds	1
  1365  000007                     ??___ftge:
  1366  000007                     ?___awdiv:
  1367                           	opt stack 0
  1368  000007                     i2___lwdiv@counter:
  1369                           	opt stack 0
  1370  000007                     servo_rotate0@i:
  1371                           	opt stack 0
  1372  000007                     ___awdiv@dividend:
  1373                           	opt stack 0
  1374                           
  1375                           ; 2 bytes @ 0x6
  1376  000007                     	ds	1
  1377  000008                     ?i2___lwmod:
  1378                           	opt stack 0
  1379  000008                     i2___lwmod@dividend:
  1380                           	opt stack 0
  1381                           
  1382                           ; 2 bytes @ 0x7
  1383  000008                     	ds	1
  1384  000009                     ?___ftdiv:
  1385                           	opt stack 0
  1386  000009                     ?___awtoft:
  1387                           	opt stack 0
  1388  000009                     ?___lltoft:
  1389                           	opt stack 0
  1390  000009                     servo_rotate0@j:
  1391                           	opt stack 0
  1392  000009                     ___awdiv@divisor:
  1393                           	opt stack 0
  1394  000009                     ___awtoft@c:
  1395                           	opt stack 0
  1396  000009                     ___ftdiv@f1:
  1397                           	opt stack 0
  1398  000009                     ___lltoft@c:
  1399                           	opt stack 0
  1400                           
  1401                           ; 4 bytes @ 0x8
  1402  000009                     	ds	1
  1403  00000A                     i2___lwmod@divisor:
  1404                           	opt stack 0
  1405                           
  1406                           ; 2 bytes @ 0x9
  1407  00000A                     	ds	1
  1408  00000B                     ___awdiv@counter:
  1409                           	opt stack 0
  1410                           
  1411                           ; 1 bytes @ 0xA
  1412  00000B                     	ds	1
  1413  00000C                     ___awdiv@sign:
  1414                           	opt stack 0
  1415  00000C                     ___awtoft@sign:
  1416                           	opt stack 0
  1417  00000C                     i2___lwmod@counter:
  1418                           	opt stack 0
  1419  00000C                     ___ftdiv@f2:
  1420                           	opt stack 0
  1421                           
  1422                           ; 3 bytes @ 0xB
  1423  00000C                     	ds	1
  1424  00000D                     ??___lltoft:
  1425  00000D                     ?i2_printf:
  1426                           	opt stack 0
  1427  00000D                     ?___ftmul:
  1428                           	opt stack 0
  1429  00000D                     ___awdiv@quotient:
  1430                           	opt stack 0
  1431  00000D                     i2printf@f:
  1432                           	opt stack 0
  1433  00000D                     ___ftmul@f1:
  1434                           	opt stack 0
  1435                           
  1436                           ; 3 bytes @ 0xC
  1437  00000D                     	ds	2
  1438  00000F                     ??___ftdiv:
  1439  00000F                     ??i2_printf:
  1440  00000F                     servo_rotate1@degree:
  1441                           	opt stack 0
  1442  00000F                     servo_rotate2@degree:
  1443                           	opt stack 0
  1444                           
  1445                           ; 2 bytes @ 0xE
  1446  00000F                     	ds	1
  1447  000010                     ___ftmul@f2:
  1448                           	opt stack 0
  1449                           
  1450                           ; 3 bytes @ 0xF
  1451  000010                     	ds	1
  1452  000011                     ??_servo_rotate2:
  1453  000011                     ??_servo_rotate1:
  1454  000011                     ___lltoft@exp:
  1455                           	opt stack 0
  1456                           
  1457                           ; 1 bytes @ 0x10
  1458  000011                     	ds	1
  1459  000012                     ___ftdiv@cntr:
  1460                           	opt stack 0
  1461                           
  1462                           ; 1 bytes @ 0x11
  1463  000012                     	ds	1
  1464  000013                     ??___ftmul:
  1465  000013                     i2printf@idx:
  1466                           	opt stack 0
  1467  000013                     servo_rotate1@duty:
  1468                           	opt stack 0
  1469  000013                     servo_rotate2@duty:
  1470                           	opt stack 0
  1471  000013                     ___ftdiv@f3:
  1472                           	opt stack 0
  1473                           
  1474                           ; 3 bytes @ 0x12
  1475  000013                     	ds	1
  1476  000014                     i2printf@cp:
  1477                           	opt stack 0
  1478                           
  1479                           ; 2 bytes @ 0x13
  1480  000014                     	ds	1
  1481  000015                     servo_rotate1@i:
  1482                           	opt stack 0
  1483  000015                     servo_rotate2@i:
  1484                           	opt stack 0
  1485                           
  1486                           ; 2 bytes @ 0x14
  1487  000015                     	ds	1
  1488  000016                     ___ftdiv@exp:
  1489                           	opt stack 0
  1490  000016                     ___ftmul@exp:
  1491                           	opt stack 0
  1492  000016                     i2_printf$741:
  1493                           	opt stack 0
  1494                           
  1495                           ; 2 bytes @ 0x15
  1496  000016                     	ds	1
  1497  000017                     ___ftdiv@sign:
  1498                           	opt stack 0
  1499  000017                     servo_rotate1@j:
  1500                           	opt stack 0
  1501  000017                     servo_rotate2@j:
  1502                           	opt stack 0
  1503  000017                     ___ftmul@f3_as_product:
  1504                           	opt stack 0
  1505                           
  1506                           ; 3 bytes @ 0x16
  1507  000017                     	ds	1
  1508  000018                     i2_printf$742:
  1509                           	opt stack 0
  1510                           
  1511                           ; 2 bytes @ 0x17
  1512  000018                     	ds	2
  1513  00001A                     ___ftmul@cntr:
  1514                           	opt stack 0
  1515  00001A                     i2_printf$748:
  1516                           	opt stack 0
  1517                           
  1518                           ; 2 bytes @ 0x19
  1519  00001A                     	ds	1
  1520  00001B                     ___ftmul@sign:
  1521                           	opt stack 0
  1522                           
  1523                           ; 1 bytes @ 0x1A
  1524  00001B                     	ds	1
  1525  00001C                     ?___ftadd:
  1526                           	opt stack 0
  1527  00001C                     i2printf@len:
  1528                           	opt stack 0
  1529  00001C                     ___ftadd@f1:
  1530                           	opt stack 0
  1531                           
  1532                           ; 3 bytes @ 0x1B
  1533  00001C                     	ds	2
  1534  00001E                     i2printf@ap:
  1535                           	opt stack 0
  1536                           
  1537                           ; 2 bytes @ 0x1D
  1538  00001E                     	ds	1
  1539  00001F                     ___ftadd@f2:
  1540                           	opt stack 0
  1541                           
  1542                           ; 3 bytes @ 0x1E
  1543  00001F                     	ds	1
  1544  000020                     i2printf@val:
  1545                           	opt stack 0
  1546                           
  1547                           ; 2 bytes @ 0x1F
  1548  000020                     	ds	2
  1549  000022                     ??___ftadd:
  1550  000022                     i2printf@prec:
  1551                           	opt stack 0
  1552                           
  1553                           ; 1 bytes @ 0x21
  1554  000022                     	ds	1
  1555  000023                     i2printf@width:
  1556                           	opt stack 0
  1557                           
  1558                           ; 2 bytes @ 0x22
  1559  000023                     	ds	2
  1560  000025                     ___ftadd@sign:
  1561                           	opt stack 0
  1562  000025                     i2printf@c:
  1563                           	opt stack 0
  1564                           
  1565                           ; 1 bytes @ 0x24
  1566  000025                     	ds	1
  1567  000026                     ___ftadd@exp2:
  1568                           	opt stack 0
  1569  000026                     i2printf@flag:
  1570                           	opt stack 0
  1571                           
  1572                           ; 2 bytes @ 0x25
  1573  000026                     	ds	1
  1574  000027                     ___ftadd@exp1:
  1575                           	opt stack 0
  1576                           
  1577                           ; 1 bytes @ 0x26
  1578  000027                     	ds	1
  1579  000028                     ?___ftsub:
  1580                           	opt stack 0
  1581  000028                     ?_eval_poly:
  1582                           	opt stack 0
  1583  000028                     ?___fttol:
  1584                           	opt stack 0
  1585  000028                     ___ftsub@f1:
  1586                           	opt stack 0
  1587  000028                     ___fttol@f1:
  1588                           	opt stack 0
  1589  000028                     eval_poly@x:
  1590                           	opt stack 0
  1591                           
  1592                           ; 3 bytes @ 0x27
  1593  000028                     	ds	3
  1594  00002B                     eval_poly@d:
  1595                           	opt stack 0
  1596  00002B                     ___ftsub@f2:
  1597                           	opt stack 0
  1598                           
  1599                           ; 3 bytes @ 0x2A
  1600  00002B                     	ds	1
  1601  00002C                     ??___fttol:
  1602                           
  1603                           ; 1 bytes @ 0x2B
  1604  00002C                     	ds	1
  1605  00002D                     eval_poly@n:
  1606                           	opt stack 0
  1607                           
  1608                           ; 2 bytes @ 0x2C
  1609  00002D                     	ds	1
  1610  00002E                     
  1611                           ; 1 bytes @ 0x2D
  1612  00002E                     	ds	1
  1613  00002F                     ??_eval_poly:
  1614                           
  1615                           ; 1 bytes @ 0x2E
  1616  00002F                     	ds	2
  1617  000031                     ___fttol@sign1:
  1618                           	opt stack 0
  1619  000031                     eval_poly@res:
  1620                           	opt stack 0
  1621                           
  1622                           ; 3 bytes @ 0x30
  1623  000031                     	ds	1
  1624  000032                     ___fttol@lval:
  1625                           	opt stack 0
  1626                           
  1627                           ; 4 bytes @ 0x31
  1628  000032                     	ds	2
  1629  000034                     ?_log:
  1630                           	opt stack 0
  1631  000034                     ?_ldexp:
  1632                           	opt stack 0
  1633  000034                     ldexp@value:
  1634                           	opt stack 0
  1635  000034                     log@x:
  1636                           	opt stack 0
  1637                           
  1638                           ; 3 bytes @ 0x33
  1639  000034                     	ds	2
  1640  000036                     ___fttol@exp1:
  1641                           	opt stack 0
  1642                           
  1643                           ; 1 bytes @ 0x35
  1644  000036                     	ds	1
  1645  000037                     ?___altoft:
  1646                           	opt stack 0
  1647  000037                     ldexp@newexp:
  1648                           	opt stack 0
  1649  000037                     log@exponent:
  1650                           	opt stack 0
  1651  000037                     ___altoft@c:
  1652                           	opt stack 0
  1653                           
  1654                           ; 4 bytes @ 0x36
  1655  000037                     	ds	2
  1656  000039                     ??_ldexp:
  1657                           
  1658                           ; 1 bytes @ 0x38
  1659  000039                     	ds	2
  1660  00003B                     ??___altoft:
  1661                           
  1662                           ; 1 bytes @ 0x3A
  1663  00003B                     	ds	4
  1664  00003F                     ___altoft@exp:
  1665                           	opt stack 0
  1666                           
  1667                           ; 1 bytes @ 0x3E
  1668  00003F                     	ds	1
  1669  000040                     ___altoft@sign:
  1670                           	opt stack 0
  1671                           
  1672                           ; 1 bytes @ 0x3F
  1673  000040                     	ds	1
  1674  000041                     ?_floor:
  1675                           	opt stack 0
  1676  000041                     floor@x:
  1677                           	opt stack 0
  1678                           
  1679                           ; 3 bytes @ 0x40
  1680  000041                     	ds	3
  1681  000044                     floor@i:
  1682                           	opt stack 0
  1683                           
  1684                           ; 3 bytes @ 0x43
  1685  000044                     	ds	3
  1686  000047                     floor@expon:
  1687                           	opt stack 0
  1688                           
  1689                           ; 2 bytes @ 0x46
  1690  000047                     	ds	2
  1691  000049                     ?_exp:
  1692                           	opt stack 0
  1693  000049                     exp@x:
  1694                           	opt stack 0
  1695                           
  1696                           ; 3 bytes @ 0x48
  1697  000049                     	ds	3
  1698  00004C                     _exp$1410:
  1699                           	opt stack 0
  1700                           
  1701                           ; 3 bytes @ 0x4B
  1702  00004C                     	ds	3
  1703  00004F                     exp@exponent:
  1704                           	opt stack 0
  1705                           
  1706                           ; 2 bytes @ 0x4E
  1707  00004F                     	ds	2
  1708  000051                     exp@sign:
  1709                           	opt stack 0
  1710                           
  1711                           ; 1 bytes @ 0x50
  1712  000051                     	ds	1
  1713  000052                     ?_pow:
  1714                           	opt stack 0
  1715  000052                     pow@x:
  1716                           	opt stack 0
  1717                           
  1718                           ; 3 bytes @ 0x51
  1719  000052                     	ds	3
  1720  000055                     pow@y:
  1721                           	opt stack 0
  1722                           
  1723                           ; 3 bytes @ 0x54
  1724  000055                     	ds	3
  1725  000058                     _pow$1408:
  1726                           	opt stack 0
  1727                           
  1728                           ; 3 bytes @ 0x57
  1729  000058                     	ds	3
  1730  00005B                     _pow$1409:
  1731                           	opt stack 0
  1732                           
  1733                           ; 3 bytes @ 0x5A
  1734  00005B                     	ds	3
  1735  00005E                     pow@sign:
  1736                           	opt stack 0
  1737                           
  1738                           ; 1 bytes @ 0x5D
  1739  00005E                     	ds	1
  1740  00005F                     pow@yi:
  1741                           	opt stack 0
  1742                           
  1743                           ; 4 bytes @ 0x5E
  1744  00005F                     	ds	4
  1745  000063                     ?_dec_to_hex:
  1746                           	opt stack 0
  1747  000063                     dec_to_hex@num:
  1748                           	opt stack 0
  1749                           
  1750                           ; 2 bytes @ 0x62
  1751  000063                     	ds	2
  1752  000065                     _dec_to_hex$1406:
  1753                           	opt stack 0
  1754                           
  1755                           ; 3 bytes @ 0x64
  1756  000065                     	ds	3
  1757  000068                     _dec_to_hex$1407:
  1758                           	opt stack 0
  1759                           
  1760                           ; 3 bytes @ 0x67
  1761  000068                     	ds	3
  1762  00006B                     dec_to_hex@temp:
  1763                           	opt stack 0
  1764                           
  1765                           ; 2 bytes @ 0x6A
  1766  00006B                     	ds	2
  1767  00006D                     dec_to_hex@i:
  1768                           	opt stack 0
  1769                           
  1770                           ; 2 bytes @ 0x6C
  1771  00006D                     	ds	2
  1772  00006F                     dec_to_hex@hexnum:
  1773                           	opt stack 0
  1774                           
  1775                           ; 2 bytes @ 0x6E
  1776  00006F                     	ds	2
  1777  000071                     dec_to_hex@quotient:
  1778                           	opt stack 0
  1779                           
  1780                           ; 2 bytes @ 0x70
  1781  000071                     	ds	2
  1782  000073                     isr@i:
  1783                           	opt stack 0
  1784                           
  1785                           ; 1 bytes @ 0x72
  1786  000073                     	ds	1
  1787  000074                     _isr$1501:
  1788                           	opt stack 0
  1789                           
  1790                           ; 2 bytes @ 0x73
  1791  000074                     	ds	2
  1792                           tblptru	equ	0xFF8
  1793                           tblptrh	equ	0xFF7
  1794                           tblptrl	equ	0xFF6
  1795                           tablat	equ	0xFF5
  1796                           postinc0	equ	0xFEE
  1797                           wreg	equ	0xFE8
  1798                           postdec1	equ	0xFE5
  1799                           fsr1l	equ	0xFE1
  1800                           
  1801 ;;
  1802 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1803 ;;
  1804 ;; *************** function _main *****************
  1805 ;; Defined at:
  1806 ;;		line 89 in file "main.c"
  1807 ;; Parameters:    Size  Location     Type
  1808 ;;		None
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;		None
  1811 ;; Return value:  Size  Location     Type
  1812 ;;                  1    wreg      void 
  1813 ;; Registers used:
  1814 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1815 ;; Tracked objects:
  1816 ;;		On entry : 0/0
  1817 ;;		On exit  : 0/0
  1818 ;;		Unchanged: 0/0
  1819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1820 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1821 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1822 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1823 ;;      Totals:         0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1824 ;;Total ram usage:        2 bytes
  1825 ;; Hardware stack levels required when called:   11
  1826 ;; This function calls:
  1827 ;;		_I2C_Master_Init
  1828 ;;		_bottle_count
  1829 ;;		_bottle_time
  1830 ;;		_display_log
  1831 ;;		_emergencystop
  1832 ;;		_initLCD
  1833 ;;		_operation
  1834 ;;		_operationend
  1835 ;;		_standby
  1836 ;; This function is called by:
  1837 ;;		Startup code after reset
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           	psect	text0
  1842  002026                     __ptext0:
  1843                           	opt stack 0
  1844  002026                     _main:
  1845                           	opt stack 20
  1846                           
  1847                           ;main.c: 94: OSCCON = 0xF2;
  1848                           
  1849                           ;incstack = 0
  1850  002026  0EF2               	movlw	242
  1851  002028  6ED3               	movwf	4051,c	;volatile
  1852                           
  1853                           ;main.c: 96: OSCTUNEbits.PLLEN = 1;
  1854  00202A  8C9B               	bsf	3995,6,c	;volatile
  1855                           
  1856                           ;main.c: 99: TRISA = 0b00001111;
  1857  00202C  0E0F               	movlw	15
  1858  00202E  6E92               	movwf	3986,c	;volatile
  1859                           
  1860                           ;main.c: 105: TRISB = 0b11111111;
  1861  002030  6893               	setf	3987,c	;volatile
  1862                           
  1863                           ;main.c: 111: TRISC = 0x00;
  1864  002032  0E00               	movlw	0
  1865  002034  6E94               	movwf	3988,c	;volatile
  1866                           
  1867                           ;main.c: 120: TRISD = 0x00;
  1868  002036  0E00               	movlw	0
  1869  002038  6E95               	movwf	3989,c	;volatile
  1870                           
  1871                           ;main.c: 121: TRISE = 0x00;
  1872  00203A  0E00               	movlw	0
  1873  00203C  6E96               	movwf	3990,c	;volatile
  1874                           
  1875                           ;main.c: 124: ADCON0 = 0x00;
  1876  00203E  0E00               	movlw	0
  1877  002040  6EC2               	movwf	4034,c	;volatile
  1878                           
  1879                           ;main.c: 125: ADCON1 = 0xFF;
  1880  002042  68C1               	setf	4033,c	;volatile
  1881                           
  1882                           ;main.c: 126: CVRCON = 0x00;
  1883  002044  0E00               	movlw	0
  1884  002046  6EB5               	movwf	4021,c	;volatile
  1885                           
  1886                           ;main.c: 127: ADFM = 1;
  1887  002048  8EC0               	bsf	4032,7,c	;volatile
  1888                           
  1889                           ;main.c: 129: LATA = 0x00;
  1890  00204A  0E00               	movlw	0
  1891  00204C  6E89               	movwf	3977,c	;volatile
  1892                           
  1893                           ;main.c: 130: LATB = 0x00;
  1894  00204E  0E00               	movlw	0
  1895  002050  6E8A               	movwf	3978,c	;volatile
  1896                           
  1897                           ;main.c: 131: LATC = 0x00;
  1898  002052  0E00               	movlw	0
  1899  002054  6E8B               	movwf	3979,c	;volatile
  1900                           
  1901                           ;main.c: 132: LATD = 0x00;
  1902  002056  0E00               	movlw	0
  1903  002058  6E8C               	movwf	3980,c	;volatile
  1904                           
  1905                           ;main.c: 133: LATE = 0x00;
  1906  00205A  0E00               	movlw	0
  1907  00205C  6E8D               	movwf	3981,c	;volatile
  1908                           
  1909                           ;main.c: 135: ADCON0 = 0x00;
  1910  00205E  0E00               	movlw	0
  1911  002060  6EC2               	movwf	4034,c	;volatile
  1912                           
  1913                           ;main.c: 136: ADCON1 = 0xFF;
  1914  002062  68C1               	setf	4033,c	;volatile
  1915                           
  1916                           ;main.c: 139: GIE = 1;
  1917  002064  8EF2               	bsf	intcon,7,c	;volatile
  1918                           
  1919                           ;main.c: 140: INT1IE = 1;
  1920  002066  86F0               	bsf	intcon3,3,c	;volatile
  1921                           
  1922                           ;main.c: 141: INT0IE = 0;
  1923  002068  98F2               	bcf	intcon,4,c	;volatile
  1924                           
  1925                           ;main.c: 142: INT2IE = 0;
  1926  00206A  98F0               	bcf	intcon3,4,c	;volatile
  1927                           
  1928                           ;main.c: 144: nRBPU = 0;
  1929  00206C  9EF1               	bcf	intcon2,7,c	;volatile
  1930                           
  1931                           ;main.c: 146: initLCD();
  1932  00206E  EC9F  F018         	call	_initLCD	;wreg free
  1933                           
  1934                           ;main.c: 147: I2C_Master_Init(10000);
  1935  002072  0E10               	movlw	16
  1936  002074  0100               	movlb	0	; () banked
  1937  002076  6F9D               	movwf	I2C_Master_Init@c& (0+255),b
  1938  002078  0E27               	movlw	39
  1939  00207A  6F9E               	movwf	(I2C_Master_Init@c+1)& (0+255),b
  1940  00207C  0E00               	movlw	0
  1941  00207E  6F9F               	movwf	(I2C_Master_Init@c+2)& (0+255),b
  1942  002080  0E00               	movlw	0
  1943  002082  6FA0               	movwf	(I2C_Master_Init@c+3)& (0+255),b
  1944  002084  ECEF  F017         	call	_I2C_Master_Init	;wreg free
  1945                           
  1946                           ;main.c: 151: TMR0 = 0;
  1947  002088  0E00               	movlw	0
  1948  00208A  6ED7               	movwf	4055,c	;volatile
  1949  00208C  0E00               	movlw	0
  1950  00208E  6ED6               	movwf	4054,c	;volatile
  1951                           
  1952                           ;main.c: 152: T08BIT = 0;
  1953  002090  9CD5               	bcf	4053,6,c	;volatile
  1954                           
  1955                           ;main.c: 153: T0CS = 0;
  1956  002092  9AD5               	bcf	4053,5,c	;volatile
  1957                           
  1958                           ;main.c: 154: PSA = 0;
  1959  002094  96D5               	bcf	4053,3,c	;volatile
  1960                           
  1961                           ;main.c: 155: T0PS2 = 1;
  1962  002096  84D5               	bsf	4053,2,c	;volatile
  1963                           
  1964                           ;main.c: 156: T0PS1 = 1;
  1965  002098  82D5               	bsf	4053,1,c	;volatile
  1966                           
  1967                           ;main.c: 157: T0PS0 = 1;
  1968  00209A  80D5               	bsf	4053,0,c	;volatile
  1969                           
  1970                           ;main.c: 161: curr_state = STANDBY;
  1971  00209C  0E00               	movlw	0
  1972  00209E  0100               	movlb	0	; () banked
  1973  0020A0  6FEA               	movwf	_curr_state& (0+255),b
  1974                           
  1975                           ; BSR set to: 0
  1976                           ;main.c: 164: switch(curr_state){
  1977                           
  1978                           ;main.c: 163: while(1){
  1979  0020A2  D015               	goto	l5687
  1980  0020A4                     l5671:
  1981                           
  1982                           ; BSR set to: 0
  1983                           ;main.c: 166: standby();
  1984  0020A4  EC5D  F017         	call	_standby	;wreg free
  1985                           
  1986                           ;main.c: 167: break;
  1987  0020A8  D029               	goto	l5689
  1988  0020AA                     l5673:
  1989                           
  1990                           ;main.c: 169: emergencystop();
  1991  0020AA  ECE5  F019         	call	_emergencystop	;wreg free
  1992                           
  1993                           ;main.c: 170: break;
  1994  0020AE  D026               	goto	l5689
  1995  0020B0                     l5675:
  1996                           
  1997                           ;main.c: 172: operation();
  1998  0020B0  EC81  F011         	call	_operation	;wreg free
  1999                           
  2000                           ;main.c: 173: break;
  2001  0020B4  D023               	goto	l5689
  2002  0020B6                     l5677:
  2003                           
  2004                           ;main.c: 175: operationend();
  2005  0020B6  EC05  F01A         	call	_operationend	;wreg free
  2006                           
  2007                           ;main.c: 176: break;
  2008  0020BA  D020               	goto	l5689
  2009  0020BC                     l5679:
  2010                           
  2011                           ;main.c: 181: bottle_count();
  2012  0020BC  EC0F  F00F         	call	_bottle_count	;wreg free
  2013                           
  2014                           ;main.c: 182: break;
  2015  0020C0  D01D               	goto	l5689
  2016  0020C2                     l5681:
  2017                           
  2018                           ;main.c: 184: bottle_time();
  2019  0020C2  EC4B  F019         	call	_bottle_time	;wreg free
  2020                           
  2021                           ;main.c: 185: break;
  2022  0020C6  D01A               	goto	l5689
  2023  0020C8                     l5683:
  2024                           
  2025                           ;main.c: 187: display_log();
  2026  0020C8  ECED  F00A         	call	_display_log	;wreg free
  2027                           
  2028                           ;main.c: 189: }
  2029                           
  2030                           ;main.c: 188: break;
  2031  0020CC  D017               	goto	l5689
  2032  0020CE                     l5687:
  2033  0020CE  0100               	movlb	0	; () banked
  2034  0020D0  51EA               	movf	_curr_state& (0+255),w,b
  2035                           
  2036                           ; Switch size 1, requested type "space"
  2037                           ; Number of cases is 7, Range of values is 0 to 7
  2038                           ; switch strategies available:
  2039                           ; Name         Instructions Cycles
  2040                           ; simple_byte           22    12 (average)
  2041                           ;	Chosen strategy is simple_byte
  2042  0020D2  0A00               	xorlw	0	; case 0
  2043  0020D4  B4D8               	btfsc	status,2,c
  2044  0020D6  D7E6               	goto	l5671
  2045  0020D8  0A01               	xorlw	1	; case 1
  2046  0020DA  B4D8               	btfsc	status,2,c
  2047  0020DC  D7E6               	goto	l5673
  2048  0020DE  0A03               	xorlw	3	; case 2
  2049  0020E0  B4D8               	btfsc	status,2,c
  2050  0020E2  D7E6               	goto	l5675
  2051  0020E4  0A01               	xorlw	1	; case 3
  2052  0020E6  B4D8               	btfsc	status,2,c
  2053  0020E8  D7E6               	goto	l5677
  2054  0020EA  0A06               	xorlw	6	; case 5
  2055  0020EC  B4D8               	btfsc	status,2,c
  2056  0020EE  D7E6               	goto	l5679
  2057  0020F0  0A03               	xorlw	3	; case 6
  2058  0020F2  B4D8               	btfsc	status,2,c
  2059  0020F4  D7E6               	goto	l5681
  2060  0020F6  0A01               	xorlw	1	; case 7
  2061  0020F8  B4D8               	btfsc	status,2,c
  2062  0020FA  D7E6               	goto	l5683
  2063  0020FC                     l5689:
  2064                           
  2065                           ;main.c: 190: _delay((unsigned long)((200)*(10000000/4000.0)));
  2066  0020FC  0E03               	movlw	3
  2067  0020FE  0101               	movlb	1	; () banked
  2068  002100  6F17               	movwf	(??_main+1)& (0+255),b
  2069  002102  0E8A               	movlw	138
  2070  002104  0101               	movlb	1	; () banked
  2071  002106  6F16               	movwf	??_main& (0+255),b
  2072  002108  0E55               	movlw	85
  2073  00210A                     u5607:
  2074  00210A  2EE8               	decfsz	wreg,f,c
  2075  00210C  D7FE               	bra	u5607
  2076  00210E  2F16               	decfsz	??_main& (0+255),f,b
  2077  002110  D7FC               	bra	u5607
  2078  002112  2F17               	decfsz	(??_main+1)& (0+255),f,b
  2079  002114  D7FA               	bra	u5607
  2080  002116  D000               	nop2	
  2081  002118  D7DA               	goto	l5687
  2082  00211A                     __end_of_main:
  2083                           	opt stack 0
  2084                           tblptru	equ	0xFF8
  2085                           tblptrh	equ	0xFF7
  2086                           tblptrl	equ	0xFF6
  2087                           tablat	equ	0xFF5
  2088                           intcon	equ	0xFF2
  2089                           intcon2	equ	0xFF1
  2090                           intcon3	equ	0xFF0
  2091                           postinc0	equ	0xFEE
  2092                           wreg	equ	0xFE8
  2093                           postdec1	equ	0xFE5
  2094                           fsr1l	equ	0xFE1
  2095                           status	equ	0xFD8
  2096                           
  2097 ;; *************** function _standby *****************
  2098 ;; Defined at:
  2099 ;;		line 369 in file "main.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;		None
  2102 ;; Auto vars:     Size  Location     Type
  2103 ;;		None
  2104 ;; Return value:  Size  Location     Type
  2105 ;;                  1    wreg      void 
  2106 ;; Registers used:
  2107 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2108 ;; Tracked objects:
  2109 ;;		On entry : 0/0
  2110 ;;		On exit  : 0/0
  2111 ;;		Unchanged: 0/0
  2112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2113 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2114 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2115 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2116 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2117 ;;Total ram usage:        0 bytes
  2118 ;; Hardware stack levels used:    1
  2119 ;; Hardware stack levels required when called:   10
  2120 ;; This function calls:
  2121 ;;		_getRTC
  2122 ;;		_lcdInst
  2123 ;;		_printf
  2124 ;; This function is called by:
  2125 ;;		_main
  2126 ;; This function uses a non-reentrant model
  2127 ;;
  2128                           
  2129                           	psect	text1
  2130  002EBA                     __ptext1:
  2131                           	opt stack 0
  2132  002EBA                     _standby:
  2133                           	opt stack 20
  2134                           
  2135                           ;main.c: 370: getRTC();
  2136                           
  2137                           ;incstack = 0
  2138  002EBA  ECEE  F016         	call	_getRTC	;wreg free
  2139                           
  2140                           ;main.c: 371: lcdInst(0b10000000);
  2141  002EBE  0E80               	movlw	128
  2142  002EC0  EC36  F01A         	call	_lcdInst
  2143                           
  2144                           ;main.c: 372: printf("A:Start #:Logs", time[5],time[4],time[2],time[1],time[0]);
  2145  002EC4  0ED9               	movlw	low STR_4
  2146  002EC6  0100               	movlb	0	; () banked
  2147  002EC8  6F9C               	movwf	printf@f& (0+255),b
  2148  002ECA  0EFF               	movlw	high STR_4
  2149  002ECC  0100               	movlb	0	; () banked
  2150  002ECE  6F9D               	movwf	(printf@f+1)& (0+255),b
  2151  002ED0  C0C8  F09E         	movff	_time+5,?_printf+2
  2152  002ED4  0100               	movlb	0	; () banked
  2153  002ED6  6B9F               	clrf	(?_printf+3)& (0+255),b
  2154  002ED8  C0C7  F0A0         	movff	_time+4,?_printf+4
  2155  002EDC  0100               	movlb	0	; () banked
  2156  002EDE  6BA1               	clrf	(?_printf+5)& (0+255),b
  2157  002EE0  C0C5  F0A2         	movff	_time+2,?_printf+6
  2158  002EE4  0100               	movlb	0	; () banked
  2159  002EE6  6BA3               	clrf	(?_printf+7)& (0+255),b
  2160  002EE8  C0C4  F0A4         	movff	_time+1,?_printf+8
  2161  002EEC  0100               	movlb	0	; () banked
  2162  002EEE  6BA5               	clrf	(?_printf+9)& (0+255),b
  2163  002EF0  C0C3  F0A6         	movff	_time,?_printf+10
  2164  002EF4  0100               	movlb	0	; () banked
  2165  002EF6  6BA7               	clrf	(?_printf+11)& (0+255),b
  2166  002EF8  EC09  F000         	call	_printf	;wreg free
  2167                           
  2168                           ;main.c: 373: lcdInst(0b11000000);
  2169  002EFC  0EC0               	movlw	192
  2170  002EFE  EC36  F01A         	call	_lcdInst
  2171                           
  2172                           ;main.c: 374: printf("DEBUGPORTB: %d ", PORTB);
  2173  002F02  0EBA               	movlw	low STR_5
  2174  002F04  0100               	movlb	0	; () banked
  2175  002F06  6F9C               	movwf	printf@f& (0+255),b
  2176  002F08  0EFF               	movlw	high STR_5
  2177  002F0A  0100               	movlb	0	; () banked
  2178  002F0C  6F9D               	movwf	(printf@f+1)& (0+255),b
  2179  002F0E  CF81 F09E          	movff	3969,?_printf+2	;volatile
  2180  002F12  0100               	movlb	0	; () banked
  2181  002F14  6B9F               	clrf	(?_printf+3)& (0+255),b
  2182  002F16  EC09  F000         	call	_printf	;wreg free
  2183  002F1A  0012               	return	
  2184  002F1C                     __end_of_standby:
  2185                           	opt stack 0
  2186                           tblptru	equ	0xFF8
  2187                           tblptrh	equ	0xFF7
  2188                           tblptrl	equ	0xFF6
  2189                           tablat	equ	0xFF5
  2190                           intcon	equ	0xFF2
  2191                           intcon2	equ	0xFF1
  2192                           intcon3	equ	0xFF0
  2193                           postinc0	equ	0xFEE
  2194                           wreg	equ	0xFE8
  2195                           postdec1	equ	0xFE5
  2196                           fsr1l	equ	0xFE1
  2197                           status	equ	0xFD8
  2198                           
  2199 ;; *************** function _getRTC *****************
  2200 ;; Defined at:
  2201 ;;		line 351 in file "main.c"
  2202 ;; Parameters:    Size  Location     Type
  2203 ;;		None
  2204 ;; Auto vars:     Size  Location     Type
  2205 ;;  j               1   19[BANK0 ] unsigned char 
  2206 ;; Return value:  Size  Location     Type
  2207 ;;                  1    wreg      void 
  2208 ;; Registers used:
  2209 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2210 ;; Tracked objects:
  2211 ;;		On entry : 0/0
  2212 ;;		On exit  : 0/0
  2213 ;;		Unchanged: 0/0
  2214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2216 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2217 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2218 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2219 ;;Total ram usage:        1 bytes
  2220 ;; Hardware stack levels used:    1
  2221 ;; Hardware stack levels required when called:    9
  2222 ;; This function calls:
  2223 ;;		_I2C_Master_Read
  2224 ;;		_I2C_Master_Start
  2225 ;;		_I2C_Master_Stop
  2226 ;;		_I2C_Master_Write
  2227 ;; This function is called by:
  2228 ;;		_standby
  2229 ;; This function uses a non-reentrant model
  2230 ;;
  2231                           
  2232                           	psect	text2
  2233  002DDC                     __ptext2:
  2234                           	opt stack 0
  2235  002DDC                     _getRTC:
  2236                           	opt stack 20
  2237                           
  2238                           ;main.c: 353: I2C_Master_Start();
  2239                           
  2240                           ;incstack = 0
  2241  002DDC  EC58  F01A         	call	_I2C_Master_Start	;wreg free
  2242                           
  2243                           ;main.c: 354: I2C_Master_Write(0b11010000);
  2244  002DE0  0E00               	movlw	0
  2245  002DE2  0100               	movlb	0	; () banked
  2246  002DE4  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2247  002DE6  0ED0               	movlw	208
  2248  002DE8  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2249  002DEA  EC4A  F01A         	call	_I2C_Master_Write	;wreg free
  2250                           
  2251                           ;main.c: 355: I2C_Master_Write(0x00);
  2252  002DEE  0E00               	movlw	0
  2253  002DF0  0100               	movlb	0	; () banked
  2254  002DF2  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2255  002DF4  0E00               	movlw	0
  2256  002DF6  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2257  002DF8  EC4A  F01A         	call	_I2C_Master_Write	;wreg free
  2258                           
  2259                           ;main.c: 356: I2C_Master_Stop();
  2260  002DFC  EC54  F01A         	call	_I2C_Master_Stop	;wreg free
  2261                           
  2262                           ;main.c: 359: I2C_Master_Start();
  2263  002E00  EC58  F01A         	call	_I2C_Master_Start	;wreg free
  2264                           
  2265                           ;main.c: 360: I2C_Master_Write(0b11010001);
  2266  002E04  0E00               	movlw	0
  2267  002E06  0100               	movlb	0	; () banked
  2268  002E08  6F92               	movwf	(I2C_Master_Write@d+1)& (0+255),b
  2269  002E0A  0ED1               	movlw	209
  2270  002E0C  6F91               	movwf	I2C_Master_Write@d& (0+255),b
  2271  002E0E  EC4A  F01A         	call	_I2C_Master_Write	;wreg free
  2272                           
  2273                           ;main.c: 361: for(unsigned char j=0;j<0x06;j++){
  2274  002E12  0E00               	movlw	0
  2275  002E14  0100               	movlb	0	; () banked
  2276  002E16  6F93               	movwf	getRTC@j& (0+255),b
  2277  002E18                     l4395:
  2278                           
  2279                           ; BSR set to: 0
  2280  002E18  0E05               	movlw	5
  2281  002E1A  0100               	movlb	0	; () banked
  2282  002E1C  6593               	cpfsgt	getRTC@j& (0+255),b
  2283  002E1E  D001               	goto	l4399
  2284  002E20  D010               	goto	l4405
  2285  002E22                     l4399:
  2286                           
  2287                           ; BSR set to: 0
  2288                           ;main.c: 362: time[j] = I2C_Master_Read(1);
  2289  002E22  0100               	movlb	0	; () banked
  2290  002E24  5193               	movf	getRTC@j& (0+255),w,b
  2291  002E26  0D01               	mullw	1
  2292  002E28  0EC3               	movlw	low _time
  2293  002E2A  24F3               	addwf	prodl,w,c
  2294  002E2C  6ED9               	movwf	fsr2l,c
  2295  002E2E  0E00               	movlw	high _time
  2296  002E30  20F4               	addwfc	prodh,w,c
  2297  002E32  6EDA               	movwf	fsr2h,c
  2298  002E34  0E01               	movlw	1
  2299  002E36  EC81  F019         	call	_I2C_Master_Read
  2300  002E3A  6EDF               	movwf	indf2,c
  2301  002E3C  0100               	movlb	0	; () banked
  2302  002E3E  2B93               	incf	getRTC@j& (0+255),f,b
  2303  002E40  D7EB               	goto	l4395
  2304  002E42                     l4405:
  2305                           
  2306                           ; BSR set to: 0
  2307                           ;main.c: 363: }
  2308                           ;main.c: 364: time[6] = I2C_Master_Read(0);
  2309  002E42  0E00               	movlw	0
  2310  002E44  EC81  F019         	call	_I2C_Master_Read
  2311  002E48  0100               	movlb	0	; () banked
  2312  002E4A  6FC9               	movwf	(_time+6)& (0+255),b
  2313                           
  2314                           ;main.c: 365: I2C_Master_Stop();
  2315  002E4C  EC54  F01A         	call	_I2C_Master_Stop	;wreg free
  2316  002E50  0012               	return		;funcret
  2317  002E52                     __end_of_getRTC:
  2318                           	opt stack 0
  2319                           tblptru	equ	0xFF8
  2320                           tblptrh	equ	0xFF7
  2321                           tblptrl	equ	0xFF6
  2322                           tablat	equ	0xFF5
  2323                           prodh	equ	0xFF4
  2324                           prodl	equ	0xFF3
  2325                           intcon	equ	0xFF2
  2326                           intcon2	equ	0xFF1
  2327                           intcon3	equ	0xFF0
  2328                           postinc0	equ	0xFEE
  2329                           wreg	equ	0xFE8
  2330                           postdec1	equ	0xFE5
  2331                           fsr1l	equ	0xFE1
  2332                           indf2	equ	0xFDF
  2333                           fsr2h	equ	0xFDA
  2334                           fsr2l	equ	0xFD9
  2335                           status	equ	0xFD8
  2336                           
  2337 ;; *************** function _I2C_Master_Write *****************
  2338 ;; Defined at:
  2339 ;;		line 47 in file "I2C.c"
  2340 ;; Parameters:    Size  Location     Type
  2341 ;;  d               2   17[BANK0 ] unsigned int 
  2342 ;; Auto vars:     Size  Location     Type
  2343 ;;		None
  2344 ;; Return value:  Size  Location     Type
  2345 ;;                  1    wreg      void 
  2346 ;; Registers used:
  2347 ;;		wreg, status,2, status,0, cstack
  2348 ;; Tracked objects:
  2349 ;;		On entry : 0/0
  2350 ;;		On exit  : 0/0
  2351 ;;		Unchanged: 0/0
  2352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2353 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2356 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2357 ;;Total ram usage:        2 bytes
  2358 ;; Hardware stack levels used:    1
  2359 ;; Hardware stack levels required when called:    8
  2360 ;; This function calls:
  2361 ;;		_I2C_Master_Wait
  2362 ;; This function is called by:
  2363 ;;		_getRTC
  2364 ;;		_I2C_ColorSens_Init
  2365 ;;		_set_time
  2366 ;;		_date_time
  2367 ;; This function uses a non-reentrant model
  2368 ;;
  2369                           
  2370                           	psect	text3
  2371  003494                     __ptext3:
  2372                           	opt stack 0
  2373  003494                     _I2C_Master_Write:
  2374                           	opt stack 20
  2375                           
  2376                           ;I2C.c: 49: I2C_Master_Wait();
  2377                           
  2378                           ;incstack = 0
  2379  003494  EC11  F01A         	call	_I2C_Master_Wait	;wreg free
  2380                           
  2381                           ;I2C.c: 50: SSPBUF = d;
  2382  003498  C091  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  2383  00349C  0012               	return		;funcret
  2384  00349E                     __end_of_I2C_Master_Write:
  2385                           	opt stack 0
  2386                           tblptru	equ	0xFF8
  2387                           tblptrh	equ	0xFF7
  2388                           tblptrl	equ	0xFF6
  2389                           tablat	equ	0xFF5
  2390                           prodh	equ	0xFF4
  2391                           prodl	equ	0xFF3
  2392                           intcon	equ	0xFF2
  2393                           intcon2	equ	0xFF1
  2394                           intcon3	equ	0xFF0
  2395                           postinc0	equ	0xFEE
  2396                           wreg	equ	0xFE8
  2397                           postdec1	equ	0xFE5
  2398                           fsr1l	equ	0xFE1
  2399                           indf2	equ	0xFDF
  2400                           fsr2h	equ	0xFDA
  2401                           fsr2l	equ	0xFD9
  2402                           status	equ	0xFD8
  2403                           
  2404 ;; *************** function _I2C_Master_Stop *****************
  2405 ;; Defined at:
  2406 ;;		line 41 in file "I2C.c"
  2407 ;; Parameters:    Size  Location     Type
  2408 ;;		None
  2409 ;; Auto vars:     Size  Location     Type
  2410 ;;		None
  2411 ;; Return value:  Size  Location     Type
  2412 ;;                  1    wreg      void 
  2413 ;; Registers used:
  2414 ;;		wreg, status,2, status,0, cstack
  2415 ;; Tracked objects:
  2416 ;;		On entry : 0/0
  2417 ;;		On exit  : 0/0
  2418 ;;		Unchanged: 0/0
  2419 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2420 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2421 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2422 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2423 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2424 ;;Total ram usage:        0 bytes
  2425 ;; Hardware stack levels used:    1
  2426 ;; Hardware stack levels required when called:    8
  2427 ;; This function calls:
  2428 ;;		_I2C_Master_Wait
  2429 ;; This function is called by:
  2430 ;;		_getRTC
  2431 ;;		_I2C_ColorSens_Init
  2432 ;;		_set_time
  2433 ;;		_date_time
  2434 ;; This function uses a non-reentrant model
  2435 ;;
  2436                           
  2437                           	psect	text4
  2438  0034A8                     __ptext4:
  2439                           	opt stack 0
  2440  0034A8                     _I2C_Master_Stop:
  2441                           	opt stack 20
  2442                           
  2443                           ;I2C.c: 43: I2C_Master_Wait();
  2444                           
  2445                           ;incstack = 0
  2446  0034A8  EC11  F01A         	call	_I2C_Master_Wait	;wreg free
  2447                           
  2448                           ;I2C.c: 44: PEN = 1;
  2449  0034AC  84C5               	bsf	4037,2,c	;volatile
  2450  0034AE  0012               	return		;funcret
  2451  0034B0                     __end_of_I2C_Master_Stop:
  2452                           	opt stack 0
  2453                           tblptru	equ	0xFF8
  2454                           tblptrh	equ	0xFF7
  2455                           tblptrl	equ	0xFF6
  2456                           tablat	equ	0xFF5
  2457                           prodh	equ	0xFF4
  2458                           prodl	equ	0xFF3
  2459                           intcon	equ	0xFF2
  2460                           intcon2	equ	0xFF1
  2461                           intcon3	equ	0xFF0
  2462                           postinc0	equ	0xFEE
  2463                           wreg	equ	0xFE8
  2464                           postdec1	equ	0xFE5
  2465                           fsr1l	equ	0xFE1
  2466                           indf2	equ	0xFDF
  2467                           fsr2h	equ	0xFDA
  2468                           fsr2l	equ	0xFD9
  2469                           status	equ	0xFD8
  2470                           
  2471 ;; *************** function _I2C_Master_Start *****************
  2472 ;; Defined at:
  2473 ;;		line 29 in file "I2C.c"
  2474 ;; Parameters:    Size  Location     Type
  2475 ;;		None
  2476 ;; Auto vars:     Size  Location     Type
  2477 ;;		None
  2478 ;; Return value:  Size  Location     Type
  2479 ;;                  1    wreg      void 
  2480 ;; Registers used:
  2481 ;;		wreg, status,2, status,0, cstack
  2482 ;; Tracked objects:
  2483 ;;		On entry : 0/0
  2484 ;;		On exit  : 0/0
  2485 ;;		Unchanged: 0/0
  2486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2487 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2488 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2490 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2491 ;;Total ram usage:        0 bytes
  2492 ;; Hardware stack levels used:    1
  2493 ;; Hardware stack levels required when called:    8
  2494 ;; This function calls:
  2495 ;;		_I2C_Master_Wait
  2496 ;; This function is called by:
  2497 ;;		_getRTC
  2498 ;;		_I2C_ColorSens_Init
  2499 ;;		_set_time
  2500 ;;		_date_time
  2501 ;; This function uses a non-reentrant model
  2502 ;;
  2503                           
  2504                           	psect	text5
  2505  0034B0                     __ptext5:
  2506                           	opt stack 0
  2507  0034B0                     _I2C_Master_Start:
  2508                           	opt stack 20
  2509                           
  2510                           ;I2C.c: 31: I2C_Master_Wait();
  2511                           
  2512                           ;incstack = 0
  2513  0034B0  EC11  F01A         	call	_I2C_Master_Wait	;wreg free
  2514                           
  2515                           ;I2C.c: 32: SEN = 1;
  2516  0034B4  80C5               	bsf	4037,0,c	;volatile
  2517  0034B6  0012               	return		;funcret
  2518  0034B8                     __end_of_I2C_Master_Start:
  2519                           	opt stack 0
  2520                           tblptru	equ	0xFF8
  2521                           tblptrh	equ	0xFF7
  2522                           tblptrl	equ	0xFF6
  2523                           tablat	equ	0xFF5
  2524                           prodh	equ	0xFF4
  2525                           prodl	equ	0xFF3
  2526                           intcon	equ	0xFF2
  2527                           intcon2	equ	0xFF1
  2528                           intcon3	equ	0xFF0
  2529                           postinc0	equ	0xFEE
  2530                           wreg	equ	0xFE8
  2531                           postdec1	equ	0xFE5
  2532                           fsr1l	equ	0xFE1
  2533                           indf2	equ	0xFDF
  2534                           fsr2h	equ	0xFDA
  2535                           fsr2l	equ	0xFD9
  2536                           status	equ	0xFD8
  2537                           
  2538 ;; *************** function _I2C_Master_Read *****************
  2539 ;; Defined at:
  2540 ;;		line 61 in file "I2C.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;  a               1    wreg     unsigned char 
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;  a               1   17[BANK0 ] unsigned char 
  2545 ;;  temp            1   18[BANK0 ] unsigned char 
  2546 ;; Return value:  Size  Location     Type
  2547 ;;                  1    wreg      unsigned char 
  2548 ;; Registers used:
  2549 ;;		wreg, status,2, status,0, cstack
  2550 ;; Tracked objects:
  2551 ;;		On entry : 0/0
  2552 ;;		On exit  : 0/0
  2553 ;;		Unchanged: 0/0
  2554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2556 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2558 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2559 ;;Total ram usage:        2 bytes
  2560 ;; Hardware stack levels used:    1
  2561 ;; Hardware stack levels required when called:    8
  2562 ;; This function calls:
  2563 ;;		_I2C_Master_Wait
  2564 ;; This function is called by:
  2565 ;;		_getRTC
  2566 ;;		_date_time
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569                           
  2570                           	psect	text6
  2571  003302                     __ptext6:
  2572                           	opt stack 0
  2573  003302                     _I2C_Master_Read:
  2574                           	opt stack 20
  2575                           
  2576                           ;incstack = 0
  2577                           ;I2C_Master_Read@a stored from wreg
  2578  003302  0100               	movlb	0	; () banked
  2579  003304  6F91               	movwf	I2C_Master_Read@a& (0+255),b
  2580                           
  2581                           ;I2C.c: 63: unsigned char temp;
  2582                           ;I2C.c: 64: I2C_Master_Wait();
  2583  003306  EC11  F01A         	call	_I2C_Master_Wait	;wreg free
  2584                           
  2585                           ;I2C.c: 65: RCEN = 1;
  2586  00330A  86C5               	bsf	4037,3,c	;volatile
  2587                           
  2588                           ;I2C.c: 66: I2C_Master_Wait();
  2589  00330C  EC11  F01A         	call	_I2C_Master_Wait	;wreg free
  2590                           
  2591                           ;I2C.c: 67: temp = SSPBUF;
  2592  003310  CFC9 F092          	movff	4041,I2C_Master_Read@temp	;volatile
  2593                           
  2594                           ;I2C.c: 68: I2C_Master_Wait();
  2595  003314  EC11  F01A         	call	_I2C_Master_Wait	;wreg free
  2596                           
  2597                           ;I2C.c: 69: ACKDT = (a)?0:1;
  2598  003318  0100               	movlb	0	; () banked
  2599  00331A  5191               	movf	I2C_Master_Read@a& (0+255),w,b
  2600  00331C  0100               	movlb	0	; () banked
  2601  00331E  A4D8               	btfss	status,2,c
  2602  003320  D002               	goto	u3510
  2603  003322  8AC5               	bsf	4037,5,c	;volatile
  2604  003324  D001               	goto	l3911
  2605  003326                     u3510:
  2606  003326  9AC5               	bcf	4037,5,c	;volatile
  2607  003328                     l3911:
  2608                           
  2609                           ;I2C.c: 70: ACKEN = 1;
  2610  003328  88C5               	bsf	4037,4,c	;volatile
  2611                           
  2612                           ;I2C.c: 71: return temp;
  2613  00332A  0100               	movlb	0	; () banked
  2614  00332C  5192               	movf	I2C_Master_Read@temp& (0+255),w,b
  2615  00332E  0012               	return	
  2616  003330                     __end_of_I2C_Master_Read:
  2617                           	opt stack 0
  2618                           tblptru	equ	0xFF8
  2619                           tblptrh	equ	0xFF7
  2620                           tblptrl	equ	0xFF6
  2621                           tablat	equ	0xFF5
  2622                           prodh	equ	0xFF4
  2623                           prodl	equ	0xFF3
  2624                           intcon	equ	0xFF2
  2625                           intcon2	equ	0xFF1
  2626                           intcon3	equ	0xFF0
  2627                           postinc0	equ	0xFEE
  2628                           wreg	equ	0xFE8
  2629                           postdec1	equ	0xFE5
  2630                           fsr1l	equ	0xFE1
  2631                           indf2	equ	0xFDF
  2632                           fsr2h	equ	0xFDA
  2633                           fsr2l	equ	0xFD9
  2634                           status	equ	0xFD8
  2635                           
  2636 ;; *************** function _I2C_Master_Wait *****************
  2637 ;; Defined at:
  2638 ;;		line 24 in file "I2C.c"
  2639 ;; Parameters:    Size  Location     Type
  2640 ;;		None
  2641 ;; Auto vars:     Size  Location     Type
  2642 ;;		None
  2643 ;; Return value:  Size  Location     Type
  2644 ;;                  1    wreg      void 
  2645 ;; Registers used:
  2646 ;;		wreg, status,2, status,0
  2647 ;; Tracked objects:
  2648 ;;		On entry : 0/0
  2649 ;;		On exit  : 0/0
  2650 ;;		Unchanged: 0/0
  2651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2652 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2653 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2654 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2655 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2656 ;;Total ram usage:        1 bytes
  2657 ;; Hardware stack levels used:    1
  2658 ;; Hardware stack levels required when called:    7
  2659 ;; This function calls:
  2660 ;;		Nothing
  2661 ;; This function is called by:
  2662 ;;		_I2C_Master_Start
  2663 ;;		_I2C_Master_Stop
  2664 ;;		_I2C_Master_Write
  2665 ;;		_I2C_Master_Read
  2666 ;;		_I2C_Master_RepeatedStart
  2667 ;; This function uses a non-reentrant model
  2668 ;;
  2669                           
  2670                           	psect	text7
  2671  003422                     __ptext7:
  2672                           	opt stack 0
  2673  003422                     _I2C_Master_Wait:
  2674                           	opt stack 20
  2675  003422                     l34:
  2676  003422  B4C7               	btfsc	4039,2,c	;volatile
  2677  003424  D7FE               	goto	l34
  2678  003426  CFC5 F090          	movff	4037,??_I2C_Master_Wait	;volatile
  2679  00342A  0E1F               	movlw	31
  2680  00342C  0100               	movlb	0	; () banked
  2681  00342E  1790               	andwf	??_I2C_Master_Wait& (0+255),f,b
  2682  003430  B4D8               	btfsc	status,2,c
  2683  003432  0012               	return	
  2684  003434  D7F6               	goto	l34
  2685  003436                     __end_of_I2C_Master_Wait:
  2686                           	opt stack 0
  2687                           tblptru	equ	0xFF8
  2688                           tblptrh	equ	0xFF7
  2689                           tblptrl	equ	0xFF6
  2690                           tablat	equ	0xFF5
  2691                           prodh	equ	0xFF4
  2692                           prodl	equ	0xFF3
  2693                           intcon	equ	0xFF2
  2694                           intcon2	equ	0xFF1
  2695                           intcon3	equ	0xFF0
  2696                           postinc0	equ	0xFEE
  2697                           wreg	equ	0xFE8
  2698                           postdec1	equ	0xFE5
  2699                           fsr1l	equ	0xFE1
  2700                           indf2	equ	0xFDF
  2701                           fsr2h	equ	0xFDA
  2702                           fsr2l	equ	0xFD9
  2703                           status	equ	0xFD8
  2704                           
  2705 ;; *************** function _operationend *****************
  2706 ;; Defined at:
  2707 ;;		line 599 in file "main.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;		None
  2710 ;; Auto vars:     Size  Location     Type
  2711 ;;		None
  2712 ;; Return value:  Size  Location     Type
  2713 ;;                  1    wreg      void 
  2714 ;; Registers used:
  2715 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2716 ;; Tracked objects:
  2717 ;;		On entry : 0/0
  2718 ;;		On exit  : 0/0
  2719 ;;		Unchanged: 0/0
  2720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2725 ;;Total ram usage:        0 bytes
  2726 ;; Hardware stack levels used:    1
  2727 ;; Hardware stack levels required when called:   10
  2728 ;; This function calls:
  2729 ;;		_lcdInst
  2730 ;;		_printf
  2731 ;; This function is called by:
  2732 ;;		_main
  2733 ;; This function uses a non-reentrant model
  2734 ;;
  2735                           
  2736                           	psect	text8
  2737  00340A                     __ptext8:
  2738                           	opt stack 0
  2739  00340A                     _operationend:
  2740                           	opt stack 20
  2741                           
  2742                           ;main.c: 600: lcdInst(0b10000000);
  2743                           
  2744                           ; BSR set to: 0
  2745                           ;incstack = 0
  2746  00340A  0E80               	movlw	128
  2747  00340C  EC36  F01A         	call	_lcdInst
  2748                           
  2749                           ;main.c: 601: printf("Operation Done!  ");
  2750  003410  0EE6               	movlw	low STR_42
  2751  003412  0100               	movlb	0	; () banked
  2752  003414  6F9C               	movwf	printf@f& (0+255),b
  2753  003416  0EFE               	movlw	high STR_42
  2754  003418  0100               	movlb	0	; () banked
  2755  00341A  6F9D               	movwf	(printf@f+1)& (0+255),b
  2756  00341C  EC09  F000         	call	_printf	;wreg free
  2757  003420  0012               	return	
  2758  003422                     __end_of_operationend:
  2759                           	opt stack 0
  2760                           tblptru	equ	0xFF8
  2761                           tblptrh	equ	0xFF7
  2762                           tblptrl	equ	0xFF6
  2763                           tablat	equ	0xFF5
  2764                           prodh	equ	0xFF4
  2765                           prodl	equ	0xFF3
  2766                           intcon	equ	0xFF2
  2767                           intcon2	equ	0xFF1
  2768                           intcon3	equ	0xFF0
  2769                           postinc0	equ	0xFEE
  2770                           wreg	equ	0xFE8
  2771                           postdec1	equ	0xFE5
  2772                           fsr1l	equ	0xFE1
  2773                           indf2	equ	0xFDF
  2774                           fsr2h	equ	0xFDA
  2775                           fsr2l	equ	0xFD9
  2776                           status	equ	0xFD8
  2777                           
  2778 ;; *************** function _operation *****************
  2779 ;; Defined at:
  2780 ;;		line 564 in file "main.c"
  2781 ;; Parameters:    Size  Location     Type
  2782 ;;		None
  2783 ;; Auto vars:     Size  Location     Type
  2784 ;;		None
  2785 ;; Return value:  Size  Location     Type
  2786 ;;                  1    wreg      void 
  2787 ;; Registers used:
  2788 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2789 ;; Tracked objects:
  2790 ;;		On entry : 0/0
  2791 ;;		On exit  : 0/0
  2792 ;;		Unchanged: 0/0
  2793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2795 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2796 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2797 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2798 ;;Total ram usage:        2 bytes
  2799 ;; Hardware stack levels used:    1
  2800 ;; Hardware stack levels required when called:   10
  2801 ;; This function calls:
  2802 ;;		_lcdInst
  2803 ;;		_printf
  2804 ;;		_read_sensor
  2805 ;; This function is called by:
  2806 ;;		_main
  2807 ;; This function uses a non-reentrant model
  2808 ;;
  2809                           
  2810                           	psect	text9
  2811  002302                     __ptext9:
  2812                           	opt stack 0
  2813  002302                     _operation:
  2814                           	opt stack 20
  2815                           
  2816                           ;main.c: 565: switch(operation_disp){
  2817                           
  2818                           ;incstack = 0
  2819  002302  D04A               	goto	l4711
  2820  002304                     l4679:
  2821                           
  2822                           ;main.c: 567: lcdInst(0b10000000);
  2823  002304  0E80               	movlw	128
  2824  002306  EC36  F01A         	call	_lcdInst
  2825                           
  2826                           ;main.c: 568: printf("Running.              ");
  2827  00230A  0E27               	movlw	low STR_36
  2828  00230C  0100               	movlb	0	; () banked
  2829  00230E  6F9C               	movwf	printf@f& (0+255),b
  2830  002310  0EFE               	movlw	high STR_36
  2831  002312  0100               	movlb	0	; () banked
  2832  002314  6F9D               	movwf	(printf@f+1)& (0+255),b
  2833  002316  EC09  F000         	call	_printf	;wreg free
  2834                           
  2835                           ;main.c: 569: operation_disp = 1;
  2836  00231A  0E00               	movlw	0
  2837  00231C  0100               	movlb	0	; () banked
  2838  00231E  6FE3               	movwf	(_operation_disp+1)& (0+255),b
  2839  002320  0E01               	movlw	1
  2840  002322  D01C               	goto	L2
  2841  002324                     l4685:
  2842                           
  2843                           ; BSR set to: 0
  2844                           ;main.c: 572: lcdInst(0b10000000);
  2845  002324  0E80               	movlw	128
  2846  002326  EC36  F01A         	call	_lcdInst
  2847                           
  2848                           ;main.c: 573: printf("Running..              ");
  2849  00232A  0E0F               	movlw	low STR_37
  2850  00232C  0100               	movlb	0	; () banked
  2851  00232E  6F9C               	movwf	printf@f& (0+255),b
  2852  002330  0EFE               	movlw	high STR_37
  2853  002332  0100               	movlb	0	; () banked
  2854  002334  6F9D               	movwf	(printf@f+1)& (0+255),b
  2855  002336  EC09  F000         	call	_printf	;wreg free
  2856                           
  2857                           ;main.c: 574: operation_disp = 2;
  2858  00233A  0E00               	movlw	0
  2859  00233C  0100               	movlb	0	; () banked
  2860  00233E  6FE3               	movwf	(_operation_disp+1)& (0+255),b
  2861  002340  0E02               	movlw	2
  2862  002342  D00C               	goto	L2
  2863  002344                     l4691:
  2864                           
  2865                           ; BSR set to: 0
  2866                           ;main.c: 577: lcdInst(0b10000000);
  2867  002344  0E80               	movlw	128
  2868  002346  EC36  F01A         	call	_lcdInst
  2869                           
  2870                           ;main.c: 578: printf("Running...              ");
  2871  00234A  0EF6               	movlw	low STR_38
  2872  00234C  0100               	movlb	0	; () banked
  2873  00234E  6F9C               	movwf	printf@f& (0+255),b
  2874  002350  0EFD               	movlw	high STR_38
  2875  002352  0100               	movlb	0	; () banked
  2876  002354  6F9D               	movwf	(printf@f+1)& (0+255),b
  2877  002356  EC09  F000         	call	_printf	;wreg free
  2878  00235A  D019               	goto	l4707
  2879  00235C                     L2:
  2880  00235C  6FE2               	movwf	_operation_disp& (0+255),b
  2881                           
  2882                           ;main.c: 580: break;
  2883  00235E  D036               	goto	l4713
  2884  002360                     l4697:
  2885                           
  2886                           ; BSR set to: 0
  2887                           ;main.c: 582: lcdInst(0b10000000);
  2888  002360  0E80               	movlw	128
  2889  002362  EC36  F01A         	call	_lcdInst
  2890                           
  2891                           ;main.c: 583: printf("Running...              ");
  2892  002366  0EF6               	movlw	low STR_38
  2893  002368  0100               	movlb	0	; () banked
  2894  00236A  6F9C               	movwf	printf@f& (0+255),b
  2895  00236C  0EFD               	movlw	high STR_38
  2896  00236E  0100               	movlb	0	; () banked
  2897  002370  6F9D               	movwf	(printf@f+1)& (0+255),b
  2898  002372  EC09  F000         	call	_printf	;wreg free
  2899  002376  D00B               	goto	l4707
  2900  002378                     l4703:
  2901                           
  2902                           ; BSR set to: 0
  2903                           ;main.c: 587: lcdInst(0b10000000);
  2904  002378  0E80               	movlw	128
  2905  00237A  EC36  F01A         	call	_lcdInst
  2906                           
  2907                           ;main.c: 588: printf("Running...              ");
  2908  00237E  0EF6               	movlw	low STR_38
  2909  002380  0100               	movlb	0	; () banked
  2910  002382  6F9C               	movwf	printf@f& (0+255),b
  2911  002384  0EFD               	movlw	high STR_38
  2912  002386  0100               	movlb	0	; () banked
  2913  002388  6F9D               	movwf	(printf@f+1)& (0+255),b
  2914  00238A  EC09  F000         	call	_printf	;wreg free
  2915  00238E                     l4707:
  2916                           
  2917                           ;main.c: 589: operation_disp = 0;
  2918  00238E  0E00               	movlw	0
  2919  002390  0100               	movlb	0	; () banked
  2920  002392  6FE3               	movwf	(_operation_disp+1)& (0+255),b
  2921  002394  0E00               	movlw	0
  2922  002396  D7E2               	goto	L2
  2923  002398                     l4711:
  2924  002398  C0E2  F0C1         	movff	_operation_disp,??_operation
  2925  00239C  C0E3  F0C2         	movff	_operation_disp+1,??_operation+1
  2926                           
  2927                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2928                           ; Switch size 1, requested type "space"
  2929                           ; Number of cases is 1, Range of values is 0 to 0
  2930                           ; switch strategies available:
  2931                           ; Name         Instructions Cycles
  2932                           ; simple_byte            4     3 (average)
  2933                           ;	Chosen strategy is simple_byte
  2934  0023A0  0100               	movlb	0	; () banked
  2935  0023A2  51C2               	movf	(??_operation+1)& (0+255),w,b
  2936  0023A4  0A00               	xorlw	0	; case 0
  2937  0023A6  A4D8               	btfss	status,2,c
  2938  0023A8  D011               	goto	l4713
  2939                           
  2940                           ; BSR set to: 0
  2941                           ; Switch size 1, requested type "space"
  2942                           ; Number of cases is 5, Range of values is 0 to 4
  2943                           ; switch strategies available:
  2944                           ; Name         Instructions Cycles
  2945                           ; simple_byte           16     9 (average)
  2946                           ;	Chosen strategy is simple_byte
  2947  0023AA  0100               	movlb	0	; () banked
  2948  0023AC  51C1               	movf	??_operation& (0+255),w,b
  2949  0023AE  0A00               	xorlw	0	; case 0
  2950  0023B0  B4D8               	btfsc	status,2,c
  2951  0023B2  D7A8               	goto	l4679
  2952  0023B4  0A01               	xorlw	1	; case 1
  2953  0023B6  B4D8               	btfsc	status,2,c
  2954  0023B8  D7B5               	goto	l4685
  2955  0023BA  0A03               	xorlw	3	; case 2
  2956  0023BC  B4D8               	btfsc	status,2,c
  2957  0023BE  D7C2               	goto	l4691
  2958  0023C0  0A01               	xorlw	1	; case 3
  2959  0023C2  B4D8               	btfsc	status,2,c
  2960  0023C4  D7CD               	goto	l4697
  2961  0023C6  0A07               	xorlw	7	; case 4
  2962  0023C8  B4D8               	btfsc	status,2,c
  2963  0023CA  D7D6               	goto	l4703
  2964  0023CC                     l4713:
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;main.c: 593: lcdInst(0b11000000);
  2968  0023CC  0EC0               	movlw	192
  2969  0023CE  EC36  F01A         	call	_lcdInst
  2970                           
  2971                           ;main.c: 594: read_sensor();
  2972  0023D2  EC66  F01A         	call	_read_sensor	;wreg free
  2973                           
  2974                           ;main.c: 595: printf("PRESS 4 TO STOP  ");
  2975  0023D6  0EF8               	movlw	low STR_41
  2976  0023D8  0100               	movlb	0	; () banked
  2977  0023DA  6F9C               	movwf	printf@f& (0+255),b
  2978  0023DC  0EFE               	movlw	high STR_41
  2979  0023DE  0100               	movlb	0	; () banked
  2980  0023E0  6F9D               	movwf	(printf@f+1)& (0+255),b
  2981  0023E2  EC09  F000         	call	_printf	;wreg free
  2982  0023E6  0012               	return	
  2983  0023E8                     __end_of_operation:
  2984                           	opt stack 0
  2985                           tblptru	equ	0xFF8
  2986                           tblptrh	equ	0xFF7
  2987                           tblptrl	equ	0xFF6
  2988                           tablat	equ	0xFF5
  2989                           prodh	equ	0xFF4
  2990                           prodl	equ	0xFF3
  2991                           intcon	equ	0xFF2
  2992                           intcon2	equ	0xFF1
  2993                           intcon3	equ	0xFF0
  2994                           postinc0	equ	0xFEE
  2995                           wreg	equ	0xFE8
  2996                           postdec1	equ	0xFE5
  2997                           fsr1l	equ	0xFE1
  2998                           indf2	equ	0xFDF
  2999                           fsr2h	equ	0xFDA
  3000                           fsr2l	equ	0xFD9
  3001                           status	equ	0xFD8
  3002                           
  3003 ;; *************** function _read_sensor *****************
  3004 ;; Defined at:
  3005 ;;		line 655 in file "main.c"
  3006 ;; Parameters:    Size  Location     Type
  3007 ;;		None
  3008 ;; Auto vars:     Size  Location     Type
  3009 ;;		None
  3010 ;; Return value:  Size  Location     Type
  3011 ;;                  1    wreg      void 
  3012 ;; Registers used:
  3013 ;;		None
  3014 ;; Tracked objects:
  3015 ;;		On entry : 0/0
  3016 ;;		On exit  : 0/0
  3017 ;;		Unchanged: 0/0
  3018 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3019 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3020 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3021 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3022 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3023 ;;Total ram usage:        0 bytes
  3024 ;; Hardware stack levels used:    1
  3025 ;; Hardware stack levels required when called:    7
  3026 ;; This function calls:
  3027 ;;		Nothing
  3028 ;; This function is called by:
  3029 ;;		_operation
  3030 ;; This function uses a non-reentrant model
  3031 ;;
  3032                           
  3033                           	psect	text10
  3034  0034CC                     __ptext10:
  3035                           	opt stack 0
  3036  0034CC                     _read_sensor:
  3037                           	opt stack 22
  3038                           
  3039                           ;main.c: 656: return;
  3040                           
  3041                           ;incstack = 0
  3042  0034CC  0012               	return		;funcret
  3043  0034CE                     __end_of_read_sensor:
  3044                           	opt stack 0
  3045                           tblptru	equ	0xFF8
  3046                           tblptrh	equ	0xFF7
  3047                           tblptrl	equ	0xFF6
  3048                           tablat	equ	0xFF5
  3049                           prodh	equ	0xFF4
  3050                           prodl	equ	0xFF3
  3051                           intcon	equ	0xFF2
  3052                           intcon2	equ	0xFF1
  3053                           intcon3	equ	0xFF0
  3054                           postinc0	equ	0xFEE
  3055                           wreg	equ	0xFE8
  3056                           postdec1	equ	0xFE5
  3057                           fsr1l	equ	0xFE1
  3058                           indf2	equ	0xFDF
  3059                           fsr2h	equ	0xFDA
  3060                           fsr2l	equ	0xFD9
  3061                           status	equ	0xFD8
  3062                           
  3063 ;; *************** function _initLCD *****************
  3064 ;; Defined at:
  3065 ;;		line 14 in file "lcd.c"
  3066 ;; Parameters:    Size  Location     Type
  3067 ;;		None
  3068 ;; Auto vars:     Size  Location     Type
  3069 ;;		None
  3070 ;; Return value:  Size  Location     Type
  3071 ;;                  1    wreg      void 
  3072 ;; Registers used:
  3073 ;;		wreg, status,2, status,0, cstack
  3074 ;; Tracked objects:
  3075 ;;		On entry : 0/0
  3076 ;;		On exit  : 0/0
  3077 ;;		Unchanged: 0/0
  3078 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3081 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3082 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3083 ;;Total ram usage:        1 bytes
  3084 ;; Hardware stack levels used:    1
  3085 ;; Hardware stack levels required when called:    9
  3086 ;; This function calls:
  3087 ;;		_lcdInst
  3088 ;; This function is called by:
  3089 ;;		_main
  3090 ;; This function uses a non-reentrant model
  3091 ;;
  3092                           
  3093                           	psect	text11
  3094  00313E                     __ptext11:
  3095                           	opt stack 0
  3096  00313E                     _initLCD:
  3097                           	opt stack 21
  3098                           
  3099                           ;lcd.c: 15: _delay((unsigned long)((15)*(10000000/4000.0)));
  3100                           
  3101                           ;incstack = 0
  3102  00313E  0E31               	movlw	49
  3103  003140  0100               	movlb	0	; () banked
  3104  003142  6F93               	movwf	??_initLCD& (0+255),b
  3105  003144  0EB2               	movlw	178
  3106  003146                     u5617:
  3107  003146  2EE8               	decfsz	wreg,f,c
  3108  003148  D7FE               	bra	u5617
  3109  00314A  2F93               	decfsz	??_initLCD& (0+255),f,b
  3110  00314C  D7FC               	bra	u5617
  3111  00314E  F000               	nop	
  3112                           
  3113                           ;lcd.c: 16: lcdInst(0b00110011);
  3114  003150  0E33               	movlw	51
  3115  003152  EC36  F01A         	call	_lcdInst
  3116                           
  3117                           ;lcd.c: 17: lcdInst(0b00110011);
  3118  003156  0E33               	movlw	51
  3119  003158  EC36  F01A         	call	_lcdInst
  3120                           
  3121                           ;lcd.c: 18: lcdInst(0b00110010);
  3122  00315C  0E32               	movlw	50
  3123  00315E  EC36  F01A         	call	_lcdInst
  3124                           
  3125                           ;lcd.c: 19: lcdInst(0b00101000);
  3126  003162  0E28               	movlw	40
  3127  003164  EC36  F01A         	call	_lcdInst
  3128                           
  3129                           ;lcd.c: 20: lcdInst(0b00001111);
  3130  003168  0E0F               	movlw	15
  3131  00316A  EC36  F01A         	call	_lcdInst
  3132                           
  3133                           ;lcd.c: 21: lcdInst(0b00000110);
  3134  00316E  0E06               	movlw	6
  3135  003170  EC36  F01A         	call	_lcdInst
  3136                           
  3137                           ;lcd.c: 22: lcdInst(0b00000001);
  3138  003174  0E01               	movlw	1
  3139  003176  EC36  F01A         	call	_lcdInst
  3140                           
  3141                           ;lcd.c: 23: _delay((unsigned long)((15)*(10000000/4000.0)));
  3142  00317A  0E31               	movlw	49
  3143  00317C  0100               	movlb	0	; () banked
  3144  00317E  6F93               	movwf	??_initLCD& (0+255),b
  3145  003180  0EB2               	movlw	178
  3146  003182                     u5627:
  3147  003182  2EE8               	decfsz	wreg,f,c
  3148  003184  D7FE               	bra	u5627
  3149  003186  2F93               	decfsz	??_initLCD& (0+255),f,b
  3150  003188  D7FC               	bra	u5627
  3151  00318A  F000               	nop	
  3152  00318C  0012               	return		;funcret
  3153  00318E                     __end_of_initLCD:
  3154                           	opt stack 0
  3155                           tblptru	equ	0xFF8
  3156                           tblptrh	equ	0xFF7
  3157                           tblptrl	equ	0xFF6
  3158                           tablat	equ	0xFF5
  3159                           prodh	equ	0xFF4
  3160                           prodl	equ	0xFF3
  3161                           intcon	equ	0xFF2
  3162                           intcon2	equ	0xFF1
  3163                           intcon3	equ	0xFF0
  3164                           postinc0	equ	0xFEE
  3165                           wreg	equ	0xFE8
  3166                           postdec1	equ	0xFE5
  3167                           fsr1l	equ	0xFE1
  3168                           indf2	equ	0xFDF
  3169                           fsr2h	equ	0xFDA
  3170                           fsr2l	equ	0xFD9
  3171                           status	equ	0xFD8
  3172                           
  3173 ;; *************** function _emergencystop *****************
  3174 ;; Defined at:
  3175 ;;		line 605 in file "main.c"
  3176 ;; Parameters:    Size  Location     Type
  3177 ;;		None
  3178 ;; Auto vars:     Size  Location     Type
  3179 ;;		None
  3180 ;; Return value:  Size  Location     Type
  3181 ;;                  1    wreg      void 
  3182 ;; Registers used:
  3183 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3184 ;; Tracked objects:
  3185 ;;		On entry : 0/0
  3186 ;;		On exit  : 0/0
  3187 ;;		Unchanged: 0/0
  3188 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3189 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3190 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3191 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3192 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3193 ;;Total ram usage:        0 bytes
  3194 ;; Hardware stack levels used:    1
  3195 ;; Hardware stack levels required when called:   10
  3196 ;; This function calls:
  3197 ;;		_lcdInst
  3198 ;;		_printf
  3199 ;; This function is called by:
  3200 ;;		_main
  3201 ;; This function uses a non-reentrant model
  3202 ;;
  3203                           
  3204                           	psect	text12
  3205  0033CA                     __ptext12:
  3206                           	opt stack 0
  3207  0033CA                     _emergencystop:
  3208                           	opt stack 20
  3209                           
  3210                           ;main.c: 606: (INTCONbits.GIE = 0);
  3211                           
  3212                           ;incstack = 0
  3213  0033CA  9EF2               	bcf	intcon,7,c	;volatile
  3214                           
  3215                           ;main.c: 607: PORTAbits.RA2 = 0;
  3216  0033CC  9480               	bcf	3968,2,c	;volatile
  3217                           
  3218                           ;main.c: 608: lcdInst(0b00000001);
  3219  0033CE  0E01               	movlw	1
  3220  0033D0  EC36  F01A         	call	_lcdInst
  3221                           
  3222                           ;main.c: 609: lcdInst(0b10000000);
  3223  0033D4  0E80               	movlw	128
  3224  0033D6  EC36  F01A         	call	_lcdInst
  3225                           
  3226                           ;main.c: 610: printf("EMERGENCY,STOPPED");
  3227  0033DA  0E64               	movlw	low STR_43
  3228  0033DC  0100               	movlb	0	; () banked
  3229  0033DE  6F9C               	movwf	printf@f& (0+255),b
  3230  0033E0  0EFF               	movlw	high STR_43
  3231  0033E2  0100               	movlb	0	; () banked
  3232  0033E4  6F9D               	movwf	(printf@f+1)& (0+255),b
  3233  0033E6  EC09  F000         	call	_printf	;wreg free
  3234  0033EA                     l403:
  3235  0033EA  D7FF               	goto	l403
  3236  0033EC                     __end_of_emergencystop:
  3237                           	opt stack 0
  3238                           tblptru	equ	0xFF8
  3239                           tblptrh	equ	0xFF7
  3240                           tblptrl	equ	0xFF6
  3241                           tablat	equ	0xFF5
  3242                           prodh	equ	0xFF4
  3243                           prodl	equ	0xFF3
  3244                           intcon	equ	0xFF2
  3245                           intcon2	equ	0xFF1
  3246                           intcon3	equ	0xFF0
  3247                           postinc0	equ	0xFEE
  3248                           wreg	equ	0xFE8
  3249                           postdec1	equ	0xFE5
  3250                           fsr1l	equ	0xFE1
  3251                           indf2	equ	0xFDF
  3252                           fsr2h	equ	0xFDA
  3253                           fsr2l	equ	0xFD9
  3254                           status	equ	0xFD8
  3255                           
  3256 ;; *************** function _display_log *****************
  3257 ;; Defined at:
  3258 ;;		line 489 in file "main.c"
  3259 ;; Parameters:    Size  Location     Type
  3260 ;;		None
  3261 ;; Auto vars:     Size  Location     Type
  3262 ;;		None
  3263 ;; Return value:  Size  Location     Type
  3264 ;;                  1    wreg      void 
  3265 ;; Registers used:
  3266 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3267 ;; Tracked objects:
  3268 ;;		On entry : 0/0
  3269 ;;		On exit  : 0/0
  3270 ;;		Unchanged: 0/0
  3271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3272 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3275 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3276 ;;Total ram usage:        0 bytes
  3277 ;; Hardware stack levels used:    1
  3278 ;; Hardware stack levels required when called:   10
  3279 ;; This function calls:
  3280 ;;		___awmod
  3281 ;;		_keycheck
  3282 ;;		_lcdInst
  3283 ;;		_printf
  3284 ;; This function is called by:
  3285 ;;		_main
  3286 ;; This function uses a non-reentrant model
  3287 ;;
  3288                           
  3289                           	psect	text13
  3290  0015DA                     __ptext13:
  3291                           	opt stack 0
  3292  0015DA                     _display_log:
  3293                           	opt stack 20
  3294                           
  3295                           ;main.c: 490: switch(log_position % 3){
  3296                           
  3297                           ;incstack = 0
  3298  0015DA  D0F1               	goto	l4839
  3299  0015DC                     l4773:
  3300                           
  3301                           ;main.c: 492: lcdInst(0b10000000);
  3302  0015DC  0E80               	movlw	128
  3303  0015DE  EC36  F01A         	call	_lcdInst
  3304                           
  3305                           ;main.c: 493: printf("Run#1    A:Next  ");
  3306  0015E2  0E1C               	movlw	low STR_15
  3307  0015E4  0100               	movlb	0	; () banked
  3308  0015E6  6F9C               	movwf	printf@f& (0+255),b
  3309  0015E8  0EFF               	movlw	high STR_15
  3310  0015EA  0100               	movlb	0	; () banked
  3311  0015EC  6F9D               	movwf	(printf@f+1)& (0+255),b
  3312  0015EE  EC09  F000         	call	_printf	;wreg free
  3313                           
  3314                           ;main.c: 494: lcdInst(0b11000000);
  3315  0015F2  0EC0               	movlw	192
  3316  0015F4  EC36  F01A         	call	_lcdInst
  3317                           
  3318                           ;main.c: 495: printf("# of cans: 10    ");
  3319  0015F8  0E8C               	movlw	low STR_16
  3320  0015FA  0100               	movlb	0	; () banked
  3321  0015FC  6F9C               	movwf	printf@f& (0+255),b
  3322  0015FE  0EFE               	movlw	high STR_16
  3323  001600  0100               	movlb	0	; () banked
  3324  001602  6F9D               	movwf	(printf@f+1)& (0+255),b
  3325  001604  EC09  F000         	call	_printf	;wreg free
  3326                           
  3327                           ;main.c: 496: keycheck();
  3328  001608  EC1B  F01A         	call	_keycheck	;wreg free
  3329                           
  3330                           ;main.c: 497: lcdInst(0b10000000);
  3331  00160C  0E80               	movlw	128
  3332  00160E  EC36  F01A         	call	_lcdInst
  3333                           
  3334                           ;main.c: 498: printf("Run#1    A:Next  ");
  3335  001612  0E1C               	movlw	low STR_15
  3336  001614  0100               	movlb	0	; () banked
  3337  001616  6F9C               	movwf	printf@f& (0+255),b
  3338  001618  0EFF               	movlw	high STR_15
  3339  00161A  0100               	movlb	0	; () banked
  3340  00161C  6F9D               	movwf	(printf@f+1)& (0+255),b
  3341  00161E  EC09  F000         	call	_printf	;wreg free
  3342                           
  3343                           ;main.c: 499: lcdInst(0b11000000);
  3344  001622  0EC0               	movlw	192
  3345  001624  EC36  F01A         	call	_lcdInst
  3346                           
  3347                           ;main.c: 500: printf("# soda cans: 6   ");
  3348  001628  0EB0               	movlw	low STR_18
  3349  00162A  0100               	movlb	0	; () banked
  3350  00162C  6F9C               	movwf	printf@f& (0+255),b
  3351  00162E  0EFE               	movlw	high STR_18
  3352  001630  0100               	movlb	0	; () banked
  3353  001632  6F9D               	movwf	(printf@f+1)& (0+255),b
  3354  001634  EC09  F000         	call	_printf	;wreg free
  3355                           
  3356                           ;main.c: 501: keycheck();
  3357  001638  EC1B  F01A         	call	_keycheck	;wreg free
  3358                           
  3359                           ;main.c: 502: lcdInst(0b10000000);
  3360  00163C  0E80               	movlw	128
  3361  00163E  EC36  F01A         	call	_lcdInst
  3362                           
  3363                           ;main.c: 503: printf("Run#1    A:Next  ");
  3364  001642  0E1C               	movlw	low STR_15
  3365  001644  0100               	movlb	0	; () banked
  3366  001646  6F9C               	movwf	printf@f& (0+255),b
  3367  001648  0EFF               	movlw	high STR_15
  3368  00164A  0100               	movlb	0	; () banked
  3369  00164C  6F9D               	movwf	(printf@f+1)& (0+255),b
  3370  00164E  EC09  F000         	call	_printf	;wreg free
  3371                           
  3372                           ;main.c: 504: lcdInst(0b11000000);
  3373  001652  0EC0               	movlw	192
  3374  001654  EC36  F01A         	call	_lcdInst
  3375                           
  3376                           ;main.c: 505: printf("# soup cans: 4   ");
  3377  001658  0E9E               	movlw	low STR_20
  3378  00165A  0100               	movlb	0	; () banked
  3379  00165C  6F9C               	movwf	printf@f& (0+255),b
  3380  00165E  0EFE               	movlw	high STR_20
  3381  001660  0100               	movlb	0	; () banked
  3382  001662  6F9D               	movwf	(printf@f+1)& (0+255),b
  3383  001664  EC09  F000         	call	_printf	;wreg free
  3384                           
  3385                           ;main.c: 506: keycheck();
  3386  001668  EC1B  F01A         	call	_keycheck	;wreg free
  3387                           
  3388                           ;main.c: 507: break;
  3389  00166C  0012               	return	
  3390  00166E                     l4793:
  3391                           
  3392                           ;main.c: 511: lcdInst(0b10000000);
  3393  00166E  0E80               	movlw	128
  3394  001670  EC36  F01A         	call	_lcdInst
  3395                           
  3396                           ;main.c: 512: lcdInst(0b00000001);
  3397  001674  0E01               	movlw	1
  3398  001676  EC36  F01A         	call	_lcdInst
  3399                           
  3400                           ;main.c: 513: printf("Run#2    A:Next  ");
  3401  00167A  0E2E               	movlw	low STR_21
  3402  00167C  0100               	movlb	0	; () banked
  3403  00167E  6F9C               	movwf	printf@f& (0+255),b
  3404  001680  0EFF               	movlw	high STR_21
  3405  001682  0100               	movlb	0	; () banked
  3406  001684  6F9D               	movwf	(printf@f+1)& (0+255),b
  3407  001686  EC09  F000         	call	_printf	;wreg free
  3408                           
  3409                           ;main.c: 514: lcdInst(0b11000000);
  3410  00168A  0EC0               	movlw	192
  3411  00168C  EC36  F01A         	call	_lcdInst
  3412                           
  3413                           ;main.c: 515: printf("# of cans: 10    ");
  3414  001690  0E8C               	movlw	low STR_16
  3415  001692  0100               	movlb	0	; () banked
  3416  001694  6F9C               	movwf	printf@f& (0+255),b
  3417  001696  0EFE               	movlw	high STR_16
  3418  001698  0100               	movlb	0	; () banked
  3419  00169A  6F9D               	movwf	(printf@f+1)& (0+255),b
  3420  00169C  EC09  F000         	call	_printf	;wreg free
  3421                           
  3422                           ;main.c: 516: keycheck();
  3423  0016A0  EC1B  F01A         	call	_keycheck	;wreg free
  3424                           
  3425                           ;main.c: 517: lcdInst(0b00000001);
  3426  0016A4  0E01               	movlw	1
  3427  0016A6  EC36  F01A         	call	_lcdInst
  3428                           
  3429                           ;main.c: 518: printf("Run#2    A:Next  ");
  3430  0016AA  0E2E               	movlw	low STR_21
  3431  0016AC  0100               	movlb	0	; () banked
  3432  0016AE  6F9C               	movwf	printf@f& (0+255),b
  3433  0016B0  0EFF               	movlw	high STR_21
  3434  0016B2  0100               	movlb	0	; () banked
  3435  0016B4  6F9D               	movwf	(printf@f+1)& (0+255),b
  3436  0016B6  EC09  F000         	call	_printf	;wreg free
  3437                           
  3438                           ;main.c: 519: lcdInst(0b11000000);
  3439  0016BA  0EC0               	movlw	192
  3440  0016BC  EC36  F01A         	call	_lcdInst
  3441                           
  3442                           ;main.c: 520: printf("# soda cans: 6   ");
  3443  0016C0  0EB0               	movlw	low STR_18
  3444  0016C2  0100               	movlb	0	; () banked
  3445  0016C4  6F9C               	movwf	printf@f& (0+255),b
  3446  0016C6  0EFE               	movlw	high STR_18
  3447  0016C8  0100               	movlb	0	; () banked
  3448  0016CA  6F9D               	movwf	(printf@f+1)& (0+255),b
  3449  0016CC  EC09  F000         	call	_printf	;wreg free
  3450                           
  3451                           ;main.c: 521: keycheck();
  3452  0016D0  EC1B  F01A         	call	_keycheck	;wreg free
  3453                           
  3454                           ;main.c: 522: lcdInst(0b00000001);
  3455  0016D4  0E01               	movlw	1
  3456  0016D6  EC36  F01A         	call	_lcdInst
  3457                           
  3458                           ;main.c: 523: printf("Run#2    A:Next  ");
  3459  0016DA  0E2E               	movlw	low STR_21
  3460  0016DC  0100               	movlb	0	; () banked
  3461  0016DE  6F9C               	movwf	printf@f& (0+255),b
  3462  0016E0  0EFF               	movlw	high STR_21
  3463  0016E2  0100               	movlb	0	; () banked
  3464  0016E4  6F9D               	movwf	(printf@f+1)& (0+255),b
  3465  0016E6  EC09  F000         	call	_printf	;wreg free
  3466                           
  3467                           ;main.c: 524: lcdInst(0b11000000);
  3468  0016EA  0EC0               	movlw	192
  3469  0016EC  EC36  F01A         	call	_lcdInst
  3470                           
  3471                           ;main.c: 525: printf("# soup cans: 4   ");
  3472  0016F0  0E9E               	movlw	low STR_20
  3473  0016F2  0100               	movlb	0	; () banked
  3474  0016F4  6F9C               	movwf	printf@f& (0+255),b
  3475  0016F6  0EFE               	movlw	high STR_20
  3476  0016F8  0100               	movlb	0	; () banked
  3477  0016FA  6F9D               	movwf	(printf@f+1)& (0+255),b
  3478  0016FC  EC09  F000         	call	_printf	;wreg free
  3479                           
  3480                           ;main.c: 526: keycheck();
  3481  001700  EC1B  F01A         	call	_keycheck	;wreg free
  3482                           
  3483                           ;main.c: 527: break;
  3484  001704  0012               	return	
  3485  001706                     l4813:
  3486                           
  3487                           ;main.c: 529: lcdInst(0b10000000);
  3488  001706  0E80               	movlw	128
  3489  001708  EC36  F01A         	call	_lcdInst
  3490                           
  3491                           ;main.c: 530: lcdInst(0b00000001);
  3492  00170C  0E01               	movlw	1
  3493  00170E  EC36  F01A         	call	_lcdInst
  3494                           
  3495                           ;main.c: 531: printf("Run#3    A:Next  ");
  3496  001712  0E40               	movlw	low STR_27
  3497  001714  0100               	movlb	0	; () banked
  3498  001716  6F9C               	movwf	printf@f& (0+255),b
  3499  001718  0EFF               	movlw	high STR_27
  3500  00171A  0100               	movlb	0	; () banked
  3501  00171C  6F9D               	movwf	(printf@f+1)& (0+255),b
  3502  00171E  EC09  F000         	call	_printf	;wreg free
  3503                           
  3504                           ;main.c: 532: lcdInst(0b11000000);
  3505  001722  0EC0               	movlw	192
  3506  001724  EC36  F01A         	call	_lcdInst
  3507                           
  3508                           ;main.c: 533: printf("# of cans: 10    ");
  3509  001728  0E8C               	movlw	low STR_16
  3510  00172A  0100               	movlb	0	; () banked
  3511  00172C  6F9C               	movwf	printf@f& (0+255),b
  3512  00172E  0EFE               	movlw	high STR_16
  3513  001730  0100               	movlb	0	; () banked
  3514  001732  6F9D               	movwf	(printf@f+1)& (0+255),b
  3515  001734  EC09  F000         	call	_printf	;wreg free
  3516                           
  3517                           ;main.c: 534: keycheck();
  3518  001738  EC1B  F01A         	call	_keycheck	;wreg free
  3519                           
  3520                           ;main.c: 535: lcdInst(0b00000001);
  3521  00173C  0E01               	movlw	1
  3522  00173E  EC36  F01A         	call	_lcdInst
  3523                           
  3524                           ;main.c: 536: printf("Run#3    A:Next  ");
  3525  001742  0E40               	movlw	low STR_27
  3526  001744  0100               	movlb	0	; () banked
  3527  001746  6F9C               	movwf	printf@f& (0+255),b
  3528  001748  0EFF               	movlw	high STR_27
  3529  00174A  0100               	movlb	0	; () banked
  3530  00174C  6F9D               	movwf	(printf@f+1)& (0+255),b
  3531  00174E  EC09  F000         	call	_printf	;wreg free
  3532                           
  3533                           ;main.c: 537: lcdInst(0b11000000);
  3534  001752  0EC0               	movlw	192
  3535  001754  EC36  F01A         	call	_lcdInst
  3536                           
  3537                           ;main.c: 538: printf("# soda cans: 6   ");
  3538  001758  0EB0               	movlw	low STR_18
  3539  00175A  0100               	movlb	0	; () banked
  3540  00175C  6F9C               	movwf	printf@f& (0+255),b
  3541  00175E  0EFE               	movlw	high STR_18
  3542  001760  0100               	movlb	0	; () banked
  3543  001762  6F9D               	movwf	(printf@f+1)& (0+255),b
  3544  001764  EC09  F000         	call	_printf	;wreg free
  3545                           
  3546                           ;main.c: 539: keycheck();
  3547  001768  EC1B  F01A         	call	_keycheck	;wreg free
  3548                           
  3549                           ;main.c: 540: lcdInst(0b00000001);
  3550  00176C  0E01               	movlw	1
  3551  00176E  EC36  F01A         	call	_lcdInst
  3552                           
  3553                           ;main.c: 541: printf("Run#3    A:Next  ");
  3554  001772  0E40               	movlw	low STR_27
  3555  001774  0100               	movlb	0	; () banked
  3556  001776  6F9C               	movwf	printf@f& (0+255),b
  3557  001778  0EFF               	movlw	high STR_27
  3558  00177A  0100               	movlb	0	; () banked
  3559  00177C  6F9D               	movwf	(printf@f+1)& (0+255),b
  3560  00177E  EC09  F000         	call	_printf	;wreg free
  3561                           
  3562                           ;main.c: 542: lcdInst(0b11000000);
  3563  001782  0EC0               	movlw	192
  3564  001784  EC36  F01A         	call	_lcdInst
  3565                           
  3566                           ;main.c: 543: printf("# soup cans: 4   ");
  3567  001788  0E9E               	movlw	low STR_20
  3568  00178A  0100               	movlb	0	; () banked
  3569  00178C  6F9C               	movwf	printf@f& (0+255),b
  3570  00178E  0EFE               	movlw	high STR_20
  3571  001790  0100               	movlb	0	; () banked
  3572  001792  6F9D               	movwf	(printf@f+1)& (0+255),b
  3573  001794  EC09  F000         	call	_printf	;wreg free
  3574                           
  3575                           ;main.c: 544: keycheck();
  3576  001798  EC1B  F01A         	call	_keycheck	;wreg free
  3577                           
  3578                           ;main.c: 545: break;
  3579  00179C  0012               	return	
  3580  00179E                     l4833:
  3581                           
  3582                           ;main.c: 548: lcdInst(0b10000000);
  3583  00179E  0E80               	movlw	128
  3584  0017A0  EC36  F01A         	call	_lcdInst
  3585                           
  3586                           ;main.c: 549: printf("ERROR: %d", log_position);
  3587  0017A4  0EF5               	movlw	low STR_14
  3588  0017A6  0100               	movlb	0	; () banked
  3589  0017A8  6F9C               	movwf	printf@f& (0+255),b
  3590  0017AA  0EFF               	movlw	high STR_14
  3591  0017AC  0100               	movlb	0	; () banked
  3592  0017AE  6F9D               	movwf	(printf@f+1)& (0+255),b
  3593  0017B0  C0ED  F09E         	movff	_log_position,?_printf+2
  3594  0017B4  C0EE  F09F         	movff	_log_position+1,?_printf+3
  3595  0017B8  EC09  F000         	call	_printf	;wreg free
  3596  0017BC  D7F0               	goto	l4833
  3597  0017BE                     l4839:
  3598  0017BE  C0ED  F090         	movff	_log_position,___awmod@dividend
  3599  0017C2  C0EE  F091         	movff	_log_position+1,___awmod@dividend+1
  3600  0017C6  0E00               	movlw	0
  3601  0017C8  0100               	movlb	0	; () banked
  3602  0017CA  6F93               	movwf	(___awmod@divisor+1)& (0+255),b
  3603  0017CC  0E03               	movlw	3
  3604  0017CE  6F92               	movwf	___awmod@divisor& (0+255),b
  3605  0017D0  EC0B  F015         	call	___awmod	;wreg free
  3606                           
  3607                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3608                           ; Switch size 1, requested type "space"
  3609                           ; Number of cases is 1, Range of values is 0 to 0
  3610                           ; switch strategies available:
  3611                           ; Name         Instructions Cycles
  3612                           ; simple_byte            4     3 (average)
  3613                           ;	Chosen strategy is simple_byte
  3614  0017D4  0100               	movlb	0	; () banked
  3615  0017D6  5191               	movf	(?___awmod+1)& (0+255),w,b
  3616  0017D8  0A00               	xorlw	0	; case 0
  3617  0017DA  A4D8               	btfss	status,2,c
  3618  0017DC  D7E0               	goto	l4833
  3619                           
  3620                           ; BSR set to: 0
  3621                           ; Switch size 1, requested type "space"
  3622                           ; Number of cases is 3, Range of values is 0 to 2
  3623                           ; switch strategies available:
  3624                           ; Name         Instructions Cycles
  3625                           ; simple_byte           10     6 (average)
  3626                           ;	Chosen strategy is simple_byte
  3627  0017DE  0100               	movlb	0	; () banked
  3628  0017E0  5190               	movf	?___awmod& (0+255),w,b
  3629  0017E2  0A00               	xorlw	0	; case 0
  3630  0017E4  B4D8               	btfsc	status,2,c
  3631  0017E6  D6FA               	goto	l4773
  3632  0017E8  0A01               	xorlw	1	; case 1
  3633  0017EA  B4D8               	btfsc	status,2,c
  3634  0017EC  D740               	goto	l4793
  3635  0017EE  0A03               	xorlw	3	; case 2
  3636  0017F0  B4D8               	btfsc	status,2,c
  3637  0017F2  D789               	goto	l4813
  3638  0017F4  D7D4               	goto	l4833
  3639  0017F6                     __end_of_display_log:
  3640                           	opt stack 0
  3641                           tblptru	equ	0xFF8
  3642                           tblptrh	equ	0xFF7
  3643                           tblptrl	equ	0xFF6
  3644                           tablat	equ	0xFF5
  3645                           prodh	equ	0xFF4
  3646                           prodl	equ	0xFF3
  3647                           intcon	equ	0xFF2
  3648                           intcon2	equ	0xFF1
  3649                           intcon3	equ	0xFF0
  3650                           postinc0	equ	0xFEE
  3651                           wreg	equ	0xFE8
  3652                           postdec1	equ	0xFE5
  3653                           fsr1l	equ	0xFE1
  3654                           indf2	equ	0xFDF
  3655                           fsr2h	equ	0xFDA
  3656                           fsr2l	equ	0xFD9
  3657                           status	equ	0xFD8
  3658                           
  3659 ;; *************** function _keycheck *****************
  3660 ;; Defined at:
  3661 ;;		line 445 in file "main.c"
  3662 ;; Parameters:    Size  Location     Type
  3663 ;;		None
  3664 ;; Auto vars:     Size  Location     Type
  3665 ;;		None
  3666 ;; Return value:  Size  Location     Type
  3667 ;;                  1    wreg      void 
  3668 ;; Registers used:
  3669 ;;		wreg, status,2, status,0
  3670 ;; Tracked objects:
  3671 ;;		On entry : 0/0
  3672 ;;		On exit  : 0/0
  3673 ;;		Unchanged: 0/0
  3674 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3675 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3676 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3677 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3678 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3679 ;;Total ram usage:        0 bytes
  3680 ;; Hardware stack levels used:    1
  3681 ;; Hardware stack levels required when called:    7
  3682 ;; This function calls:
  3683 ;;		Nothing
  3684 ;; This function is called by:
  3685 ;;		_display_log
  3686 ;; This function uses a non-reentrant model
  3687 ;;
  3688                           
  3689                           	psect	text14
  3690  003436                     __ptext14:
  3691                           	opt stack 0
  3692  003436                     _keycheck:
  3693                           	opt stack 22
  3694  003436                     l354:
  3695  003436  A281               	btfss	3969,1,c	;volatile
  3696  003438  D7FE               	goto	l354
  3697                           
  3698                           ;main.c: 449: }
  3699                           ;main.c: 450: keypress = (PORTB & 0xF0)>>4;
  3700  00343A  3881               	swapf	3969,w,c	;volatile
  3701  00343C  0B0F               	andlw	15
  3702  00343E  0B0F               	andlw	15
  3703  003440  6E7E               	movwf	_keypress,c
  3704  003442                     l357:
  3705  003442  B281               	btfsc	3969,1,c	;volatile
  3706  003444  D7FE               	goto	l357
  3707                           
  3708                           ;main.c: 453: }
  3709                           ;main.c: 454: __nop();
  3710  003446  F000               	nop	
  3711                           
  3712                           ;main.c: 455: return;
  3713  003448  0012               	return		;funcret
  3714  00344A                     __end_of_keycheck:
  3715                           	opt stack 0
  3716                           tblptru	equ	0xFF8
  3717                           tblptrh	equ	0xFF7
  3718                           tblptrl	equ	0xFF6
  3719                           tablat	equ	0xFF5
  3720                           prodh	equ	0xFF4
  3721                           prodl	equ	0xFF3
  3722                           intcon	equ	0xFF2
  3723                           intcon2	equ	0xFF1
  3724                           intcon3	equ	0xFF0
  3725                           postinc0	equ	0xFEE
  3726                           wreg	equ	0xFE8
  3727                           postdec1	equ	0xFE5
  3728                           fsr1l	equ	0xFE1
  3729                           indf2	equ	0xFDF
  3730                           fsr2h	equ	0xFDA
  3731                           fsr2l	equ	0xFD9
  3732                           status	equ	0xFD8
  3733                           
  3734 ;; *************** function _bottle_time *****************
  3735 ;; Defined at:
  3736 ;;		line 556 in file "main.c"
  3737 ;; Parameters:    Size  Location     Type
  3738 ;;		None
  3739 ;; Auto vars:     Size  Location     Type
  3740 ;;		None
  3741 ;; Return value:  Size  Location     Type
  3742 ;;                  1    wreg      void 
  3743 ;; Registers used:
  3744 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3745 ;; Tracked objects:
  3746 ;;		On entry : 0/0
  3747 ;;		On exit  : 0/0
  3748 ;;		Unchanged: 0/0
  3749 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3750 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3751 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3752 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3753 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3754 ;;Total ram usage:        0 bytes
  3755 ;; Hardware stack levels used:    1
  3756 ;; Hardware stack levels required when called:   10
  3757 ;; This function calls:
  3758 ;;		_lcdInst
  3759 ;;		_printf
  3760 ;; This function is called by:
  3761 ;;		_main
  3762 ;; This function uses a non-reentrant model
  3763 ;;
  3764                           
  3765                           	psect	text15
  3766  003296                     __ptext15:
  3767                           	opt stack 0
  3768  003296                     _bottle_time:
  3769                           	opt stack 20
  3770                           
  3771                           ;main.c: 557: lcdInst(0b10000000);
  3772                           
  3773                           ;incstack = 0
  3774  003296  0E80               	movlw	128
  3775  003298  EC36  F01A         	call	_lcdInst
  3776                           
  3777                           ;main.c: 558: printf("Total Operation  ");
  3778  00329C  0E0A               	movlw	low STR_34
  3779  00329E  0100               	movlb	0	; () banked
  3780  0032A0  6F9C               	movwf	printf@f& (0+255),b
  3781  0032A2  0EFF               	movlw	high STR_34
  3782  0032A4  0100               	movlb	0	; () banked
  3783  0032A6  6F9D               	movwf	(printf@f+1)& (0+255),b
  3784  0032A8  EC09  F000         	call	_printf	;wreg free
  3785                           
  3786                           ;main.c: 559: lcdInst(0b11000000);
  3787  0032AC  0EC0               	movlw	192
  3788  0032AE  EC36  F01A         	call	_lcdInst
  3789                           
  3790                           ;main.c: 560: printf("Time: %d s       ", operation_time);
  3791  0032B2  0E68               	movlw	low STR_35
  3792  0032B4  0100               	movlb	0	; () banked
  3793  0032B6  6F9C               	movwf	printf@f& (0+255),b
  3794  0032B8  0EFE               	movlw	high STR_35
  3795  0032BA  0100               	movlb	0	; () banked
  3796  0032BC  6F9D               	movwf	(printf@f+1)& (0+255),b
  3797  0032BE  C0E4  F09E         	movff	_operation_time,?_printf+2
  3798  0032C2  C0E5  F09F         	movff	_operation_time+1,?_printf+3
  3799  0032C6  EC09  F000         	call	_printf	;wreg free
  3800  0032CA  0012               	return	
  3801  0032CC                     __end_of_bottle_time:
  3802                           	opt stack 0
  3803                           tblptru	equ	0xFF8
  3804                           tblptrh	equ	0xFF7
  3805                           tblptrl	equ	0xFF6
  3806                           tablat	equ	0xFF5
  3807                           prodh	equ	0xFF4
  3808                           prodl	equ	0xFF3
  3809                           intcon	equ	0xFF2
  3810                           intcon2	equ	0xFF1
  3811                           intcon3	equ	0xFF0
  3812                           postinc0	equ	0xFEE
  3813                           wreg	equ	0xFE8
  3814                           postdec1	equ	0xFE5
  3815                           fsr1l	equ	0xFE1
  3816                           indf2	equ	0xFDF
  3817                           fsr2h	equ	0xFDA
  3818                           fsr2l	equ	0xFD9
  3819                           status	equ	0xFD8
  3820                           
  3821 ;; *************** function _bottle_count *****************
  3822 ;; Defined at:
  3823 ;;		line 458 in file "main.c"
  3824 ;; Parameters:    Size  Location     Type
  3825 ;;		None
  3826 ;; Auto vars:     Size  Location     Type
  3827 ;;		None
  3828 ;; Return value:  Size  Location     Type
  3829 ;;                  1    wreg      void 
  3830 ;; Registers used:
  3831 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3832 ;; Tracked objects:
  3833 ;;		On entry : 0/0
  3834 ;;		On exit  : 0/0
  3835 ;;		Unchanged: 0/0
  3836 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3837 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3838 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3839 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3840 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3841 ;;Total ram usage:        0 bytes
  3842 ;; Hardware stack levels used:    1
  3843 ;; Hardware stack levels required when called:   10
  3844 ;; This function calls:
  3845 ;;		___awmod
  3846 ;;		_lcdInst
  3847 ;;		_printf
  3848 ;; This function is called by:
  3849 ;;		_main
  3850 ;; This function uses a non-reentrant model
  3851 ;;
  3852                           
  3853                           	psect	text16
  3854  001E1E                     __ptext16:
  3855                           	opt stack 0
  3856  001E1E                     _bottle_count:
  3857                           	opt stack 20
  3858                           
  3859                           ;main.c: 459: switch(can_count_disp % 3){
  3860                           
  3861                           ;incstack = 0
  3862  001E1E  D069               	goto	l4757
  3863  001E20                     l4733:
  3864                           
  3865                           ;main.c: 461: lcdInst(0b10000000);
  3866  001E20  0E80               	movlw	128
  3867  001E22  EC36  F01A         	call	_lcdInst
  3868                           
  3869                           ;main.c: 462: printf("Can Count       ");
  3870  001E26  0EA9               	movlw	low STR_8
  3871  001E28  0100               	movlb	0	; () banked
  3872  001E2A  6F9C               	movwf	printf@f& (0+255),b
  3873  001E2C  0EFF               	movlw	high STR_8
  3874  001E2E  0100               	movlb	0	; () banked
  3875  001E30  6F9D               	movwf	(printf@f+1)& (0+255),b
  3876  001E32  EC09  F000         	call	_printf	;wreg free
  3877                           
  3878                           ;main.c: 463: lcdInst(0b11000000);
  3879  001E36  0EC0               	movlw	192
  3880  001E38  EC36  F01A         	call	_lcdInst
  3881                           
  3882                           ;main.c: 464: printf("Total: %d       ", total_bottle_count);
  3883  001E3C  0E98               	movlw	low STR_9
  3884  001E3E  0100               	movlb	0	; () banked
  3885  001E40  6F9C               	movwf	printf@f& (0+255),b
  3886  001E42  0EFF               	movlw	high STR_9
  3887  001E44  0100               	movlb	0	; () banked
  3888  001E46  6F9D               	movwf	(printf@f+1)& (0+255),b
  3889  001E48  C0E8  F09E         	movff	_total_bottle_count,?_printf+2
  3890  001E4C  C0E9  F09F         	movff	_total_bottle_count+1,?_printf+3
  3891  001E50  EC09  F000         	call	_printf	;wreg free
  3892                           
  3893                           ;main.c: 465: break;
  3894  001E54  0012               	return	
  3895  001E56                     l4739:
  3896                           
  3897                           ;main.c: 467: lcdInst(0b10000000);
  3898  001E56  0E80               	movlw	128
  3899  001E58  EC36  F01A         	call	_lcdInst
  3900                           
  3901                           ;main.c: 468: printf("SOUP LBL: %d     ", SOUP_LBL_count);
  3902  001E5C  0E7A               	movlw	low STR_10
  3903  001E5E  0100               	movlb	0	; () banked
  3904  001E60  6F9C               	movwf	printf@f& (0+255),b
  3905  001E62  0EFE               	movlw	high STR_10
  3906  001E64  0100               	movlb	0	; () banked
  3907  001E66  6F9D               	movwf	(printf@f+1)& (0+255),b
  3908  001E68  C0CE  F09E         	movff	_SOUP_LBL_count,?_printf+2
  3909  001E6C  C0CF  F09F         	movff	_SOUP_LBL_count+1,?_printf+3
  3910  001E70  EC09  F000         	call	_printf	;wreg free
  3911                           
  3912                           ;main.c: 469: lcdInst(0b11000000);
  3913  001E74  0EC0               	movlw	192
  3914  001E76  EC36  F01A         	call	_lcdInst
  3915                           
  3916                           ;main.c: 470: printf("SOUP NOLBL: %d   ", SOUP_NOLBL_COUNT);
  3917  001E7A  0ED4               	movlw	low STR_11
  3918  001E7C  0100               	movlb	0	; () banked
  3919  001E7E  6F9C               	movwf	printf@f& (0+255),b
  3920  001E80  0EFE               	movlw	high STR_11
  3921  001E82  0100               	movlb	0	; () banked
  3922  001E84  6F9D               	movwf	(printf@f+1)& (0+255),b
  3923  001E86  C0D0  F09E         	movff	_SOUP_NOLBL_COUNT,?_printf+2
  3924  001E8A  C0D1  F09F         	movff	_SOUP_NOLBL_COUNT+1,?_printf+3
  3925  001E8E  EC09  F000         	call	_printf	;wreg free
  3926                           
  3927                           ;main.c: 471: break;
  3928  001E92  0012               	return	
  3929  001E94                     l4745:
  3930                           
  3931                           ;main.c: 473: lcdInst(0b10000000);
  3932  001E94  0E80               	movlw	128
  3933  001E96  EC36  F01A         	call	_lcdInst
  3934                           
  3935                           ;main.c: 474: printf("POPCAN TAB: %d   ", POPCAN_TAB_count);
  3936  001E9A  0EC2               	movlw	low STR_12
  3937  001E9C  0100               	movlb	0	; () banked
  3938  001E9E  6F9C               	movwf	printf@f& (0+255),b
  3939  001EA0  0EFE               	movlw	high STR_12
  3940  001EA2  0100               	movlb	0	; () banked
  3941  001EA4  6F9D               	movwf	(printf@f+1)& (0+255),b
  3942  001EA6  C0CC  F09E         	movff	_POPCAN_TAB_count,?_printf+2
  3943  001EAA  C0CD  F09F         	movff	_POPCAN_TAB_count+1,?_printf+3
  3944  001EAE  EC09  F000         	call	_printf	;wreg free
  3945                           
  3946                           ;main.c: 475: lcdInst(0b11000000);
  3947  001EB2  0EC0               	movlw	192
  3948  001EB4  EC36  F01A         	call	_lcdInst
  3949                           
  3950                           ;main.c: 476: printf("POPCAN NOTAB: %d ", POPCAN_NOTAB_count);
  3951  001EB8  0E52               	movlw	low STR_13
  3952  001EBA  0100               	movlb	0	; () banked
  3953  001EBC  6F9C               	movwf	printf@f& (0+255),b
  3954  001EBE  0EFF               	movlw	high STR_13
  3955  001EC0  0100               	movlb	0	; () banked
  3956  001EC2  6F9D               	movwf	(printf@f+1)& (0+255),b
  3957  001EC4  C0CA  F09E         	movff	_POPCAN_NOTAB_count,?_printf+2
  3958  001EC8  C0CB  F09F         	movff	_POPCAN_NOTAB_count+1,?_printf+3
  3959  001ECC  EC09  F000         	call	_printf	;wreg free
  3960                           
  3961                           ;main.c: 477: break;
  3962  001ED0  0012               	return	
  3963  001ED2                     l4751:
  3964                           
  3965                           ;main.c: 481: lcdInst(0b10000000);
  3966  001ED2  0E80               	movlw	128
  3967  001ED4  EC36  F01A         	call	_lcdInst
  3968                           
  3969                           ;main.c: 482: printf("ERROR: %d", can_count_disp);
  3970  001ED8  0EF5               	movlw	low STR_14
  3971  001EDA  0100               	movlb	0	; () banked
  3972  001EDC  6F9C               	movwf	printf@f& (0+255),b
  3973  001EDE  0EFF               	movlw	high STR_14
  3974  001EE0  0100               	movlb	0	; () banked
  3975  001EE2  6F9D               	movwf	(printf@f+1)& (0+255),b
  3976  001EE4  C0EB  F09E         	movff	_can_count_disp,?_printf+2
  3977  001EE8  C0EC  F09F         	movff	_can_count_disp+1,?_printf+3
  3978  001EEC  EC09  F000         	call	_printf	;wreg free
  3979  001EF0  D7F0               	goto	l4751
  3980  001EF2                     l4757:
  3981  001EF2  C0EB  F090         	movff	_can_count_disp,___awmod@dividend
  3982  001EF6  C0EC  F091         	movff	_can_count_disp+1,___awmod@dividend+1
  3983  001EFA  0E00               	movlw	0
  3984  001EFC  0100               	movlb	0	; () banked
  3985  001EFE  6F93               	movwf	(___awmod@divisor+1)& (0+255),b
  3986  001F00  0E03               	movlw	3
  3987  001F02  6F92               	movwf	___awmod@divisor& (0+255),b
  3988  001F04  EC0B  F015         	call	___awmod	;wreg free
  3989                           
  3990                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3991                           ; Switch size 1, requested type "space"
  3992                           ; Number of cases is 1, Range of values is 0 to 0
  3993                           ; switch strategies available:
  3994                           ; Name         Instructions Cycles
  3995                           ; simple_byte            4     3 (average)
  3996                           ;	Chosen strategy is simple_byte
  3997  001F08  0100               	movlb	0	; () banked
  3998  001F0A  5191               	movf	(?___awmod+1)& (0+255),w,b
  3999  001F0C  0A00               	xorlw	0	; case 0
  4000  001F0E  A4D8               	btfss	status,2,c
  4001  001F10  D7E0               	goto	l4751
  4002                           
  4003                           ; BSR set to: 0
  4004                           ; Switch size 1, requested type "space"
  4005                           ; Number of cases is 3, Range of values is 0 to 2
  4006                           ; switch strategies available:
  4007                           ; Name         Instructions Cycles
  4008                           ; simple_byte           10     6 (average)
  4009                           ;	Chosen strategy is simple_byte
  4010  001F12  0100               	movlb	0	; () banked
  4011  001F14  5190               	movf	?___awmod& (0+255),w,b
  4012  001F16  0A00               	xorlw	0	; case 0
  4013  001F18  B4D8               	btfsc	status,2,c
  4014  001F1A  D782               	goto	l4733
  4015  001F1C  0A01               	xorlw	1	; case 1
  4016  001F1E  B4D8               	btfsc	status,2,c
  4017  001F20  D79A               	goto	l4739
  4018  001F22  0A03               	xorlw	3	; case 2
  4019  001F24  B4D8               	btfsc	status,2,c
  4020  001F26  D7B6               	goto	l4745
  4021  001F28  D7D4               	goto	l4751
  4022  001F2A                     __end_of_bottle_count:
  4023                           	opt stack 0
  4024                           tblptru	equ	0xFF8
  4025                           tblptrh	equ	0xFF7
  4026                           tblptrl	equ	0xFF6
  4027                           tablat	equ	0xFF5
  4028                           prodh	equ	0xFF4
  4029                           prodl	equ	0xFF3
  4030                           intcon	equ	0xFF2
  4031                           intcon2	equ	0xFF1
  4032                           intcon3	equ	0xFF0
  4033                           postinc0	equ	0xFEE
  4034                           wreg	equ	0xFE8
  4035                           postdec1	equ	0xFE5
  4036                           fsr1l	equ	0xFE1
  4037                           indf2	equ	0xFDF
  4038                           fsr2h	equ	0xFDA
  4039                           fsr2l	equ	0xFD9
  4040                           status	equ	0xFD8
  4041                           
  4042 ;; *************** function _printf *****************
  4043 ;; Defined at:
  4044 ;;		line 464 in file "/Applications/microchip/xc8/v1.40/sources/common/doprnt.c"
  4045 ;; Parameters:    Size  Location     Type
  4046 ;;  f               2   28[BANK0 ] PTR const unsigned char 
  4047 ;;		 -> STR_43(18), STR_42(18), STR_41(18), STR_40(25), 
  4048 ;;		 -> STR_39(25), STR_38(25), STR_37(24), STR_36(23), 
  4049 ;;		 -> STR_35(18), STR_34(18), STR_33(10), STR_32(18), 
  4050 ;;		 -> STR_31(18), STR_30(18), STR_29(18), STR_28(18), 
  4051 ;;		 -> STR_27(18), STR_26(18), STR_25(18), STR_24(18), 
  4052 ;;		 -> STR_23(18), STR_22(18), STR_21(18), STR_20(18), 
  4053 ;;		 -> STR_19(18), STR_18(18), STR_17(18), STR_16(18), 
  4054 ;;		 -> STR_15(18), STR_14(10), STR_13(18), STR_12(18), 
  4055 ;;		 -> STR_11(18), STR_10(18), STR_9(17), STR_8(17), 
  4056 ;;		 -> STR_7(21), STR_6(21), STR_5(16), STR_4(15), 
  4057 ;;		 -> STR_3(15), STR_2(13), STR_1(13), 
  4058 ;; Auto vars:     Size  Location     Type
  4059 ;;  idx             1   52[BANK0 ] unsigned char 
  4060 ;;  tmpval          4    0        struct .
  4061 ;;  flag            2   63[BANK0 ] unsigned short 
  4062 ;;  width           2   60[BANK0 ] int 
  4063 ;;  val             2   57[BANK0 ] unsigned int 
  4064 ;;  ap              2   55[BANK0 ] PTR void [1]
  4065 ;;		 -> ?i2_printf(2), ?_printf(2), 
  4066 ;;  len             2   53[BANK0 ] unsigned int 
  4067 ;;  cp              2   44[BANK0 ] PTR const unsigned char 
  4068 ;;		 -> printf@c(1), 
  4069 ;;  c               1   62[BANK0 ] char 
  4070 ;;  prec            1   59[BANK0 ] char 
  4071 ;; Return value:  Size  Location     Type
  4072 ;;                  2   28[BANK0 ] int 
  4073 ;; Registers used:
  4074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4075 ;; Tracked objects:
  4076 ;;		On entry : 0/0
  4077 ;;		On exit  : 0/0
  4078 ;;		Unchanged: 0/0
  4079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4080 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4081 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4082 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4083 ;;      Totals:         0      37       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4084 ;;Total ram usage:       37 bytes
  4085 ;; Hardware stack levels used:    1
  4086 ;; Hardware stack levels required when called:    9
  4087 ;; This function calls:
  4088 ;;		___lwdiv
  4089 ;;		___lwmod
  4090 ;;		___wmul
  4091 ;;		_isdigit
  4092 ;;		_putch
  4093 ;; This function is called by:
  4094 ;;		_standby
  4095 ;;		_bottle_count
  4096 ;;		_display_log
  4097 ;;		_bottle_time
  4098 ;;		_operation
  4099 ;;		_operationend
  4100 ;;		_emergencystop
  4101 ;;		_date_time
  4102 ;; This function uses a non-reentrant model
  4103 ;;
  4104                           
  4105                           	psect	text17
  4106  000012                     __ptext17:
  4107                           	opt stack 0
  4108  000012                     _printf:
  4109                           	opt stack 20
  4110                           
  4111                           ;doprnt.c: 466: va_list ap;
  4112                           ;doprnt.c: 499: signed char c;
  4113                           ;doprnt.c: 501: int width;
  4114                           ;doprnt.c: 506: signed char prec;
  4115                           ;doprnt.c: 508: unsigned short flag;
  4116                           ;doprnt.c: 523: union {
  4117                           ;doprnt.c: 524: unsigned long vd;
  4118                           ;doprnt.c: 525: double integ;
  4119                           ;doprnt.c: 526: } tmpval;
  4120                           ;doprnt.c: 528: unsigned int val;
  4121                           ;doprnt.c: 529: unsigned len;
  4122                           ;doprnt.c: 530: const char * cp;
  4123                           ;doprnt.c: 533: *ap = __va_start();
  4124                           
  4125                           ;incstack = 0
  4126  000012  0E9E               	movlw	low (?_printf+2)
  4127  000014  0100               	movlb	0	; () banked
  4128  000016  6FB7               	movwf	printf@ap& (0+255),b
  4129  000018  0E00               	movlw	high (?_printf+2)
  4130  00001A  0100               	movlb	0	; () banked
  4131  00001C  6FB8               	movwf	(printf@ap+1)& (0+255),b
  4132                           
  4133                           ;doprnt.c: 536: while(c = *f++) {
  4134  00001E  EFBD  F004         	goto	l4387
  4135  000022                     l4081:
  4136                           
  4137                           ; BSR set to: 0
  4138                           ;doprnt.c: 538: if(c != '%')
  4139  000022  0E25               	movlw	37
  4140  000024  0100               	movlb	0	; () banked
  4141  000026  19BE               	xorwf	printf@c& (0+255),w,b
  4142  000028  B4D8               	btfsc	status,2,c
  4143  00002A  D006               	goto	l4085
  4144                           
  4145                           ; BSR set to: 0
  4146                           ;doprnt.c: 540: {
  4147                           ;doprnt.c: 541: (putch(c) );
  4148  00002C  0100               	movlb	0	; () banked
  4149  00002E  51BE               	movf	printf@c& (0+255),w,b
  4150  000030  EC2E  F01A         	call	_putch
  4151                           
  4152                           ;doprnt.c: 542: continue;
  4153  000034  EFBD  F004         	goto	l4387
  4154  000038                     l4085:
  4155                           
  4156                           ;doprnt.c: 543: }
  4157                           ;doprnt.c: 546: width = 0;
  4158  000038  0E00               	movlw	0
  4159  00003A  0100               	movlb	0	; () banked
  4160  00003C  6FBD               	movwf	(printf@width+1)& (0+255),b
  4161  00003E  0E00               	movlw	0
  4162  000040  6FBC               	movwf	printf@width& (0+255),b
  4163                           
  4164                           ;doprnt.c: 548: flag = 0;
  4165  000042  0E00               	movlw	0
  4166  000044  0100               	movlb	0	; () banked
  4167  000046  6FC0               	movwf	(printf@flag+1)& (0+255),b
  4168  000048  0E00               	movlw	0
  4169  00004A  6FBF               	movwf	printf@flag& (0+255),b
  4170                           
  4171                           ; BSR set to: 0
  4172                           ;doprnt.c: 551: switch(*f) {
  4173                           
  4174                           ;doprnt.c: 550: for(;;) {
  4175  00004C  D00E               	goto	l4097
  4176  00004E                     l4087:
  4177                           
  4178                           ;doprnt.c: 554: flag |= 0x08;
  4179  00004E  0100               	movlb	0	; () banked
  4180  000050  87BF               	bsf	printf@flag& (0+255),3,b
  4181  000052  D008               	goto	L5
  4182  000054                     l4089:
  4183                           
  4184                           ;doprnt.c: 561: flag |= 0x01;
  4185  000054  0100               	movlb	0	; () banked
  4186  000056  81BF               	bsf	printf@flag& (0+255),0,b
  4187  000058  D005               	goto	L5
  4188  00005A                     l4091:
  4189                           
  4190                           ;doprnt.c: 574: flag |= 0x800;
  4191  00005A  0100               	movlb	0	; () banked
  4192  00005C  87C0               	bsf	(printf@flag+1)& (0+255),3,b
  4193  00005E  D002               	goto	L5
  4194  000060                     l4093:
  4195                           
  4196                           ;doprnt.c: 580: flag |= 0x04;
  4197  000060  0100               	movlb	0	; () banked
  4198  000062  85BF               	bsf	printf@flag& (0+255),2,b
  4199  000064                     L5:
  4200                           
  4201                           ;doprnt.c: 581: f++;
  4202  000064  0100               	movlb	0	; () banked
  4203  000066  4B9C               	infsnz	printf@f& (0+255),f,b
  4204  000068  2B9D               	incf	(printf@f+1)& (0+255),f,b
  4205  00006A                     l4097:
  4206  00006A  C09C  FFF6         	movff	printf@f,tblptrl
  4207  00006E  C09D  FFF7         	movff	printf@f+1,tblptrh
  4208  000072                     	if	0	;tblptru may be non-zero
  4209  000072                     	endif
  4210  000072                     	if	0	;tblptru may be non-zero
  4211  000072                     	endif
  4212  000072  0008               	tblrd		*
  4213  000074  50F5               	movf	tablat,w,c
  4214                           
  4215                           ; Switch size 1, requested type "space"
  4216                           ; Number of cases is 4, Range of values is 32 to 48
  4217                           ; switch strategies available:
  4218                           ; Name         Instructions Cycles
  4219                           ; simple_byte           13     7 (average)
  4220                           ;	Chosen strategy is simple_byte
  4221  000076  0A20               	xorlw	32	; case 32
  4222  000078  B4D8               	btfsc	status,2,c
  4223  00007A  D7EC               	goto	l4089
  4224  00007C  0A03               	xorlw	3	; case 35
  4225  00007E  B4D8               	btfsc	status,2,c
  4226  000080  D7EC               	goto	l4091
  4227  000082  0A0E               	xorlw	14	; case 45
  4228  000084  B4D8               	btfsc	status,2,c
  4229  000086  D7E3               	goto	l4087
  4230  000088  0A1D               	xorlw	29	; case 48
  4231  00008A  B4D8               	btfsc	status,2,c
  4232  00008C  D7E9               	goto	l4093
  4233                           
  4234                           ;doprnt.c: 593: if(flag & 0x08)
  4235                           
  4236                           ;doprnt.c: 586: }
  4237                           
  4238                           ;doprnt.c: 585: break;
  4239  00008E  0100               	movlb	0	; () banked
  4240  000090  A7BF               	btfss	printf@flag& (0+255),3,b
  4241  000092  D002               	goto	l4101
  4242                           
  4243                           ; BSR set to: 0
  4244                           ;doprnt.c: 594: flag &= ~0x04;
  4245  000094  0100               	movlb	0	; () banked
  4246  000096  95BF               	bcf	printf@flag& (0+255),2,b
  4247  000098                     l4101:
  4248                           
  4249                           ; BSR set to: 0
  4250                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  4251  000098  C09C  FFF6         	movff	printf@f,tblptrl
  4252  00009C  C09D  FFF7         	movff	printf@f+1,tblptrh
  4253  0000A0                     	if	0	;tblptru may be non-zero
  4254  0000A0                     	endif
  4255  0000A0                     	if	0	;tblptru may be non-zero
  4256  0000A0                     	endif
  4257  0000A0  0008               	tblrd		*
  4258  0000A2  50F5               	movf	tablat,w,c
  4259  0000A4  EC98  F019         	call	_isdigit
  4260  0000A8  A0D8               	btfss	status,0,c
  4261  0000AA  D041               	goto	l4113
  4262                           
  4263                           ;doprnt.c: 598: width = 0;
  4264  0000AC  0E00               	movlw	0
  4265  0000AE  0100               	movlb	0	; () banked
  4266  0000B0  6FBD               	movwf	(printf@width+1)& (0+255),b
  4267  0000B2  0E00               	movlw	0
  4268  0000B4  6FBC               	movwf	printf@width& (0+255),b
  4269  0000B6                     l4105:
  4270                           
  4271                           ;doprnt.c: 600: width *= 10;
  4272  0000B6  C0BC  F090         	movff	printf@width,___wmul@multiplier
  4273  0000BA  C0BD  F091         	movff	printf@width+1,___wmul@multiplier+1
  4274  0000BE  0E00               	movlw	0
  4275  0000C0  0100               	movlb	0	; () banked
  4276  0000C2  6F93               	movwf	(___wmul@multiplicand+1)& (0+255),b
  4277  0000C4  0E0A               	movlw	10
  4278  0000C6  6F92               	movwf	___wmul@multiplicand& (0+255),b
  4279  0000C8  EC66  F019         	call	___wmul	;wreg free
  4280  0000CC  C090  F0BC         	movff	?___wmul,printf@width
  4281  0000D0  C091  F0BD         	movff	?___wmul+1,printf@width+1
  4282                           
  4283                           ;doprnt.c: 601: width += *f++ - '0';
  4284  0000D4  0ED0               	movlw	208
  4285  0000D6  0100               	movlb	0	; () banked
  4286  0000D8  6FA8               	movwf	??_printf& (0+255),b
  4287  0000DA  0EFF               	movlw	255
  4288  0000DC  0100               	movlb	0	; () banked
  4289  0000DE  6FA9               	movwf	(??_printf+1)& (0+255),b
  4290  0000E0  C09C  FFF6         	movff	printf@f,tblptrl
  4291  0000E4  C09D  FFF7         	movff	printf@f+1,tblptrh
  4292  0000E8                     	if	0	;tblptru may be non-zero
  4293  0000E8                     	endif
  4294  0000E8                     	if	0	;tblptru may be non-zero
  4295  0000E8                     	endif
  4296  0000E8  0008               	tblrd		*
  4297  0000EA  50F5               	movf	tablat,w,c
  4298  0000EC  0100               	movlb	0	; () banked
  4299  0000EE  6FAA               	movwf	(??_printf+2)& (0+255),b
  4300  0000F0  6BAB               	clrf	(??_printf+3)& (0+255),b
  4301  0000F2  0100               	movlb	0	; () banked
  4302  0000F4  51A8               	movf	??_printf& (0+255),w,b
  4303  0000F6  0100               	movlb	0	; () banked
  4304  0000F8  27AA               	addwf	(??_printf+2)& (0+255),f,b
  4305  0000FA  0100               	movlb	0	; () banked
  4306  0000FC  51A9               	movf	(??_printf+1)& (0+255),w,b
  4307  0000FE  0100               	movlb	0	; () banked
  4308  000100  23AB               	addwfc	(??_printf+3)& (0+255),f,b
  4309  000102  0100               	movlb	0	; () banked
  4310  000104  51AA               	movf	(??_printf+2)& (0+255),w,b
  4311  000106  0100               	movlb	0	; () banked
  4312  000108  27BC               	addwf	printf@width& (0+255),f,b
  4313  00010A  0100               	movlb	0	; () banked
  4314  00010C  51AB               	movf	(??_printf+3)& (0+255),w,b
  4315  00010E  0100               	movlb	0	; () banked
  4316  000110  23BD               	addwfc	(printf@width+1)& (0+255),f,b
  4317                           
  4318                           ; BSR set to: 0
  4319  000112  0100               	movlb	0	; () banked
  4320  000114  4B9C               	infsnz	printf@f& (0+255),f,b
  4321  000116  2B9D               	incf	(printf@f+1)& (0+255),f,b
  4322                           
  4323                           ; BSR set to: 0
  4324                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  4325  000118  C09C  FFF6         	movff	printf@f,tblptrl
  4326  00011C  C09D  FFF7         	movff	printf@f+1,tblptrh
  4327  000120                     	if	0	;tblptru may be non-zero
  4328  000120                     	endif
  4329  000120                     	if	0	;tblptru may be non-zero
  4330  000120                     	endif
  4331  000120  0008               	tblrd		*
  4332  000122  50F5               	movf	tablat,w,c
  4333  000124  EC98  F019         	call	_isdigit
  4334  000128  A0D8               	btfss	status,0,c
  4335  00012A  D01A               	goto	l4121
  4336  00012C  D7C4               	goto	l4105
  4337  00012E                     l4113:
  4338  00012E  C09C  FFF6         	movff	printf@f,tblptrl
  4339  000132  C09D  FFF7         	movff	printf@f+1,tblptrh
  4340  000136                     	if	0	;tblptru may be non-zero
  4341  000136                     	endif
  4342  000136                     	if	0	;tblptru may be non-zero
  4343  000136                     	endif
  4344  000136  0008               	tblrd		*
  4345  000138  50F5               	movf	tablat,w,c
  4346  00013A  0A2A               	xorlw	42
  4347  00013C  A4D8               	btfss	status,2,c
  4348  00013E  D010               	goto	l4121
  4349                           
  4350                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  4351  000140  C0B7  FFD9         	movff	printf@ap,fsr2l
  4352  000144  C0B8  FFDA         	movff	printf@ap+1,fsr2h
  4353  000148  CFDE F0BC          	movff	postinc2,printf@width
  4354  00014C  CFDD F0BD          	movff	postdec2,printf@width+1
  4355  000150  0E02               	movlw	2
  4356  000152  0100               	movlb	0	; () banked
  4357  000154  27B7               	addwf	printf@ap& (0+255),f,b
  4358  000156  0E00               	movlw	0
  4359  000158  23B8               	addwfc	(printf@ap+1)& (0+255),f,b
  4360                           
  4361                           ; BSR set to: 0
  4362                           ;doprnt.c: 606: f++;
  4363  00015A  0100               	movlb	0	; () banked
  4364  00015C  4B9C               	infsnz	printf@f& (0+255),f,b
  4365  00015E  2B9D               	incf	(printf@f+1)& (0+255),f,b
  4366  000160                     l4121:
  4367                           
  4368                           ;doprnt.c: 608: }
  4369                           ;doprnt.c: 611: if(*f == '.') {
  4370  000160  C09C  FFF6         	movff	printf@f,tblptrl
  4371  000164  C09D  FFF7         	movff	printf@f+1,tblptrh
  4372  000168                     	if	0	;tblptru may be non-zero
  4373  000168                     	endif
  4374  000168                     	if	0	;tblptru may be non-zero
  4375  000168                     	endif
  4376  000168  0008               	tblrd		*
  4377  00016A  50F5               	movf	tablat,w,c
  4378  00016C  0A2E               	xorlw	46
  4379  00016E  A4D8               	btfss	status,2,c
  4380  000170  D040               	goto	l4141
  4381                           
  4382                           ;doprnt.c: 612: flag |= 0x4000;
  4383  000172  0100               	movlb	0	; () banked
  4384  000174  8DC0               	bsf	(printf@flag+1)& (0+255),6,b
  4385                           
  4386                           ;doprnt.c: 613: f++;
  4387  000176  0100               	movlb	0	; () banked
  4388  000178  4B9C               	infsnz	printf@f& (0+255),f,b
  4389  00017A  2B9D               	incf	(printf@f+1)& (0+255),f,b
  4390                           
  4391                           ; BSR set to: 0
  4392                           ;doprnt.c: 615: if(*f == '*') {
  4393  00017C  C09C  FFF6         	movff	printf@f,tblptrl
  4394  000180  C09D  FFF7         	movff	printf@f+1,tblptrh
  4395  000184                     	if	0	;tblptru may be non-zero
  4396  000184                     	endif
  4397  000184                     	if	0	;tblptru may be non-zero
  4398  000184                     	endif
  4399  000184  0008               	tblrd		*
  4400  000186  50F5               	movf	tablat,w,c
  4401  000188  0A2A               	xorlw	42
  4402  00018A  A4D8               	btfss	status,2,c
  4403  00018C  D010               	goto	l4133
  4404                           
  4405                           ; BSR set to: 0
  4406                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  4407  00018E  C0B7  FFD9         	movff	printf@ap,fsr2l
  4408  000192  C0B8  FFDA         	movff	printf@ap+1,fsr2h
  4409  000196  50DF               	movf	indf2,w,c
  4410  000198  0100               	movlb	0	; () banked
  4411  00019A  6FBB               	movwf	printf@prec& (0+255),b
  4412                           
  4413                           ; BSR set to: 0
  4414  00019C  0E02               	movlw	2
  4415  00019E  0100               	movlb	0	; () banked
  4416  0001A0  27B7               	addwf	printf@ap& (0+255),f,b
  4417  0001A2  0E00               	movlw	0
  4418  0001A4  23B8               	addwfc	(printf@ap+1)& (0+255),f,b
  4419                           
  4420                           ; BSR set to: 0
  4421                           ;doprnt.c: 617: f++;
  4422  0001A6  0100               	movlb	0	; () banked
  4423  0001A8  4B9C               	infsnz	printf@f& (0+255),f,b
  4424  0001AA  2B9D               	incf	(printf@f+1)& (0+255),f,b
  4425                           
  4426                           ;doprnt.c: 618: } else
  4427  0001AC  D0B9               	goto	l4191
  4428  0001AE                     l4133:
  4429                           
  4430                           ; BSR set to: 0
  4431                           ;doprnt.c: 620: {
  4432                           ;doprnt.c: 621: prec = 0;
  4433  0001AE  0E00               	movlw	0
  4434  0001B0  0100               	movlb	0	; () banked
  4435  0001B2  6FBB               	movwf	printf@prec& (0+255),b
  4436                           
  4437                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  4438  0001B4  D013               	goto	l4139
  4439  0001B6                     l4135:
  4440                           
  4441                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  4442  0001B6  C09C  FFF6         	movff	printf@f,tblptrl
  4443  0001BA  C09D  FFF7         	movff	printf@f+1,tblptrh
  4444  0001BE                     	if	0	;tblptru may be non-zero
  4445  0001BE                     	endif
  4446  0001BE                     	if	0	;tblptru may be non-zero
  4447  0001BE                     	endif
  4448  0001BE  0008               	tblrd		*
  4449  0001C0  CFF5 F0A8          	movff	tablat,??_printf
  4450  0001C4  0100               	movlb	0	; () banked
  4451  0001C6  51BB               	movf	printf@prec& (0+255),w,b
  4452  0001C8  0D0A               	mullw	10
  4453  0001CA  50F3               	movf	prodl,w,c
  4454  0001CC  0100               	movlb	0	; () banked
  4455  0001CE  25A8               	addwf	??_printf& (0+255),w,b
  4456  0001D0  0FD0               	addlw	208
  4457  0001D2  0100               	movlb	0	; () banked
  4458  0001D4  6FBB               	movwf	printf@prec& (0+255),b
  4459                           
  4460                           ; BSR set to: 0
  4461  0001D6  0100               	movlb	0	; () banked
  4462  0001D8  4B9C               	infsnz	printf@f& (0+255),f,b
  4463  0001DA  2B9D               	incf	(printf@f+1)& (0+255),f,b
  4464  0001DC                     l4139:
  4465                           
  4466                           ; BSR set to: 0
  4467  0001DC  C09C  FFF6         	movff	printf@f,tblptrl
  4468  0001E0  C09D  FFF7         	movff	printf@f+1,tblptrh
  4469  0001E4                     	if	0	;tblptru may be non-zero
  4470  0001E4                     	endif
  4471  0001E4                     	if	0	;tblptru may be non-zero
  4472  0001E4                     	endif
  4473  0001E4  0008               	tblrd		*
  4474  0001E6  50F5               	movf	tablat,w,c
  4475  0001E8  EC98  F019         	call	_isdigit
  4476  0001EC  A0D8               	btfss	status,0,c
  4477  0001EE  D098               	goto	l4191
  4478  0001F0  D7E2               	goto	l4135
  4479  0001F2                     l4141:
  4480                           
  4481                           ;doprnt.c: 626: prec = 0;
  4482  0001F2  0E00               	movlw	0
  4483  0001F4  0100               	movlb	0	; () banked
  4484  0001F6  6FBB               	movwf	printf@prec& (0+255),b
  4485                           
  4486                           ; BSR set to: 0
  4487                           ;doprnt.c: 630: }
  4488                           ;doprnt.c: 635: switch(c = *f++) {
  4489  0001F8  D093               	goto	l4191
  4490  0001FA                     l4143:
  4491                           
  4492                           ; BSR set to: 0
  4493                           ;doprnt.c: 691: flag |= 0x40;
  4494  0001FA  0100               	movlb	0	; () banked
  4495  0001FC  8DBF               	bsf	printf@flag& (0+255),6,b
  4496                           
  4497                           ; BSR set to: 0
  4498                           ;doprnt.c: 698: case 'i':
  4499                           ;doprnt.c: 699: break;
  4500                           
  4501                           ; BSR set to: 0
  4502                           
  4503                           ;doprnt.c: 697: case 'd':
  4504                           
  4505                           ;doprnt.c: 693: break;
  4506  0001FE  D0B5               	goto	l4193
  4507  000200                     l4145:
  4508                           
  4509                           ; BSR set to: 0
  4510                           ;doprnt.c: 714: flag |= 0x20;
  4511  000200  0100               	movlb	0	; () banked
  4512  000202  8BBF               	bsf	printf@flag& (0+255),5,b
  4513  000204                     l492:
  4514                           
  4515                           ; BSR set to: 0
  4516                           ;doprnt.c: 721: flag |= 0x80;
  4517  000204  0100               	movlb	0	; () banked
  4518  000206  8FBF               	bsf	printf@flag& (0+255),7,b
  4519                           
  4520                           ;doprnt.c: 723: break;
  4521  000208  D0B0               	goto	l4193
  4522  00020A                     l4147:
  4523                           
  4524                           ; BSR set to: 0
  4525                           ;doprnt.c: 753: if(prec && prec < len)
  4526  00020A  0100               	movlb	0	; () banked
  4527  00020C  51BB               	movf	printf@prec& (0+255),w,b
  4528  00020E  0100               	movlb	0	; () banked
  4529  000210  B4D8               	btfsc	status,2,c
  4530  000212  D017               	goto	l4153
  4531                           
  4532                           ; BSR set to: 0
  4533  000214  C0BB  F0A8         	movff	printf@prec,??_printf
  4534  000218  0100               	movlb	0	; () banked
  4535  00021A  6BA9               	clrf	(??_printf+1)& (0+255),b
  4536  00021C  BFA8               	btfsc	??_printf& (0+255),7,b
  4537  00021E  07A9               	decf	(??_printf+1)& (0+255),f,b
  4538  000220  0100               	movlb	0	; () banked
  4539  000222  51B5               	movf	printf@len& (0+255),w,b
  4540  000224  0100               	movlb	0	; () banked
  4541  000226  5DA8               	subwf	??_printf& (0+255),w,b
  4542  000228  0100               	movlb	0	; () banked
  4543  00022A  51B6               	movf	(printf@len+1)& (0+255),w,b
  4544  00022C  0100               	movlb	0	; () banked
  4545  00022E  59A9               	subwfb	(??_printf+1)& (0+255),w,b
  4546  000230  B0D8               	btfsc	status,0,c
  4547  000232  D007               	goto	l4153
  4548                           
  4549                           ; BSR set to: 0
  4550                           ;doprnt.c: 754: len = prec;
  4551  000234  0100               	movlb	0	; () banked
  4552  000236  51BB               	movf	printf@prec& (0+255),w,b
  4553  000238  0100               	movlb	0	; () banked
  4554  00023A  6FB5               	movwf	printf@len& (0+255),b
  4555  00023C  6BB6               	clrf	(printf@len+1)& (0+255),b
  4556  00023E  BFB5               	btfsc	printf@len& (0+255),7,b
  4557  000240  07B6               	decf	(printf@len+1)& (0+255),f,b
  4558  000242                     l4153:
  4559                           
  4560                           ; BSR set to: 0
  4561                           ;doprnt.c: 757: if(width > len)
  4562  000242  0100               	movlb	0	; () banked
  4563  000244  51BC               	movf	printf@width& (0+255),w,b
  4564  000246  0100               	movlb	0	; () banked
  4565  000248  5DB5               	subwf	printf@len& (0+255),w,b
  4566  00024A  0100               	movlb	0	; () banked
  4567  00024C  51BD               	movf	(printf@width+1)& (0+255),w,b
  4568  00024E  0100               	movlb	0	; () banked
  4569  000250  59B6               	subwfb	(printf@len+1)& (0+255),w,b
  4570  000252  B0D8               	btfsc	status,0,c
  4571  000254  D009               	goto	l4157
  4572                           
  4573                           ; BSR set to: 0
  4574                           ;doprnt.c: 758: width -= len;
  4575  000256  0100               	movlb	0	; () banked
  4576  000258  51B5               	movf	printf@len& (0+255),w,b
  4577  00025A  0100               	movlb	0	; () banked
  4578  00025C  5FBC               	subwf	printf@width& (0+255),f,b
  4579  00025E  0100               	movlb	0	; () banked
  4580  000260  51B6               	movf	(printf@len+1)& (0+255),w,b
  4581  000262  0100               	movlb	0	; () banked
  4582  000264  5BBD               	subwfb	(printf@width+1)& (0+255),f,b
  4583  000266  D005               	goto	l4159
  4584  000268                     l4157:
  4585                           
  4586                           ; BSR set to: 0
  4587                           ;doprnt.c: 759: else
  4588                           ;doprnt.c: 760: width = 0;
  4589  000268  0E00               	movlw	0
  4590  00026A  0100               	movlb	0	; () banked
  4591  00026C  6FBD               	movwf	(printf@width+1)& (0+255),b
  4592  00026E  0E00               	movlw	0
  4593  000270  6FBC               	movwf	printf@width& (0+255),b
  4594  000272                     l4159:
  4595                           
  4596                           ; BSR set to: 0
  4597                           ;doprnt.c: 762: if(!(flag & 0x08))
  4598  000272  0100               	movlb	0	; () banked
  4599  000274  A7BF               	btfss	printf@flag& (0+255),3,b
  4600  000276  D004               	goto	l4165
  4601  000278  D019               	goto	l4171
  4602  00027A                     l4163:
  4603                           
  4604                           ; BSR set to: 0
  4605                           ;doprnt.c: 765: (putch(' ') );
  4606  00027A  0E20               	movlw	32
  4607  00027C  EC2E  F01A         	call	_putch
  4608  000280                     l4165:
  4609  000280  0100               	movlb	0	; () banked
  4610  000282  07BC               	decf	printf@width& (0+255),f,b
  4611  000284  A0D8               	btfss	status,0,c
  4612  000286  07BD               	decf	(printf@width+1)& (0+255),f,b
  4613  000288  0100               	movlb	0	; () banked
  4614  00028A  29BC               	incf	printf@width& (0+255),w,b
  4615  00028C  E1F6               	bnz	l4163
  4616  00028E  0100               	movlb	0	; () banked
  4617  000290  29BD               	incf	(printf@width+1)& (0+255),w,b
  4618  000292  B4D8               	btfsc	status,2,c
  4619  000294  D00B               	goto	l4171
  4620  000296  D7F1               	goto	l4163
  4621  000298                     l4167:
  4622                           
  4623                           ; BSR set to: 0
  4624                           ;doprnt.c: 768: (putch(*cp++) );
  4625  000298  C0AC  FFD9         	movff	printf@cp,fsr2l
  4626  00029C  C0AD  FFDA         	movff	printf@cp+1,fsr2h
  4627  0002A0  50DF               	movf	indf2,w,c
  4628  0002A2  EC2E  F01A         	call	_putch
  4629  0002A6  0100               	movlb	0	; () banked
  4630  0002A8  4BAC               	infsnz	printf@cp& (0+255),f,b
  4631  0002AA  2BAD               	incf	(printf@cp+1)& (0+255),f,b
  4632  0002AC                     l4171:
  4633                           
  4634                           ; BSR set to: 0
  4635  0002AC  0100               	movlb	0	; () banked
  4636  0002AE  07B5               	decf	printf@len& (0+255),f,b
  4637  0002B0  A0D8               	btfss	status,0,c
  4638  0002B2  07B6               	decf	(printf@len+1)& (0+255),f,b
  4639  0002B4  0100               	movlb	0	; () banked
  4640  0002B6  29B5               	incf	printf@len& (0+255),w,b
  4641  0002B8  E1EF               	bnz	l4167
  4642  0002BA  0100               	movlb	0	; () banked
  4643  0002BC  29B6               	incf	(printf@len+1)& (0+255),w,b
  4644  0002BE  A4D8               	btfss	status,2,c
  4645  0002C0  D7EB               	goto	l4167
  4646                           
  4647                           ; BSR set to: 0
  4648                           ;doprnt.c: 770: if(flag & 0x08)
  4649  0002C2  0100               	movlb	0	; () banked
  4650  0002C4  B7BF               	btfsc	printf@flag& (0+255),3,b
  4651  0002C6  D004               	goto	l4177
  4652  0002C8  D358               	goto	l4387
  4653  0002CA                     l4175:
  4654                           
  4655                           ; BSR set to: 0
  4656                           ;doprnt.c: 772: (putch(' ') );
  4657  0002CA  0E20               	movlw	32
  4658  0002CC  EC2E  F01A         	call	_putch
  4659  0002D0                     l4177:
  4660  0002D0  0100               	movlb	0	; () banked
  4661  0002D2  07BC               	decf	printf@width& (0+255),f,b
  4662  0002D4  A0D8               	btfss	status,0,c
  4663  0002D6  07BD               	decf	(printf@width+1)& (0+255),f,b
  4664  0002D8  0100               	movlb	0	; () banked
  4665  0002DA  29BC               	incf	printf@width& (0+255),w,b
  4666  0002DC  E1F6               	bnz	l4175
  4667  0002DE  0100               	movlb	0	; () banked
  4668  0002E0  29BD               	incf	(printf@width+1)& (0+255),w,b
  4669  0002E2  B4D8               	btfsc	status,2,c
  4670  0002E4  D34A               	goto	l4387
  4671  0002E6  D7F1               	goto	l4175
  4672  0002E8                     l4179:
  4673                           
  4674                           ; BSR set to: 0
  4675                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4676  0002E8  C0B7  FFD9         	movff	printf@ap,fsr2l
  4677  0002EC  C0B8  FFDA         	movff	printf@ap+1,fsr2h
  4678  0002F0  50DF               	movf	indf2,w,c
  4679  0002F2  0100               	movlb	0	; () banked
  4680  0002F4  6FBE               	movwf	printf@c& (0+255),b
  4681                           
  4682                           ; BSR set to: 0
  4683  0002F6  0E02               	movlw	2
  4684  0002F8  0100               	movlb	0	; () banked
  4685  0002FA  27B7               	addwf	printf@ap& (0+255),f,b
  4686  0002FC  0E00               	movlw	0
  4687  0002FE  23B8               	addwfc	(printf@ap+1)& (0+255),f,b
  4688  000300                     l4183:
  4689                           
  4690                           ; BSR set to: 0
  4691                           ;doprnt.c: 805: cp = (char *)&c;
  4692  000300  0EBE               	movlw	low printf@c
  4693  000302  0100               	movlb	0	; () banked
  4694  000304  6FAC               	movwf	printf@cp& (0+255),b
  4695  000306  0E00               	movlw	high printf@c
  4696  000308  0100               	movlb	0	; () banked
  4697  00030A  6FAD               	movwf	(printf@cp+1)& (0+255),b
  4698                           
  4699                           ; BSR set to: 0
  4700                           ;doprnt.c: 806: len = 1;
  4701  00030C  0E00               	movlw	0
  4702  00030E  0100               	movlb	0	; () banked
  4703  000310  6FB6               	movwf	(printf@len+1)& (0+255),b
  4704  000312  0E01               	movlw	1
  4705  000314  6FB5               	movwf	printf@len& (0+255),b
  4706                           
  4707                           ;doprnt.c: 807: goto dostring;
  4708  000316  D779               	goto	l4147
  4709  000318                     l4187:
  4710                           
  4711                           ; BSR set to: 0
  4712                           ;doprnt.c: 818: flag |= 0xC0;
  4713  000318  0EC0               	movlw	192
  4714  00031A  0100               	movlb	0	; () banked
  4715  00031C  13BF               	iorwf	printf@flag& (0+255),f,b
  4716                           
  4717                           ; BSR set to: 0
  4718                           ;doprnt.c: 822: }
  4719                           
  4720                           ;doprnt.c: 819: break;
  4721  00031E  D025               	goto	l4193
  4722  000320                     l4191:
  4723  000320  C09C  FFF6         	movff	printf@f,tblptrl
  4724  000324  C09D  FFF7         	movff	printf@f+1,tblptrh
  4725  000328  0100               	movlb	0	; () banked
  4726  00032A  4B9C               	infsnz	printf@f& (0+255),f,b
  4727  00032C  2B9D               	incf	(printf@f+1)& (0+255),f,b
  4728  00032E                     	if	0	;tblptru may be non-zero
  4729  00032E                     	endif
  4730  00032E                     	if	0	;tblptru may be non-zero
  4731  00032E                     	endif
  4732  00032E  0008               	tblrd		*
  4733  000330  CFF5 F0BE          	movff	tablat,printf@c
  4734  000334  0100               	movlb	0	; () banked
  4735  000336  51BE               	movf	printf@c& (0+255),w,b
  4736                           
  4737                           ; Switch size 1, requested type "space"
  4738                           ; Number of cases is 8, Range of values is 0 to 120
  4739                           ; switch strategies available:
  4740                           ; Name         Instructions Cycles
  4741                           ; simple_byte           25    13 (average)
  4742                           ;	Chosen strategy is simple_byte
  4743  000338  0A00               	xorlw	0	; case 0
  4744  00033A  B4D8               	btfsc	status,2,c
  4745  00033C  0012               	return	
  4746  00033E  0A58               	xorlw	88	; case 88
  4747  000340  B4D8               	btfsc	status,2,c
  4748  000342  D75E               	goto	l4145
  4749  000344  0A3B               	xorlw	59	; case 99
  4750  000346  B4D8               	btfsc	status,2,c
  4751  000348  D7CF               	goto	l4179
  4752  00034A  0A07               	xorlw	7	; case 100
  4753  00034C  B4D8               	btfsc	status,2,c
  4754  00034E  D00D               	goto	l4193
  4755  000350  0A0D               	xorlw	13	; case 105
  4756  000352  B4D8               	btfsc	status,2,c
  4757  000354  D00A               	goto	l4193
  4758  000356  0A06               	xorlw	6	; case 111
  4759  000358  B4D8               	btfsc	status,2,c
  4760  00035A  D74F               	goto	l4143
  4761  00035C  0A1A               	xorlw	26	; case 117
  4762  00035E  B4D8               	btfsc	status,2,c
  4763  000360  D7DB               	goto	l4187
  4764  000362  0A0D               	xorlw	13	; case 120
  4765  000364  B4D8               	btfsc	status,2,c
  4766  000366  D74E               	goto	l492
  4767  000368  D7CB               	goto	l4183
  4768  00036A                     l4193:
  4769                           
  4770                           ; BSR set to: 0
  4771                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  4772  00036A  0EC0               	movlw	192
  4773  00036C  0100               	movlb	0	; () banked
  4774  00036E  15BF               	andwf	printf@flag& (0+255),w,b
  4775  000370  0100               	movlb	0	; () banked
  4776  000372  6FA8               	movwf	??_printf& (0+255),b
  4777  000374  0E00               	movlw	0
  4778  000376  0100               	movlb	0	; () banked
  4779  000378  15C0               	andwf	(printf@flag+1)& (0+255),w,b
  4780  00037A  0100               	movlb	0	; () banked
  4781  00037C  6FA9               	movwf	(??_printf+1)& (0+255),b
  4782  00037E  0100               	movlb	0	; () banked
  4783  000380  51A8               	movf	??_printf& (0+255),w,b
  4784  000382  0100               	movlb	0	; () banked
  4785  000384  11A9               	iorwf	(??_printf+1)& (0+255),w,b
  4786  000386  A4D8               	btfss	status,2,c
  4787  000388  D019               	goto	l4205
  4788                           
  4789                           ; BSR set to: 0
  4790                           ;doprnt.c: 1253: {
  4791                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4792  00038A  C0B7  FFD9         	movff	printf@ap,fsr2l
  4793  00038E  C0B8  FFDA         	movff	printf@ap+1,fsr2h
  4794  000392  CFDE F0B9          	movff	postinc2,printf@val
  4795  000396  CFDD F0BA          	movff	postdec2,printf@val+1
  4796                           
  4797                           ; BSR set to: 0
  4798  00039A  0E02               	movlw	2
  4799  00039C  0100               	movlb	0	; () banked
  4800  00039E  27B7               	addwf	printf@ap& (0+255),f,b
  4801  0003A0  0E00               	movlw	0
  4802  0003A2  23B8               	addwfc	(printf@ap+1)& (0+255),f,b
  4803                           
  4804                           ; BSR set to: 0
  4805                           ;doprnt.c: 1261: if((int)val < 0) {
  4806  0003A4  0100               	movlb	0	; () banked
  4807  0003A6  AFBA               	btfss	(printf@val+1)& (0+255),7,b
  4808  0003A8  D016               	goto	l4209
  4809                           
  4810                           ; BSR set to: 0
  4811                           ;doprnt.c: 1262: flag |= 0x03;
  4812  0003AA  0E03               	movlw	3
  4813  0003AC  0100               	movlb	0	; () banked
  4814  0003AE  13BF               	iorwf	printf@flag& (0+255),f,b
  4815                           
  4816                           ; BSR set to: 0
  4817                           ;doprnt.c: 1263: val = -val;
  4818  0003B0  0100               	movlb	0	; () banked
  4819  0003B2  6DB9               	negf	printf@val& (0+255),b
  4820  0003B4  1FBA               	comf	(printf@val+1)& (0+255),f,b
  4821  0003B6  B0D8               	btfsc	status,0,c
  4822  0003B8  2BBA               	incf	(printf@val+1)& (0+255),f,b
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;doprnt.c: 1264: }
  4826                           ;doprnt.c: 1266: }
  4827  0003BA  D00D               	goto	l4209
  4828  0003BC                     l4205:
  4829                           
  4830                           ; BSR set to: 0
  4831                           ;doprnt.c: 1268: else
  4832                           ;doprnt.c: 1273: {
  4833                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4834  0003BC  C0B7  FFD9         	movff	printf@ap,fsr2l
  4835  0003C0  C0B8  FFDA         	movff	printf@ap+1,fsr2h
  4836  0003C4  CFDE F0B9          	movff	postinc2,printf@val
  4837  0003C8  CFDD F0BA          	movff	postdec2,printf@val+1
  4838                           
  4839                           ; BSR set to: 0
  4840  0003CC  0E02               	movlw	2
  4841  0003CE  0100               	movlb	0	; () banked
  4842  0003D0  27B7               	addwf	printf@ap& (0+255),f,b
  4843  0003D2  0E00               	movlw	0
  4844  0003D4  23B8               	addwfc	(printf@ap+1)& (0+255),f,b
  4845  0003D6                     l4209:
  4846                           
  4847                           ; BSR set to: 0
  4848                           ;doprnt.c: 1287: }
  4849                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  4850  0003D6  0100               	movlb	0	; () banked
  4851  0003D8  51BB               	movf	printf@prec& (0+255),w,b
  4852  0003DA  0100               	movlb	0	; () banked
  4853  0003DC  A4D8               	btfss	status,2,c
  4854  0003DE  D063               	goto	l4259
  4855                           
  4856                           ; BSR set to: 0
  4857  0003E0  0100               	movlb	0	; () banked
  4858  0003E2  51B9               	movf	printf@val& (0+255),w,b
  4859  0003E4  0100               	movlb	0	; () banked
  4860  0003E6  11BA               	iorwf	(printf@val+1)& (0+255),w,b
  4861  0003E8  A4D8               	btfss	status,2,c
  4862  0003EA  D05D               	goto	l4259
  4863                           
  4864                           ; BSR set to: 0
  4865                           ;doprnt.c: 1291: prec++;
  4866  0003EC  0100               	movlb	0	; () banked
  4867  0003EE  2BBB               	incf	printf@prec& (0+255),f,b
  4868                           
  4869                           ; BSR set to: 0
  4870                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  4871  0003F0  D05A               	goto	l4259
  4872  0003F2                     l4215:
  4873                           
  4874                           ; BSR set to: 0
  4875                           ;doprnt.c: 1302: case 0xC0:
  4876                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4877  0003F2  0E01               	movlw	1
  4878  0003F4  0100               	movlb	0	; () banked
  4879  0003F6  6FBE               	movwf	printf@c& (0+255),b
  4880  0003F8                     l4217:
  4881                           
  4882                           ; BSR set to: 0
  4883  0003F8  0E05               	movlw	5
  4884  0003FA  0100               	movlb	0	; () banked
  4885  0003FC  19BE               	xorwf	printf@c& (0+255),w,b
  4886  0003FE  B4D8               	btfsc	status,2,c
  4887  000400  D061               	goto	l4261
  4888                           
  4889                           ; BSR set to: 0
  4890                           ;doprnt.c: 1306: if(val < dpowers[c])
  4891                           
  4892                           ; BSR set to: 0
  4893                           
  4894                           ; BSR set to: 0
  4895  000402  0100               	movlb	0	; () banked
  4896  000404  51BE               	movf	printf@c& (0+255),w,b
  4897  000406  0D02               	mullw	2
  4898  000408  0EA4               	movlw	low _dpowers
  4899  00040A  24F3               	addwf	prodl,w,c
  4900  00040C  6EF6               	movwf	tblptrl,c
  4901  00040E  0EFD               	movlw	high _dpowers
  4902  000410  20F4               	addwfc	prodh,w,c
  4903  000412  6EF7               	movwf	tblptrh,c
  4904  000414                     	if	0	;There are less than 3 active tblptr bytes
  4905  000414                     	endif
  4906  000414  0009               	tblrd		*+
  4907  000416  50F5               	movf	tablat,w,c
  4908  000418  0100               	movlb	0	; () banked
  4909  00041A  5DB9               	subwf	printf@val& (0+255),w,b
  4910  00041C  0009               	tblrd		*+
  4911  00041E  50F5               	movf	tablat,w,c
  4912  000420  0100               	movlb	0	; () banked
  4913  000422  59BA               	subwfb	(printf@val+1)& (0+255),w,b
  4914  000424  A0D8               	btfss	status,0,c
  4915  000426  D04E               	goto	l4261
  4916                           
  4917                           ; BSR set to: 0
  4918                           
  4919                           ; BSR set to: 0
  4920                           
  4921                           ; BSR set to: 0
  4922                           ;doprnt.c: 1307: break;
  4923  000428  0100               	movlb	0	; () banked
  4924  00042A  2BBE               	incf	printf@c& (0+255),f,b
  4925  00042C  D7E5               	goto	l4217
  4926  00042E                     l4229:
  4927                           
  4928                           ; BSR set to: 0
  4929                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  4930  00042E  0E01               	movlw	1
  4931  000430  0100               	movlb	0	; () banked
  4932  000432  6FBE               	movwf	printf@c& (0+255),b
  4933  000434                     l4231:
  4934                           
  4935                           ; BSR set to: 0
  4936  000434  0E04               	movlw	4
  4937  000436  0100               	movlb	0	; () banked
  4938  000438  19BE               	xorwf	printf@c& (0+255),w,b
  4939  00043A  B4D8               	btfsc	status,2,c
  4940  00043C  D043               	goto	l4261
  4941                           
  4942                           ; BSR set to: 0
  4943                           ;doprnt.c: 1317: if(val < hexpowers[c])
  4944                           
  4945                           ; BSR set to: 0
  4946                           
  4947                           ; BSR set to: 0
  4948  00043E  0100               	movlb	0	; () banked
  4949  000440  51BE               	movf	printf@c& (0+255),w,b
  4950  000442  0D02               	mullw	2
  4951  000444  0EAE               	movlw	low _hexpowers
  4952  000446  24F3               	addwf	prodl,w,c
  4953  000448  6EF6               	movwf	tblptrl,c
  4954  00044A  0EFD               	movlw	high _hexpowers
  4955  00044C  20F4               	addwfc	prodh,w,c
  4956  00044E  6EF7               	movwf	tblptrh,c
  4957  000450                     	if	0	;There are less than 3 active tblptr bytes
  4958  000450                     	endif
  4959  000450  0009               	tblrd		*+
  4960  000452  50F5               	movf	tablat,w,c
  4961  000454  0100               	movlb	0	; () banked
  4962  000456  5DB9               	subwf	printf@val& (0+255),w,b
  4963  000458  0009               	tblrd		*+
  4964  00045A  50F5               	movf	tablat,w,c
  4965  00045C  0100               	movlb	0	; () banked
  4966  00045E  59BA               	subwfb	(printf@val+1)& (0+255),w,b
  4967  000460  A0D8               	btfss	status,0,c
  4968  000462  D030               	goto	l4261
  4969                           
  4970                           ; BSR set to: 0
  4971                           
  4972                           ; BSR set to: 0
  4973                           
  4974                           ; BSR set to: 0
  4975                           ;doprnt.c: 1318: break;
  4976  000464  0100               	movlb	0	; () banked
  4977  000466  2BBE               	incf	printf@c& (0+255),f,b
  4978  000468  D7E5               	goto	l4231
  4979  00046A                     l4243:
  4980                           
  4981                           ; BSR set to: 0
  4982                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  4983  00046A  0E01               	movlw	1
  4984  00046C  0100               	movlb	0	; () banked
  4985  00046E  6FBE               	movwf	printf@c& (0+255),b
  4986  000470                     l4245:
  4987                           
  4988                           ; BSR set to: 0
  4989  000470  0E06               	movlw	6
  4990  000472  0100               	movlb	0	; () banked
  4991  000474  19BE               	xorwf	printf@c& (0+255),w,b
  4992  000476  B4D8               	btfsc	status,2,c
  4993  000478  D025               	goto	l4261
  4994                           
  4995                           ; BSR set to: 0
  4996                           ;doprnt.c: 1329: if(val < octpowers[c])
  4997                           
  4998                           ; BSR set to: 0
  4999                           
  5000                           ; BSR set to: 0
  5001  00047A  0100               	movlb	0	; () banked
  5002  00047C  51BE               	movf	printf@c& (0+255),w,b
  5003  00047E  0D02               	mullw	2
  5004  000480  0E98               	movlw	low _octpowers
  5005  000482  24F3               	addwf	prodl,w,c
  5006  000484  6EF6               	movwf	tblptrl,c
  5007  000486  0EFD               	movlw	high _octpowers
  5008  000488  20F4               	addwfc	prodh,w,c
  5009  00048A  6EF7               	movwf	tblptrh,c
  5010  00048C                     	if	0	;There are less than 3 active tblptr bytes
  5011  00048C                     	endif
  5012  00048C  0009               	tblrd		*+
  5013  00048E  50F5               	movf	tablat,w,c
  5014  000490  0100               	movlb	0	; () banked
  5015  000492  5DB9               	subwf	printf@val& (0+255),w,b
  5016  000494  0009               	tblrd		*+
  5017  000496  50F5               	movf	tablat,w,c
  5018  000498  0100               	movlb	0	; () banked
  5019  00049A  59BA               	subwfb	(printf@val+1)& (0+255),w,b
  5020  00049C  A0D8               	btfss	status,0,c
  5021  00049E  D012               	goto	l4261
  5022                           
  5023                           ; BSR set to: 0
  5024                           
  5025                           ; BSR set to: 0
  5026                           
  5027                           ; BSR set to: 0
  5028                           ;doprnt.c: 1330: break;
  5029  0004A0  0100               	movlb	0	; () banked
  5030  0004A2  2BBE               	incf	printf@c& (0+255),f,b
  5031  0004A4  D7E5               	goto	l4245
  5032  0004A6                     l4259:
  5033                           
  5034                           ; BSR set to: 0
  5035  0004A6  0100               	movlb	0	; () banked
  5036  0004A8  51BF               	movf	printf@flag& (0+255),w,b
  5037  0004AA  0BC0               	andlw	192
  5038                           
  5039                           ; Switch size 1, requested type "space"
  5040                           ; Number of cases is 4, Range of values is 0 to 192
  5041                           ; switch strategies available:
  5042                           ; Name         Instructions Cycles
  5043                           ; simple_byte           13     7 (average)
  5044                           ;	Chosen strategy is simple_byte
  5045  0004AC  0A00               	xorlw	0	; case 0
  5046  0004AE  B4D8               	btfsc	status,2,c
  5047  0004B0  D7A0               	goto	l4215
  5048  0004B2  0A40               	xorlw	64	; case 64
  5049  0004B4  B4D8               	btfsc	status,2,c
  5050  0004B6  D7D9               	goto	l4243
  5051  0004B8  0AC0               	xorlw	192	; case 128
  5052  0004BA  B4D8               	btfsc	status,2,c
  5053  0004BC  D7B8               	goto	l4229
  5054  0004BE  0A40               	xorlw	64	; case 192
  5055  0004C0  B4D8               	btfsc	status,2,c
  5056  0004C2  D797               	goto	l4215
  5057  0004C4                     l4261:
  5058                           
  5059                           ; BSR set to: 0
  5060                           ;doprnt.c: 1339: if(c < prec)
  5061  0004C4  0100               	movlb	0	; () banked
  5062  0004C6  51BE               	movf	printf@c& (0+255),w,b
  5063  0004C8  0A80               	xorlw	128
  5064  0004CA  0100               	movlb	0	; () banked
  5065  0004CC  6FA8               	movwf	??_printf& (0+255),b
  5066  0004CE  0100               	movlb	0	; () banked
  5067  0004D0  51BB               	movf	printf@prec& (0+255),w,b
  5068  0004D2  0A80               	xorlw	128
  5069  0004D4  0100               	movlb	0	; () banked
  5070  0004D6  5DA8               	subwf	??_printf& (0+255),w,b
  5071  0004D8  B0D8               	btfsc	status,0,c
  5072  0004DA  D003               	goto	l4265
  5073                           
  5074                           ; BSR set to: 0
  5075                           ;doprnt.c: 1340: c = prec;
  5076  0004DC  C0BB  F0BE         	movff	printf@prec,printf@c
  5077  0004E0  D00D               	goto	l4269
  5078  0004E2                     l4265:
  5079                           
  5080                           ; BSR set to: 0
  5081                           ;doprnt.c: 1341: else if(prec < c)
  5082  0004E2  0100               	movlb	0	; () banked
  5083  0004E4  51BB               	movf	printf@prec& (0+255),w,b
  5084  0004E6  0A80               	xorlw	128
  5085  0004E8  0100               	movlb	0	; () banked
  5086  0004EA  6FA8               	movwf	??_printf& (0+255),b
  5087  0004EC  0100               	movlb	0	; () banked
  5088  0004EE  51BE               	movf	printf@c& (0+255),w,b
  5089  0004F0  0A80               	xorlw	128
  5090  0004F2  0100               	movlb	0	; () banked
  5091  0004F4  5DA8               	subwf	??_printf& (0+255),w,b
  5092  0004F6  A0D8               	btfss	status,0,c
  5093                           
  5094                           ; BSR set to: 0
  5095                           ;doprnt.c: 1342: prec = c;
  5096  0004F8  C0BE  F0BB         	movff	printf@c,printf@prec
  5097  0004FC                     l4269:
  5098                           
  5099                           ; BSR set to: 0
  5100                           ;doprnt.c: 1345: if(width && flag & 0x03)
  5101  0004FC  0100               	movlb	0	; () banked
  5102  0004FE  51BC               	movf	printf@width& (0+255),w,b
  5103  000500  0100               	movlb	0	; () banked
  5104  000502  11BD               	iorwf	(printf@width+1)& (0+255),w,b
  5105  000504  B4D8               	btfsc	status,2,c
  5106  000506  D014               	goto	l4275
  5107                           
  5108                           ; BSR set to: 0
  5109  000508  0E03               	movlw	3
  5110  00050A  0100               	movlb	0	; () banked
  5111  00050C  15BF               	andwf	printf@flag& (0+255),w,b
  5112  00050E  0100               	movlb	0	; () banked
  5113  000510  6FA8               	movwf	??_printf& (0+255),b
  5114  000512  0E00               	movlw	0
  5115  000514  0100               	movlb	0	; () banked
  5116  000516  15C0               	andwf	(printf@flag+1)& (0+255),w,b
  5117  000518  0100               	movlb	0	; () banked
  5118  00051A  6FA9               	movwf	(??_printf+1)& (0+255),b
  5119  00051C  0100               	movlb	0	; () banked
  5120  00051E  51A8               	movf	??_printf& (0+255),w,b
  5121  000520  0100               	movlb	0	; () banked
  5122  000522  11A9               	iorwf	(??_printf+1)& (0+255),w,b
  5123  000524  B4D8               	btfsc	status,2,c
  5124  000526  D004               	goto	l4275
  5125                           
  5126                           ; BSR set to: 0
  5127                           ;doprnt.c: 1346: width--;
  5128  000528  0100               	movlb	0	; () banked
  5129  00052A  07BC               	decf	printf@width& (0+255),f,b
  5130  00052C  A0D8               	btfss	status,0,c
  5131  00052E  07BD               	decf	(printf@width+1)& (0+255),f,b
  5132  000530                     l4275:
  5133                           
  5134                           ; BSR set to: 0
  5135                           ;doprnt.c: 1348: if(flag & 0x4000) {
  5136  000530  0100               	movlb	0	; () banked
  5137  000532  ADC0               	btfss	(printf@flag+1)& (0+255),6,b
  5138  000534  D021               	goto	l4283
  5139                           
  5140                           ; BSR set to: 0
  5141                           ;doprnt.c: 1349: if(width > prec)
  5142  000536  0E80               	movlw	128
  5143  000538  0100               	movlb	0	; () banked
  5144  00053A  BFBB               	btfsc	printf@prec& (0+255),7,b
  5145  00053C  0E7F               	movlw	127
  5146  00053E  0100               	movlb	0	; () banked
  5147  000540  6FA8               	movwf	??_printf& (0+255),b
  5148  000542  0100               	movlb	0	; () banked
  5149  000544  51BC               	movf	printf@width& (0+255),w,b
  5150  000546  0100               	movlb	0	; () banked
  5151  000548  5DBB               	subwf	printf@prec& (0+255),w,b
  5152  00054A  0100               	movlb	0	; () banked
  5153  00054C  51BD               	movf	(printf@width+1)& (0+255),w,b
  5154  00054E  0A80               	xorlw	128
  5155  000550  0100               	movlb	0	; () banked
  5156  000552  59A8               	subwfb	??_printf& (0+255),w,b
  5157  000554  B0D8               	btfsc	status,0,c
  5158  000556  D00B               	goto	l4281
  5159                           
  5160                           ; BSR set to: 0
  5161                           ;doprnt.c: 1350: width -= prec;
  5162  000558  0100               	movlb	0	; () banked
  5163  00055A  51BB               	movf	printf@prec& (0+255),w,b
  5164  00055C  0100               	movlb	0	; () banked
  5165  00055E  5FBC               	subwf	printf@width& (0+255),f,b
  5166  000560  0E00               	movlw	0
  5167  000562  0100               	movlb	0	; () banked
  5168  000564  BFBB               	btfsc	printf@prec& (0+255),7,b
  5169  000566  0EFF               	movlw	255
  5170  000568  0100               	movlb	0	; () banked
  5171  00056A  5BBD               	subwfb	(printf@width+1)& (0+255),f,b
  5172  00056C  D005               	goto	l4283
  5173  00056E                     l4281:
  5174                           
  5175                           ; BSR set to: 0
  5176                           ;doprnt.c: 1351: else
  5177                           ;doprnt.c: 1352: width = 0;
  5178  00056E  0E00               	movlw	0
  5179  000570  0100               	movlb	0	; () banked
  5180  000572  6FBD               	movwf	(printf@width+1)& (0+255),b
  5181  000574  0E00               	movlw	0
  5182  000576  6FBC               	movwf	printf@width& (0+255),b
  5183  000578                     l4283:
  5184                           
  5185                           ; BSR set to: 0
  5186                           ;doprnt.c: 1353: }
  5187                           ;doprnt.c: 1357: if((flag & (
  5188                           ;doprnt.c: 1359: 0x04|
  5189                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  5190  000578  0EC4               	movlw	196
  5191  00057A  0100               	movlb	0	; () banked
  5192  00057C  6FA8               	movwf	??_printf& (0+255),b
  5193  00057E  0E08               	movlw	8
  5194  000580  0100               	movlb	0	; () banked
  5195  000582  6FA9               	movwf	(??_printf+1)& (0+255),b
  5196  000584  C0BF  F0AA         	movff	printf@flag,??_printf+2
  5197  000588  C0C0  F0AB         	movff	printf@flag+1,??_printf+3
  5198  00058C  0100               	movlb	0	; () banked
  5199  00058E  51A8               	movf	??_printf& (0+255),w,b
  5200  000590  0100               	movlb	0	; () banked
  5201  000592  17AA               	andwf	(??_printf+2)& (0+255),f,b
  5202  000594  0100               	movlb	0	; () banked
  5203  000596  51A9               	movf	(??_printf+1)& (0+255),w,b
  5204  000598  0100               	movlb	0	; () banked
  5205  00059A  17AB               	andwf	(??_printf+3)& (0+255),f,b
  5206  00059C  0E40               	movlw	64
  5207  00059E  0100               	movlb	0	; () banked
  5208  0005A0  19AA               	xorwf	(??_printf+2)& (0+255),w,b
  5209  0005A2  E110               	bnz	l4289
  5210  0005A4  0E08               	movlw	8
  5211  0005A6  0100               	movlb	0	; () banked
  5212  0005A8  19AB               	xorwf	(??_printf+3)& (0+255),w,b
  5213  0005AA  A4D8               	btfss	status,2,c
  5214  0005AC  D00B               	goto	l4289
  5215                           
  5216                           ; BSR set to: 0
  5217                           ;doprnt.c: 1362: if(width)
  5218  0005AE  0100               	movlb	0	; () banked
  5219  0005B0  51BC               	movf	printf@width& (0+255),w,b
  5220  0005B2  0100               	movlb	0	; () banked
  5221  0005B4  11BD               	iorwf	(printf@width+1)& (0+255),w,b
  5222  0005B6  B4D8               	btfsc	status,2,c
  5223  0005B8  D036               	goto	l4297
  5224                           
  5225                           ; BSR set to: 0
  5226                           ;doprnt.c: 1363: width--;
  5227  0005BA  0100               	movlb	0	; () banked
  5228  0005BC  07BC               	decf	printf@width& (0+255),f,b
  5229  0005BE  A0D8               	btfss	status,0,c
  5230  0005C0  07BD               	decf	(printf@width+1)& (0+255),f,b
  5231                           
  5232                           ; BSR set to: 0
  5233                           ;doprnt.c: 1364: } else
  5234  0005C2  D031               	goto	l4297
  5235  0005C4                     l4289:
  5236                           
  5237                           ; BSR set to: 0
  5238                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  5239  0005C4  0EC0               	movlw	192
  5240  0005C6  0100               	movlb	0	; () banked
  5241  0005C8  6FA8               	movwf	??_printf& (0+255),b
  5242  0005CA  0E08               	movlw	8
  5243  0005CC  0100               	movlb	0	; () banked
  5244  0005CE  6FA9               	movwf	(??_printf+1)& (0+255),b
  5245  0005D0  C0BF  F0AA         	movff	printf@flag,??_printf+2
  5246  0005D4  C0C0  F0AB         	movff	printf@flag+1,??_printf+3
  5247  0005D8  0100               	movlb	0	; () banked
  5248  0005DA  51A8               	movf	??_printf& (0+255),w,b
  5249  0005DC  0100               	movlb	0	; () banked
  5250  0005DE  17AA               	andwf	(??_printf+2)& (0+255),f,b
  5251  0005E0  0100               	movlb	0	; () banked
  5252  0005E2  51A9               	movf	(??_printf+1)& (0+255),w,b
  5253  0005E4  0100               	movlb	0	; () banked
  5254  0005E6  17AB               	andwf	(??_printf+3)& (0+255),f,b
  5255  0005E8  0E80               	movlw	128
  5256  0005EA  0100               	movlb	0	; () banked
  5257  0005EC  19AA               	xorwf	(??_printf+2)& (0+255),w,b
  5258  0005EE  E11B               	bnz	l4297
  5259  0005F0  0E08               	movlw	8
  5260  0005F2  0100               	movlb	0	; () banked
  5261  0005F4  19AB               	xorwf	(??_printf+3)& (0+255),w,b
  5262  0005F6  A4D8               	btfss	status,2,c
  5263  0005F8  D016               	goto	l4297
  5264                           
  5265                           ; BSR set to: 0
  5266                           ;doprnt.c: 1372: if(width > 2)
  5267  0005FA  0100               	movlb	0	; () banked
  5268  0005FC  BFBD               	btfsc	(printf@width+1)& (0+255),7,b
  5269  0005FE  D00E               	goto	l4295
  5270  000600  0100               	movlb	0	; () banked
  5271  000602  51BD               	movf	(printf@width+1)& (0+255),w,b
  5272  000604  E105               	bnz	u4120
  5273  000606  0E03               	movlw	3
  5274  000608  0100               	movlb	0	; () banked
  5275  00060A  5DBC               	subwf	printf@width& (0+255),w,b
  5276  00060C  A0D8               	btfss	status,0,c
  5277  00060E  D006               	goto	l4295
  5278  000610                     u4120:
  5279                           
  5280                           ; BSR set to: 0
  5281                           ;doprnt.c: 1373: width -= 2;
  5282  000610  0100               	movlb	0	; () banked
  5283  000612  0EFE               	movlw	254
  5284  000614  27BC               	addwf	printf@width& (0+255),f,b
  5285  000616  0EFF               	movlw	255
  5286  000618  23BD               	addwfc	(printf@width+1)& (0+255),f,b
  5287  00061A  D005               	goto	l4297
  5288  00061C                     l4295:
  5289                           
  5290                           ; BSR set to: 0
  5291                           ;doprnt.c: 1374: else
  5292                           ;doprnt.c: 1375: width = 0;
  5293  00061C  0E00               	movlw	0
  5294  00061E  0100               	movlb	0	; () banked
  5295  000620  6FBD               	movwf	(printf@width+1)& (0+255),b
  5296  000622  0E00               	movlw	0
  5297  000624  6FBC               	movwf	printf@width& (0+255),b
  5298  000626                     l4297:
  5299                           
  5300                           ; BSR set to: 0
  5301                           ;doprnt.c: 1376: }
  5302                           ;doprnt.c: 1381: if(width > c)
  5303  000626  0E80               	movlw	128
  5304  000628  0100               	movlb	0	; () banked
  5305  00062A  BFBE               	btfsc	printf@c& (0+255),7,b
  5306  00062C  0E7F               	movlw	127
  5307  00062E  0100               	movlb	0	; () banked
  5308  000630  6FA8               	movwf	??_printf& (0+255),b
  5309  000632  0100               	movlb	0	; () banked
  5310  000634  51BC               	movf	printf@width& (0+255),w,b
  5311  000636  0100               	movlb	0	; () banked
  5312  000638  5DBE               	subwf	printf@c& (0+255),w,b
  5313  00063A  0100               	movlb	0	; () banked
  5314  00063C  51BD               	movf	(printf@width+1)& (0+255),w,b
  5315  00063E  0A80               	xorlw	128
  5316  000640  0100               	movlb	0	; () banked
  5317  000642  59A8               	subwfb	??_printf& (0+255),w,b
  5318  000644  B0D8               	btfsc	status,0,c
  5319  000646  D00B               	goto	l4301
  5320                           
  5321                           ; BSR set to: 0
  5322                           ;doprnt.c: 1382: width -= c;
  5323  000648  0100               	movlb	0	; () banked
  5324  00064A  51BE               	movf	printf@c& (0+255),w,b
  5325  00064C  0100               	movlb	0	; () banked
  5326  00064E  5FBC               	subwf	printf@width& (0+255),f,b
  5327  000650  0E00               	movlw	0
  5328  000652  0100               	movlb	0	; () banked
  5329  000654  BFBE               	btfsc	printf@c& (0+255),7,b
  5330  000656  0EFF               	movlw	255
  5331  000658  0100               	movlb	0	; () banked
  5332  00065A  5BBD               	subwfb	(printf@width+1)& (0+255),f,b
  5333  00065C  D005               	goto	l4303
  5334  00065E                     l4301:
  5335                           
  5336                           ; BSR set to: 0
  5337                           ;doprnt.c: 1383: else
  5338                           ;doprnt.c: 1384: width = 0;
  5339  00065E  0E00               	movlw	0
  5340  000660  0100               	movlb	0	; () banked
  5341  000662  6FBD               	movwf	(printf@width+1)& (0+255),b
  5342  000664  0E00               	movlw	0
  5343  000666  6FBC               	movwf	printf@width& (0+255),b
  5344  000668                     l4303:
  5345                           
  5346                           ; BSR set to: 0
  5347                           ;doprnt.c: 1387: if(flag & 0x04) {
  5348  000668  0100               	movlb	0	; () banked
  5349  00066A  A5BF               	btfss	printf@flag& (0+255),2,b
  5350  00066C  D058               	goto	l4329
  5351                           
  5352                           ; BSR set to: 0
  5353                           ;doprnt.c: 1392: if(flag & 0x03)
  5354  00066E  0E03               	movlw	3
  5355  000670  0100               	movlb	0	; () banked
  5356  000672  15BF               	andwf	printf@flag& (0+255),w,b
  5357  000674  0100               	movlb	0	; () banked
  5358  000676  6FA8               	movwf	??_printf& (0+255),b
  5359  000678  0E00               	movlw	0
  5360  00067A  0100               	movlb	0	; () banked
  5361  00067C  15C0               	andwf	(printf@flag+1)& (0+255),w,b
  5362  00067E  0100               	movlb	0	; () banked
  5363  000680  6FA9               	movwf	(??_printf+1)& (0+255),b
  5364  000682  0100               	movlb	0	; () banked
  5365  000684  51A8               	movf	??_printf& (0+255),w,b
  5366  000686  0100               	movlb	0	; () banked
  5367  000688  11A9               	iorwf	(??_printf+1)& (0+255),w,b
  5368  00068A  B4D8               	btfsc	status,2,c
  5369  00068C  D004               	goto	l546
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;doprnt.c: 1393: (putch('-') );
  5373  00068E  0E2D               	movlw	45
  5374  000690  EC2E  F01A         	call	_putch
  5375  000694  D036               	goto	l4323
  5376  000696                     l546:
  5377                           
  5378                           ; BSR set to: 0
  5379                           ;doprnt.c: 1396: else
  5380                           ;doprnt.c: 1399: if(flag & 0x01)
  5381  000696  0100               	movlb	0	; () banked
  5382  000698  A1BF               	btfss	printf@flag& (0+255),0,b
  5383  00069A  D004               	goto	l4311
  5384                           
  5385                           ; BSR set to: 0
  5386                           ;doprnt.c: 1400: (putch(' ') );
  5387  00069C  0E20               	movlw	32
  5388  00069E  EC2E  F01A         	call	_putch
  5389  0006A2  D02F               	goto	l4323
  5390  0006A4                     l4311:
  5391                           
  5392                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  5393  0006A4  0EC0               	movlw	192
  5394  0006A6  0100               	movlb	0	; () banked
  5395  0006A8  6FA8               	movwf	??_printf& (0+255),b
  5396  0006AA  0E08               	movlw	8
  5397  0006AC  0100               	movlb	0	; () banked
  5398  0006AE  6FA9               	movwf	(??_printf+1)& (0+255),b
  5399  0006B0  C0BF  F0AA         	movff	printf@flag,??_printf+2
  5400  0006B4  C0C0  F0AB         	movff	printf@flag+1,??_printf+3
  5401  0006B8  0100               	movlb	0	; () banked
  5402  0006BA  51A8               	movf	??_printf& (0+255),w,b
  5403  0006BC  0100               	movlb	0	; () banked
  5404  0006BE  17AA               	andwf	(??_printf+2)& (0+255),f,b
  5405  0006C0  0100               	movlb	0	; () banked
  5406  0006C2  51A9               	movf	(??_printf+1)& (0+255),w,b
  5407  0006C4  0100               	movlb	0	; () banked
  5408  0006C6  17AB               	andwf	(??_printf+3)& (0+255),f,b
  5409  0006C8  0E80               	movlw	128
  5410  0006CA  0100               	movlb	0	; () banked
  5411  0006CC  19AA               	xorwf	(??_printf+2)& (0+255),w,b
  5412  0006CE  E119               	bnz	l4323
  5413  0006D0  0E08               	movlw	8
  5414  0006D2  0100               	movlb	0	; () banked
  5415  0006D4  19AB               	xorwf	(??_printf+3)& (0+255),w,b
  5416  0006D6  A4D8               	btfss	status,2,c
  5417  0006D8  D014               	goto	l4323
  5418                           
  5419                           ; BSR set to: 0
  5420                           ;doprnt.c: 1404: (putch('0') );
  5421  0006DA  0E30               	movlw	48
  5422  0006DC  EC2E  F01A         	call	_putch
  5423                           
  5424                           ;doprnt.c: 1406: (putch(flag & 0x20 ? 'X' : 'x') );
  5425  0006E0  0100               	movlb	0	; () banked
  5426  0006E2  BBBF               	btfsc	printf@flag& (0+255),5,b
  5427  0006E4  D005               	goto	l4319
  5428                           
  5429                           ; BSR set to: 0
  5430  0006E6  0E00               	movlw	0
  5431  0006E8  0100               	movlb	0	; () banked
  5432  0006EA  6FAF               	movwf	(_printf$741+1)& (0+255),b
  5433  0006EC  0E78               	movlw	120
  5434  0006EE  D004               	goto	L6
  5435  0006F0                     l4319:
  5436                           
  5437                           ; BSR set to: 0
  5438  0006F0  0E00               	movlw	0
  5439  0006F2  0100               	movlb	0	; () banked
  5440  0006F4  6FAF               	movwf	(_printf$741+1)& (0+255),b
  5441  0006F6  0E58               	movlw	88
  5442  0006F8                     L6:
  5443  0006F8  6FAE               	movwf	_printf$741& (0+255),b
  5444                           
  5445                           ; BSR set to: 0
  5446                           
  5447                           ; BSR set to: 0
  5448  0006FA  0100               	movlb	0	; () banked
  5449  0006FC  51AE               	movf	_printf$741& (0+255),w,b
  5450  0006FE  EC2E  F01A         	call	_putch
  5451  000702                     l4323:
  5452                           
  5453                           ;doprnt.c: 1412: }
  5454                           ;doprnt.c: 1415: if(width)
  5455  000702  0100               	movlb	0	; () banked
  5456  000704  51BC               	movf	printf@width& (0+255),w,b
  5457  000706  0100               	movlb	0	; () banked
  5458  000708  11BD               	iorwf	(printf@width+1)& (0+255),w,b
  5459  00070A  B4D8               	btfsc	status,2,c
  5460  00070C  D116               	goto	l4379
  5461                           
  5462                           ; BSR set to: 0
  5463                           ;doprnt.c: 1417: (putch('0') );
  5464                           
  5465                           ; BSR set to: 0
  5466                           
  5467                           ;doprnt.c: 1416: do
  5468  00070E  0E30               	movlw	48
  5469  000710  EC2E  F01A         	call	_putch
  5470                           
  5471                           ;doprnt.c: 1418: while(--width);
  5472  000714  0100               	movlb	0	; () banked
  5473  000716  07BC               	decf	printf@width& (0+255),f,b
  5474  000718  A0D8               	btfss	status,0,c
  5475  00071A  07BD               	decf	(printf@width+1)& (0+255),f,b
  5476  00071C  D7F2               	goto	l4323
  5477  00071E                     l4329:
  5478                           
  5479                           ; BSR set to: 0
  5480                           ;doprnt.c: 1422: {
  5481                           ;doprnt.c: 1424: if(width
  5482                           ;doprnt.c: 1426: && !(flag & 0x08)
  5483                           ;doprnt.c: 1428: )
  5484  00071E  0100               	movlb	0	; () banked
  5485  000720  51BC               	movf	printf@width& (0+255),w,b
  5486  000722  0100               	movlb	0	; () banked
  5487  000724  11BD               	iorwf	(printf@width+1)& (0+255),w,b
  5488  000726  B4D8               	btfsc	status,2,c
  5489  000728  D010               	goto	l4337
  5490                           
  5491                           ; BSR set to: 0
  5492  00072A  0100               	movlb	0	; () banked
  5493  00072C  B7BF               	btfsc	printf@flag& (0+255),3,b
  5494  00072E  D00D               	goto	l4337
  5495  000730                     l4333:
  5496                           
  5497                           ; BSR set to: 0
  5498                           ;doprnt.c: 1430: (putch(' ') );
  5499  000730  0E20               	movlw	32
  5500  000732  EC2E  F01A         	call	_putch
  5501                           
  5502                           ;doprnt.c: 1431: while(--width);
  5503  000736  0100               	movlb	0	; () banked
  5504  000738  07BC               	decf	printf@width& (0+255),f,b
  5505  00073A  A0D8               	btfss	status,0,c
  5506  00073C  07BD               	decf	(printf@width+1)& (0+255),f,b
  5507  00073E  0100               	movlb	0	; () banked
  5508  000740  51BC               	movf	printf@width& (0+255),w,b
  5509  000742  0100               	movlb	0	; () banked
  5510  000744  11BD               	iorwf	(printf@width+1)& (0+255),w,b
  5511  000746  A4D8               	btfss	status,2,c
  5512  000748  D7F3               	goto	l4333
  5513  00074A                     l4337:
  5514                           
  5515                           ; BSR set to: 0
  5516                           ;doprnt.c: 1438: if(flag & 0x03)
  5517  00074A  0E03               	movlw	3
  5518  00074C  0100               	movlb	0	; () banked
  5519  00074E  15BF               	andwf	printf@flag& (0+255),w,b
  5520  000750  0100               	movlb	0	; () banked
  5521  000752  6FA8               	movwf	??_printf& (0+255),b
  5522  000754  0E00               	movlw	0
  5523  000756  0100               	movlb	0	; () banked
  5524  000758  15C0               	andwf	(printf@flag+1)& (0+255),w,b
  5525  00075A  0100               	movlb	0	; () banked
  5526  00075C  6FA9               	movwf	(??_printf+1)& (0+255),b
  5527  00075E  0100               	movlb	0	; () banked
  5528  000760  51A8               	movf	??_printf& (0+255),w,b
  5529  000762  0100               	movlb	0	; () banked
  5530  000764  11A9               	iorwf	(??_printf+1)& (0+255),w,b
  5531  000766  B4D8               	btfsc	status,2,c
  5532  000768  D004               	goto	l562
  5533                           
  5534                           ; BSR set to: 0
  5535                           ;doprnt.c: 1439: (putch('-') );
  5536  00076A  0E2D               	movlw	45
  5537  00076C  EC2E  F01A         	call	_putch
  5538  000770  D006               	goto	l4343
  5539  000772                     l562:
  5540                           
  5541                           ; BSR set to: 0
  5542                           ;doprnt.c: 1443: else if(flag & 0x01)
  5543  000772  0100               	movlb	0	; () banked
  5544  000774  A1BF               	btfss	printf@flag& (0+255),0,b
  5545  000776  D003               	goto	l4343
  5546                           
  5547                           ; BSR set to: 0
  5548                           ;doprnt.c: 1444: (putch(' ') );
  5549  000778  0E20               	movlw	32
  5550  00077A  EC2E  F01A         	call	_putch
  5551  00077E                     l4343:
  5552                           
  5553                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  5554  00077E  0EC0               	movlw	192
  5555  000780  0100               	movlb	0	; () banked
  5556  000782  6FA8               	movwf	??_printf& (0+255),b
  5557  000784  0E08               	movlw	8
  5558  000786  0100               	movlb	0	; () banked
  5559  000788  6FA9               	movwf	(??_printf+1)& (0+255),b
  5560  00078A  C0BF  F0AA         	movff	printf@flag,??_printf+2
  5561  00078E  C0C0  F0AB         	movff	printf@flag+1,??_printf+3
  5562  000792  0100               	movlb	0	; () banked
  5563  000794  51A8               	movf	??_printf& (0+255),w,b
  5564  000796  0100               	movlb	0	; () banked
  5565  000798  17AA               	andwf	(??_printf+2)& (0+255),f,b
  5566  00079A  0100               	movlb	0	; () banked
  5567  00079C  51A9               	movf	(??_printf+1)& (0+255),w,b
  5568  00079E  0100               	movlb	0	; () banked
  5569  0007A0  17AB               	andwf	(??_printf+3)& (0+255),f,b
  5570  0007A2  0E40               	movlw	64
  5571  0007A4  0100               	movlb	0	; () banked
  5572  0007A6  19AA               	xorwf	(??_printf+2)& (0+255),w,b
  5573  0007A8  E109               	bnz	l4347
  5574  0007AA  0E08               	movlw	8
  5575  0007AC  0100               	movlb	0	; () banked
  5576  0007AE  19AB               	xorwf	(??_printf+3)& (0+255),w,b
  5577  0007B0  A4D8               	btfss	status,2,c
  5578  0007B2  D004               	goto	l4347
  5579                           
  5580                           ; BSR set to: 0
  5581                           ;doprnt.c: 1449: (putch('0') );
  5582  0007B4  0E30               	movlw	48
  5583  0007B6  EC2E  F01A         	call	_putch
  5584  0007BA  D0BF               	goto	l4379
  5585  0007BC                     l4347:
  5586                           
  5587                           ;doprnt.c: 1450: else
  5588                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  5589  0007BC  0EC0               	movlw	192
  5590  0007BE  0100               	movlb	0	; () banked
  5591  0007C0  6FA8               	movwf	??_printf& (0+255),b
  5592  0007C2  0E08               	movlw	8
  5593  0007C4  0100               	movlb	0	; () banked
  5594  0007C6  6FA9               	movwf	(??_printf+1)& (0+255),b
  5595  0007C8  C0BF  F0AA         	movff	printf@flag,??_printf+2
  5596  0007CC  C0C0  F0AB         	movff	printf@flag+1,??_printf+3
  5597  0007D0  0100               	movlb	0	; () banked
  5598  0007D2  51A8               	movf	??_printf& (0+255),w,b
  5599  0007D4  0100               	movlb	0	; () banked
  5600  0007D6  17AA               	andwf	(??_printf+2)& (0+255),f,b
  5601  0007D8  0100               	movlb	0	; () banked
  5602  0007DA  51A9               	movf	(??_printf+1)& (0+255),w,b
  5603  0007DC  0100               	movlb	0	; () banked
  5604  0007DE  17AB               	andwf	(??_printf+3)& (0+255),f,b
  5605  0007E0  0E80               	movlw	128
  5606  0007E2  0100               	movlb	0	; () banked
  5607  0007E4  19AA               	xorwf	(??_printf+2)& (0+255),w,b
  5608  0007E6  E104               	bnz	u4271
  5609  0007E8  0E08               	movlw	8
  5610  0007EA  0100               	movlb	0	; () banked
  5611  0007EC  19AB               	xorwf	(??_printf+3)& (0+255),w,b
  5612  0007EE  A4D8               	btfss	status,2,c
  5613  0007F0                     u4271:
  5614  0007F0  D0A4               	goto	l4379
  5615                           
  5616                           ; BSR set to: 0
  5617                           ;doprnt.c: 1458: (putch('0') );
  5618  0007F2  0E30               	movlw	48
  5619  0007F4  EC2E  F01A         	call	_putch
  5620                           
  5621                           ;doprnt.c: 1460: (putch(flag & 0x20 ? 'X' : 'x') );
  5622  0007F8  0100               	movlb	0	; () banked
  5623  0007FA  BBBF               	btfsc	printf@flag& (0+255),5,b
  5624  0007FC  D005               	goto	l4355
  5625                           
  5626                           ; BSR set to: 0
  5627  0007FE  0E00               	movlw	0
  5628  000800  0100               	movlb	0	; () banked
  5629  000802  6FB1               	movwf	(_printf$742+1)& (0+255),b
  5630  000804  0E78               	movlw	120
  5631  000806  D004               	goto	L7
  5632  000808                     l4355:
  5633                           
  5634                           ; BSR set to: 0
  5635  000808  0E00               	movlw	0
  5636  00080A  0100               	movlb	0	; () banked
  5637  00080C  6FB1               	movwf	(_printf$742+1)& (0+255),b
  5638  00080E  0E58               	movlw	88
  5639  000810                     L7:
  5640  000810  6FB0               	movwf	_printf$742& (0+255),b
  5641                           
  5642                           ; BSR set to: 0
  5643                           
  5644                           ; BSR set to: 0
  5645  000812  0100               	movlb	0	; () banked
  5646  000814  51B0               	movf	_printf$742& (0+255),w,b
  5647  000816  EC2E  F01A         	call	_putch
  5648                           
  5649                           ;doprnt.c: 1466: }
  5650                           ;doprnt.c: 1469: }
  5651                           ;doprnt.c: 1474: while(prec--) {
  5652  00081A  D08F               	goto	l4379
  5653  00081C                     l4359:
  5654                           
  5655                           ;doprnt.c: 1486: case 0xC0:
  5656                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5657  00081C  0100               	movlb	0	; () banked
  5658  00081E  51BB               	movf	printf@prec& (0+255),w,b
  5659  000820  0D02               	mullw	2
  5660  000822  0EA4               	movlw	low _dpowers
  5661  000824  24F3               	addwf	prodl,w,c
  5662  000826  6EF6               	movwf	tblptrl,c
  5663  000828  0EFD               	movlw	high _dpowers
  5664  00082A  20F4               	addwfc	prodh,w,c
  5665  00082C  6EF7               	movwf	tblptrh,c
  5666  00082E                     	if	0	;There are less than 3 active tblptr bytes
  5667  00082E                     	endif
  5668  00082E  0009               	tblrd		*+
  5669  000830  CFF5 F092          	movff	tablat,___lwdiv@divisor
  5670  000834  000A               	tblrd		*-
  5671  000836  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  5672  00083A  C0B9  F090         	movff	printf@val,___lwdiv@dividend
  5673  00083E  C0BA  F091         	movff	printf@val+1,___lwdiv@dividend+1
  5674  000842  EC76  F016         	call	___lwdiv	;wreg free
  5675  000846  C090  F097         	movff	?___lwdiv,___lwmod@dividend
  5676  00084A  C091  F098         	movff	?___lwdiv+1,___lwmod@dividend+1
  5677  00084E  0E00               	movlw	0
  5678  000850  0100               	movlb	0	; () banked
  5679  000852  6F9A               	movwf	(___lwmod@divisor+1)& (0+255),b
  5680  000854  0E0A               	movlw	10
  5681  000856  6F99               	movwf	___lwmod@divisor& (0+255),b
  5682  000858  EC8E  F017         	call	___lwmod	;wreg free
  5683  00085C  0100               	movlb	0	; () banked
  5684  00085E  5197               	movf	?___lwmod& (0+255),w,b
  5685  000860  D055               	goto	L8
  5686  000862                     l4361:
  5687                           
  5688                           ; BSR set to: 0
  5689                           ;doprnt.c: 1499: {
  5690                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  5691  000862  C0B9  F090         	movff	printf@val,___lwdiv@dividend
  5692  000866  C0BA  F091         	movff	printf@val+1,___lwdiv@dividend+1
  5693  00086A  0100               	movlb	0	; () banked
  5694  00086C  51BB               	movf	printf@prec& (0+255),w,b
  5695  00086E  0D02               	mullw	2
  5696  000870  0EAE               	movlw	low _hexpowers
  5697  000872  24F3               	addwf	prodl,w,c
  5698  000874  6EF6               	movwf	tblptrl,c
  5699  000876  0EFD               	movlw	high _hexpowers
  5700  000878  20F4               	addwfc	prodh,w,c
  5701  00087A  6EF7               	movwf	tblptrh,c
  5702  00087C                     	if	0	;There are less than 3 active tblptr bytes
  5703  00087C                     	endif
  5704  00087C  0009               	tblrd		*+
  5705  00087E  CFF5 F092          	movff	tablat,___lwdiv@divisor
  5706  000882  000A               	tblrd		*-
  5707  000884  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  5708  000888  EC76  F016         	call	___lwdiv	;wreg free
  5709  00088C  0100               	movlb	0	; () banked
  5710  00088E  5190               	movf	?___lwdiv& (0+255),w,b
  5711  000890  0B0F               	andlw	15
  5712  000892  0100               	movlb	0	; () banked
  5713  000894  6FB4               	movwf	printf@idx& (0+255),b
  5714                           
  5715                           ; BSR set to: 0
  5716                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  5717  000896  0100               	movlb	0	; () banked
  5718  000898  BBBF               	btfsc	printf@flag& (0+255),5,b
  5719  00089A  D005               	goto	l4367
  5720                           
  5721                           ; BSR set to: 0
  5722  00089C  0E87               	movlw	low STR_45
  5723  00089E  0100               	movlb	0	; () banked
  5724  0008A0  6FB2               	movwf	_printf$748& (0+255),b
  5725  0008A2  0EFF               	movlw	high STR_45
  5726  0008A4  D004               	goto	L9
  5727  0008A6                     l4367:
  5728                           
  5729                           ; BSR set to: 0
  5730  0008A6  0E76               	movlw	low STR_44
  5731  0008A8  0100               	movlb	0	; () banked
  5732  0008AA  6FB2               	movwf	_printf$748& (0+255),b
  5733  0008AC  0EFF               	movlw	high STR_44
  5734  0008AE                     L9:
  5735  0008AE  0100               	movlb	0	; () banked
  5736  0008B0  6FB3               	movwf	(_printf$748+1)& (0+255),b
  5737                           
  5738                           ; BSR set to: 0
  5739                           
  5740                           ; BSR set to: 0
  5741  0008B2  0100               	movlb	0	; () banked
  5742  0008B4  51B4               	movf	printf@idx& (0+255),w,b
  5743  0008B6  0D01               	mullw	1
  5744  0008B8  C0B2  F0A8         	movff	_printf$748,??_printf
  5745  0008BC  C0B3  F0A9         	movff	_printf$748+1,??_printf+1
  5746  0008C0  50F3               	movf	prodl,w,c
  5747  0008C2  0100               	movlb	0	; () banked
  5748  0008C4  27A8               	addwf	??_printf& (0+255),f,b
  5749  0008C6  50F4               	movf	prodh,w,c
  5750  0008C8  0100               	movlb	0	; () banked
  5751  0008CA  23A9               	addwfc	(??_printf+1)& (0+255),f,b
  5752  0008CC  C0A8  FFF6         	movff	??_printf,tblptrl
  5753  0008D0  C0A9  FFF7         	movff	??_printf+1,tblptrh
  5754  0008D4                     	if	0	;tblptru may be non-zero
  5755  0008D4                     	endif
  5756  0008D4                     	if	0	;tblptru may be non-zero
  5757  0008D4                     	endif
  5758  0008D4  0008               	tblrd		*
  5759  0008D6  CFF5 F0BE          	movff	tablat,printf@c
  5760                           
  5761                           ;doprnt.c: 1508: }
  5762                           ;doprnt.c: 1510: break;
  5763  0008DA  D02B               	goto	l4377
  5764  0008DC                     l4371:
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  5768  0008DC  C0B9  F090         	movff	printf@val,___lwdiv@dividend
  5769  0008E0  C0BA  F091         	movff	printf@val+1,___lwdiv@dividend+1
  5770  0008E4  0100               	movlb	0	; () banked
  5771  0008E6  51BB               	movf	printf@prec& (0+255),w,b
  5772  0008E8  0D02               	mullw	2
  5773  0008EA  0E98               	movlw	low _octpowers
  5774  0008EC  24F3               	addwf	prodl,w,c
  5775  0008EE  6EF6               	movwf	tblptrl,c
  5776  0008F0  0EFD               	movlw	high _octpowers
  5777  0008F2  20F4               	addwfc	prodh,w,c
  5778  0008F4  6EF7               	movwf	tblptrh,c
  5779  0008F6                     	if	0	;There are less than 3 active tblptr bytes
  5780  0008F6                     	endif
  5781  0008F6  0009               	tblrd		*+
  5782  0008F8  CFF5 F092          	movff	tablat,___lwdiv@divisor
  5783  0008FC  000A               	tblrd		*-
  5784  0008FE  CFF5 F093          	movff	tablat,___lwdiv@divisor+1
  5785  000902  EC76  F016         	call	___lwdiv	;wreg free
  5786  000906  0100               	movlb	0	; () banked
  5787  000908  5190               	movf	?___lwdiv& (0+255),w,b
  5788  00090A  0B07               	andlw	7
  5789  00090C                     L8:
  5790  00090C  0F30               	addlw	48
  5791  00090E  0100               	movlb	0	; () banked
  5792  000910  6FBE               	movwf	printf@c& (0+255),b
  5793                           
  5794                           ; BSR set to: 0
  5795                           ;doprnt.c: 1523: }
  5796                           
  5797                           ;doprnt.c: 1520: break;
  5798  000912  D00F               	goto	l4377
  5799  000914                     l4375:
  5800  000914  0100               	movlb	0	; () banked
  5801  000916  51BF               	movf	printf@flag& (0+255),w,b
  5802  000918  0BC0               	andlw	192
  5803                           
  5804                           ; Switch size 1, requested type "space"
  5805                           ; Number of cases is 4, Range of values is 0 to 192
  5806                           ; switch strategies available:
  5807                           ; Name         Instructions Cycles
  5808                           ; simple_byte           13     7 (average)
  5809                           ;	Chosen strategy is simple_byte
  5810  00091A  0A00               	xorlw	0	; case 0
  5811  00091C  B4D8               	btfsc	status,2,c
  5812  00091E  D77E               	goto	l4359
  5813  000920  0A40               	xorlw	64	; case 64
  5814  000922  B4D8               	btfsc	status,2,c
  5815  000924  D7DB               	goto	l4371
  5816  000926  0AC0               	xorlw	192	; case 128
  5817  000928  B4D8               	btfsc	status,2,c
  5818  00092A  D79B               	goto	l4361
  5819  00092C  0A40               	xorlw	64	; case 192
  5820  00092E  B4D8               	btfsc	status,2,c
  5821  000930  D775               	goto	l4359
  5822  000932                     l4377:
  5823                           
  5824                           ; BSR set to: 0
  5825                           ;doprnt.c: 1524: (putch(c) );
  5826  000932  0100               	movlb	0	; () banked
  5827  000934  51BE               	movf	printf@c& (0+255),w,b
  5828  000936  EC2E  F01A         	call	_putch
  5829  00093A                     l4379:
  5830  00093A  0100               	movlb	0	; () banked
  5831  00093C  07BB               	decf	printf@prec& (0+255),f,b
  5832  00093E  0100               	movlb	0	; () banked
  5833  000940  29BB               	incf	printf@prec& (0+255),w,b
  5834  000942  A4D8               	btfss	status,2,c
  5835  000944  D7E7               	goto	l4375
  5836                           
  5837                           ; BSR set to: 0
  5838                           ;doprnt.c: 1525: }
  5839                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  5840  000946  0100               	movlb	0	; () banked
  5841  000948  A7BF               	btfss	printf@flag& (0+255),3,b
  5842  00094A  D017               	goto	l4387
  5843                           
  5844                           ; BSR set to: 0
  5845  00094C  0100               	movlb	0	; () banked
  5846  00094E  BFBD               	btfsc	(printf@width+1)& (0+255),7,b
  5847  000950  D014               	goto	l4387
  5848  000952  0100               	movlb	0	; () banked
  5849  000954  51BD               	movf	(printf@width+1)& (0+255),w,b
  5850  000956  E104               	bnz	l4383
  5851  000958  0100               	movlb	0	; () banked
  5852  00095A  05BC               	decf	printf@width& (0+255),w,b
  5853  00095C  A0D8               	btfss	status,0,c
  5854  00095E  D00D               	goto	l4387
  5855  000960                     l4383:
  5856                           
  5857                           ; BSR set to: 0
  5858                           ;doprnt.c: 1530: (putch(' ') );
  5859  000960  0E20               	movlw	32
  5860  000962  EC2E  F01A         	call	_putch
  5861                           
  5862                           ;doprnt.c: 1531: while(--width);
  5863  000966  0100               	movlb	0	; () banked
  5864  000968  07BC               	decf	printf@width& (0+255),f,b
  5865  00096A  A0D8               	btfss	status,0,c
  5866  00096C  07BD               	decf	(printf@width+1)& (0+255),f,b
  5867  00096E  0100               	movlb	0	; () banked
  5868  000970  51BC               	movf	printf@width& (0+255),w,b
  5869  000972  0100               	movlb	0	; () banked
  5870  000974  11BD               	iorwf	(printf@width+1)& (0+255),w,b
  5871  000976  A4D8               	btfss	status,2,c
  5872  000978  D7F3               	goto	l4383
  5873  00097A                     l4387:
  5874  00097A  C09C  FFF6         	movff	printf@f,tblptrl
  5875  00097E  C09D  FFF7         	movff	printf@f+1,tblptrh
  5876  000982  0100               	movlb	0	; () banked
  5877  000984  4B9C               	infsnz	printf@f& (0+255),f,b
  5878  000986  2B9D               	incf	(printf@f+1)& (0+255),f,b
  5879  000988                     	if	0	;tblptru may be non-zero
  5880  000988                     	endif
  5881  000988                     	if	0	;tblptru may be non-zero
  5882  000988                     	endif
  5883  000988  0008               	tblrd		*
  5884  00098A  CFF5 F0BE          	movff	tablat,printf@c
  5885  00098E  0100               	movlb	0	; () banked
  5886  000990  51BE               	movf	printf@c& (0+255),w,b
  5887  000992  B4D8               	btfsc	status,2,c
  5888  000994  0012               	return	
  5889  000996  EF11  F000         	goto	l4081
  5890  00099A                     __end_of_printf:
  5891                           	opt stack 0
  5892                           tblptru	equ	0xFF8
  5893                           tblptrh	equ	0xFF7
  5894                           tblptrl	equ	0xFF6
  5895                           tablat	equ	0xFF5
  5896                           prodh	equ	0xFF4
  5897                           prodl	equ	0xFF3
  5898                           intcon	equ	0xFF2
  5899                           intcon2	equ	0xFF1
  5900                           intcon3	equ	0xFF0
  5901                           postinc0	equ	0xFEE
  5902                           wreg	equ	0xFE8
  5903                           postdec1	equ	0xFE5
  5904                           fsr1l	equ	0xFE1
  5905                           indf2	equ	0xFDF
  5906                           postinc2	equ	0xFDE
  5907                           postdec2	equ	0xFDD
  5908                           fsr2h	equ	0xFDA
  5909                           fsr2l	equ	0xFD9
  5910                           status	equ	0xFD8
  5911                           
  5912 ;; *************** function _putch *****************
  5913 ;; Defined at:
  5914 ;;		line 31 in file "lcd.c"
  5915 ;; Parameters:    Size  Location     Type
  5916 ;;  data            1    wreg     unsigned char 
  5917 ;; Auto vars:     Size  Location     Type
  5918 ;;  data            1   18[BANK0 ] unsigned char 
  5919 ;; Return value:  Size  Location     Type
  5920 ;;                  1    wreg      void 
  5921 ;; Registers used:
  5922 ;;		wreg, status,2, status,0, cstack
  5923 ;; Tracked objects:
  5924 ;;		On entry : 0/0
  5925 ;;		On exit  : 0/0
  5926 ;;		Unchanged: 0/0
  5927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5929 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5930 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5931 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5932 ;;Total ram usage:        1 bytes
  5933 ;; Hardware stack levels used:    1
  5934 ;; Hardware stack levels required when called:    8
  5935 ;; This function calls:
  5936 ;;		_lcdNibble
  5937 ;; This function is called by:
  5938 ;;		_printf
  5939 ;; This function uses a non-reentrant model
  5940 ;;
  5941                           
  5942                           	psect	text18
  5943  00345C                     __ptext18:
  5944                           	opt stack 0
  5945  00345C                     _putch:
  5946                           	opt stack 20
  5947                           
  5948                           ; BSR set to: 0
  5949                           ;incstack = 0
  5950                           ;putch@data stored from wreg
  5951  00345C  0100               	movlb	0	; () banked
  5952  00345E  6F92               	movwf	putch@data& (0+255),b
  5953                           
  5954                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  5955  003460  848C               	bsf	3980,2,c	;volatile
  5956                           
  5957                           ;lcd.c: 33: lcdNibble(data);
  5958  003462  0100               	movlb	0	; () banked
  5959  003464  5192               	movf	putch@data& (0+255),w,b
  5960  003466  ECBF  F017         	call	_lcdNibble
  5961  00346A  0012               	return		;funcret
  5962  00346C                     __end_of_putch:
  5963                           	opt stack 0
  5964                           tblptru	equ	0xFF8
  5965                           tblptrh	equ	0xFF7
  5966                           tblptrl	equ	0xFF6
  5967                           tablat	equ	0xFF5
  5968                           prodh	equ	0xFF4
  5969                           prodl	equ	0xFF3
  5970                           intcon	equ	0xFF2
  5971                           intcon2	equ	0xFF1
  5972                           intcon3	equ	0xFF0
  5973                           postinc0	equ	0xFEE
  5974                           wreg	equ	0xFE8
  5975                           postdec1	equ	0xFE5
  5976                           fsr1l	equ	0xFE1
  5977                           indf2	equ	0xFDF
  5978                           postinc2	equ	0xFDE
  5979                           postdec2	equ	0xFDD
  5980                           fsr2h	equ	0xFDA
  5981                           fsr2l	equ	0xFD9
  5982                           status	equ	0xFD8
  5983                           
  5984 ;; *************** function _isdigit *****************
  5985 ;; Defined at:
  5986 ;;		line 8 in file "/Applications/microchip/xc8/v1.40/sources/common/isdigit.c"
  5987 ;; Parameters:    Size  Location     Type
  5988 ;;  c               1    wreg     unsigned char 
  5989 ;; Auto vars:     Size  Location     Type
  5990 ;;  c               1   18[BANK0 ] unsigned char 
  5991 ;; Return value:  Size  Location     Type
  5992 ;;		None               void
  5993 ;; Registers used:
  5994 ;;		wreg, status,2, status,0
  5995 ;; Tracked objects:
  5996 ;;		On entry : 0/0
  5997 ;;		On exit  : 0/0
  5998 ;;		Unchanged: 0/0
  5999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6001 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6002 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6003 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6004 ;;Total ram usage:        3 bytes
  6005 ;; Hardware stack levels used:    1
  6006 ;; Hardware stack levels required when called:    7
  6007 ;; This function calls:
  6008 ;;		Nothing
  6009 ;; This function is called by:
  6010 ;;		_printf
  6011 ;; This function uses a non-reentrant model
  6012 ;;
  6013                           
  6014                           	psect	text19
  6015  003330                     __ptext19:
  6016                           	opt stack 0
  6017  003330                     _isdigit:
  6018                           	opt stack 21
  6019                           
  6020                           ;incstack = 0
  6021                           ;isdigit@c stored from wreg
  6022  003330  0100               	movlb	0	; () banked
  6023  003332  6F92               	movwf	isdigit@c& (0+255),b
  6024  003334  0E00               	movlw	0
  6025  003336  0100               	movlb	0	; () banked
  6026  003338  6F91               	movwf	_isdigit$962& (0+255),b
  6027                           
  6028                           ; BSR set to: 0
  6029  00333A  0E3A               	movlw	58
  6030  00333C  0100               	movlb	0	; () banked
  6031  00333E  6192               	cpfslt	isdigit@c& (0+255),b
  6032  003340  D007               	goto	l3929
  6033                           
  6034                           ; BSR set to: 0
  6035  003342  0E2F               	movlw	47
  6036  003344  0100               	movlb	0	; () banked
  6037  003346  6592               	cpfsgt	isdigit@c& (0+255),b
  6038  003348  D003               	goto	l3929
  6039                           
  6040                           ; BSR set to: 0
  6041  00334A  0E01               	movlw	1
  6042  00334C  0100               	movlb	0	; () banked
  6043  00334E  6F91               	movwf	_isdigit$962& (0+255),b
  6044  003350                     l3929:
  6045                           
  6046                           ; BSR set to: 0
  6047  003350  C091  F090         	movff	_isdigit$962,??_isdigit
  6048  003354  0100               	movlb	0	; () banked
  6049  003356  3190               	rrcf	??_isdigit& (0+255),w,b
  6050  003358  0012               	return	
  6051  00335A                     __end_of_isdigit:
  6052                           	opt stack 0
  6053                           tblptru	equ	0xFF8
  6054                           tblptrh	equ	0xFF7
  6055                           tblptrl	equ	0xFF6
  6056                           tablat	equ	0xFF5
  6057                           prodh	equ	0xFF4
  6058                           prodl	equ	0xFF3
  6059                           intcon	equ	0xFF2
  6060                           intcon2	equ	0xFF1
  6061                           intcon3	equ	0xFF0
  6062                           postinc0	equ	0xFEE
  6063                           wreg	equ	0xFE8
  6064                           postdec1	equ	0xFE5
  6065                           fsr1l	equ	0xFE1
  6066                           indf2	equ	0xFDF
  6067                           postinc2	equ	0xFDE
  6068                           postdec2	equ	0xFDD
  6069                           fsr2h	equ	0xFDA
  6070                           fsr2l	equ	0xFD9
  6071                           status	equ	0xFD8
  6072                           
  6073 ;; *************** function ___wmul *****************
  6074 ;; Defined at:
  6075 ;;		line 15 in file "/Applications/microchip/xc8/v1.40/sources/common/Umul16.c"
  6076 ;; Parameters:    Size  Location     Type
  6077 ;;  multiplier      2   16[BANK0 ] unsigned int 
  6078 ;;  multiplicand    2   18[BANK0 ] unsigned int 
  6079 ;; Auto vars:     Size  Location     Type
  6080 ;;  product         2   20[BANK0 ] unsigned int 
  6081 ;; Return value:  Size  Location     Type
  6082 ;;                  2   16[BANK0 ] unsigned int 
  6083 ;; Registers used:
  6084 ;;		wreg, status,2, status,0, prodl, prodh
  6085 ;; Tracked objects:
  6086 ;;		On entry : 0/0
  6087 ;;		On exit  : 0/0
  6088 ;;		Unchanged: 0/0
  6089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6090 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6091 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6093 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6094 ;;Total ram usage:        6 bytes
  6095 ;; Hardware stack levels used:    1
  6096 ;; Hardware stack levels required when called:    7
  6097 ;; This function calls:
  6098 ;;		Nothing
  6099 ;; This function is called by:
  6100 ;;		_printf
  6101 ;; This function uses a non-reentrant model
  6102 ;;
  6103                           
  6104                           	psect	text20
  6105  0032CC                     __ptext20:
  6106                           	opt stack 0
  6107  0032CC                     ___wmul:
  6108                           	opt stack 21
  6109                           
  6110                           ; BSR set to: 0
  6111                           ;incstack = 0
  6112  0032CC  0100               	movlb	0	; () banked
  6113  0032CE  5190               	movf	___wmul@multiplier& (0+255),w,b
  6114  0032D0  0100               	movlb	0	; () banked
  6115  0032D2  0392               	mulwf	___wmul@multiplicand& (0+255),b
  6116  0032D4  CFF3 F094          	movff	prodl,___wmul@product
  6117  0032D8  CFF4 F095          	movff	prodh,___wmul@product+1
  6118  0032DC  0100               	movlb	0	; () banked
  6119  0032DE  5190               	movf	___wmul@multiplier& (0+255),w,b
  6120  0032E0  0100               	movlb	0	; () banked
  6121  0032E2  0393               	mulwf	(___wmul@multiplicand+1)& (0+255),b
  6122  0032E4  50F3               	movf	prodl,w,c
  6123  0032E6  0100               	movlb	0	; () banked
  6124  0032E8  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  6125  0032EA  0100               	movlb	0	; () banked
  6126  0032EC  5191               	movf	(___wmul@multiplier+1)& (0+255),w,b
  6127  0032EE  0100               	movlb	0	; () banked
  6128  0032F0  0392               	mulwf	___wmul@multiplicand& (0+255),b
  6129  0032F2  50F3               	movf	prodl,w,c
  6130  0032F4  0100               	movlb	0	; () banked
  6131  0032F6  2795               	addwf	(___wmul@product+1)& (0+255),f,b
  6132                           
  6133                           ; BSR set to: 0
  6134  0032F8  C094  F090         	movff	___wmul@product,?___wmul
  6135  0032FC  C095  F091         	movff	___wmul@product+1,?___wmul+1
  6136  003300  0012               	return	
  6137  003302                     __end_of___wmul:
  6138                           	opt stack 0
  6139                           tblptru	equ	0xFF8
  6140                           tblptrh	equ	0xFF7
  6141                           tblptrl	equ	0xFF6
  6142                           tablat	equ	0xFF5
  6143                           prodh	equ	0xFF4
  6144                           prodl	equ	0xFF3
  6145                           intcon	equ	0xFF2
  6146                           intcon2	equ	0xFF1
  6147                           intcon3	equ	0xFF0
  6148                           postinc0	equ	0xFEE
  6149                           wreg	equ	0xFE8
  6150                           postdec1	equ	0xFE5
  6151                           fsr1l	equ	0xFE1
  6152                           indf2	equ	0xFDF
  6153                           postinc2	equ	0xFDE
  6154                           postdec2	equ	0xFDD
  6155                           fsr2h	equ	0xFDA
  6156                           fsr2l	equ	0xFD9
  6157                           status	equ	0xFD8
  6158                           
  6159 ;; *************** function ___lwmod *****************
  6160 ;; Defined at:
  6161 ;;		line 8 in file "/Applications/microchip/xc8/v1.40/sources/common/lwmod.c"
  6162 ;; Parameters:    Size  Location     Type
  6163 ;;  dividend        2   23[BANK0 ] unsigned int 
  6164 ;;  divisor         2   25[BANK0 ] unsigned int 
  6165 ;; Auto vars:     Size  Location     Type
  6166 ;;  counter         1   27[BANK0 ] unsigned char 
  6167 ;; Return value:  Size  Location     Type
  6168 ;;                  2   23[BANK0 ] unsigned int 
  6169 ;; Registers used:
  6170 ;;		wreg, status,2, status,0
  6171 ;; Tracked objects:
  6172 ;;		On entry : 0/0
  6173 ;;		On exit  : 0/0
  6174 ;;		Unchanged: 0/0
  6175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6176 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6177 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6178 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6179 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6180 ;;Total ram usage:        5 bytes
  6181 ;; Hardware stack levels used:    1
  6182 ;; Hardware stack levels required when called:    7
  6183 ;; This function calls:
  6184 ;;		Nothing
  6185 ;; This function is called by:
  6186 ;;		_printf
  6187 ;; This function uses a non-reentrant model
  6188 ;;
  6189                           
  6190                           	psect	text21
  6191  002F1C                     __ptext21:
  6192                           	opt stack 0
  6193  002F1C                     ___lwmod:
  6194                           	opt stack 21
  6195                           
  6196                           ; BSR set to: 0
  6197                           ;incstack = 0
  6198  002F1C  0100               	movlb	0	; () banked
  6199  002F1E  5199               	movf	___lwmod@divisor& (0+255),w,b
  6200  002F20  0100               	movlb	0	; () banked
  6201  002F22  119A               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  6202  002F24  B4D8               	btfsc	status,2,c
  6203  002F26  D026               	goto	l1007
  6204                           
  6205                           ; BSR set to: 0
  6206  002F28  0E01               	movlw	1
  6207  002F2A  0100               	movlb	0	; () banked
  6208  002F2C  6F9B               	movwf	___lwmod@counter& (0+255),b
  6209  002F2E  D006               	goto	l3977
  6210  002F30                     l3975:
  6211                           
  6212                           ; BSR set to: 0
  6213  002F30  0100               	movlb	0	; () banked
  6214  002F32  90D8               	bcf	status,0,c
  6215  002F34  3799               	rlcf	___lwmod@divisor& (0+255),f,b
  6216  002F36  379A               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  6217  002F38  0100               	movlb	0	; () banked
  6218  002F3A  2B9B               	incf	___lwmod@counter& (0+255),f,b
  6219  002F3C                     l3977:
  6220                           
  6221                           ; BSR set to: 0
  6222  002F3C  0100               	movlb	0	; () banked
  6223  002F3E  AF9A               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  6224  002F40  D7F7               	goto	l3975
  6225  002F42                     l3979:
  6226                           
  6227                           ; BSR set to: 0
  6228  002F42  0100               	movlb	0	; () banked
  6229  002F44  5199               	movf	___lwmod@divisor& (0+255),w,b
  6230  002F46  0100               	movlb	0	; () banked
  6231  002F48  5D97               	subwf	___lwmod@dividend& (0+255),w,b
  6232  002F4A  0100               	movlb	0	; () banked
  6233  002F4C  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6234  002F4E  0100               	movlb	0	; () banked
  6235  002F50  5998               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  6236  002F52  A0D8               	btfss	status,0,c
  6237  002F54  D008               	goto	l3983
  6238                           
  6239                           ; BSR set to: 0
  6240  002F56  0100               	movlb	0	; () banked
  6241  002F58  5199               	movf	___lwmod@divisor& (0+255),w,b
  6242  002F5A  0100               	movlb	0	; () banked
  6243  002F5C  5F97               	subwf	___lwmod@dividend& (0+255),f,b
  6244  002F5E  0100               	movlb	0	; () banked
  6245  002F60  519A               	movf	(___lwmod@divisor+1)& (0+255),w,b
  6246  002F62  0100               	movlb	0	; () banked
  6247  002F64  5B98               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  6248  002F66                     l3983:
  6249                           
  6250                           ; BSR set to: 0
  6251  002F66  0100               	movlb	0	; () banked
  6252  002F68  90D8               	bcf	status,0,c
  6253  002F6A  339A               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  6254  002F6C  3399               	rrcf	___lwmod@divisor& (0+255),f,b
  6255                           
  6256                           ; BSR set to: 0
  6257  002F6E  0100               	movlb	0	; () banked
  6258  002F70  2F9B               	decfsz	___lwmod@counter& (0+255),f,b
  6259  002F72  D7E7               	goto	l3979
  6260  002F74                     l1007:
  6261                           
  6262                           ; BSR set to: 0
  6263  002F74  C097  F097         	movff	___lwmod@dividend,?___lwmod
  6264  002F78  C098  F098         	movff	___lwmod@dividend+1,?___lwmod+1
  6265                           
  6266                           ; BSR set to: 0
  6267  002F7C  0012               	return		;funcret
  6268  002F7E                     __end_of___lwmod:
  6269                           	opt stack 0
  6270                           tblptru	equ	0xFF8
  6271                           tblptrh	equ	0xFF7
  6272                           tblptrl	equ	0xFF6
  6273                           tablat	equ	0xFF5
  6274                           prodh	equ	0xFF4
  6275                           prodl	equ	0xFF3
  6276                           intcon	equ	0xFF2
  6277                           intcon2	equ	0xFF1
  6278                           intcon3	equ	0xFF0
  6279                           postinc0	equ	0xFEE
  6280                           wreg	equ	0xFE8
  6281                           postdec1	equ	0xFE5
  6282                           fsr1l	equ	0xFE1
  6283                           indf2	equ	0xFDF
  6284                           postinc2	equ	0xFDE
  6285                           postdec2	equ	0xFDD
  6286                           fsr2h	equ	0xFDA
  6287                           fsr2l	equ	0xFD9
  6288                           status	equ	0xFD8
  6289                           
  6290 ;; *************** function ___lwdiv *****************
  6291 ;; Defined at:
  6292 ;;		line 8 in file "/Applications/microchip/xc8/v1.40/sources/common/lwdiv.c"
  6293 ;; Parameters:    Size  Location     Type
  6294 ;;  dividend        2   16[BANK0 ] unsigned int 
  6295 ;;  divisor         2   18[BANK0 ] unsigned int 
  6296 ;; Auto vars:     Size  Location     Type
  6297 ;;  quotient        2   20[BANK0 ] unsigned int 
  6298 ;;  counter         1   22[BANK0 ] unsigned char 
  6299 ;; Return value:  Size  Location     Type
  6300 ;;                  2   16[BANK0 ] unsigned int 
  6301 ;; Registers used:
  6302 ;;		wreg, status,2, status,0
  6303 ;; Tracked objects:
  6304 ;;		On entry : 0/0
  6305 ;;		On exit  : 0/0
  6306 ;;		Unchanged: 0/0
  6307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6308 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6309 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6311 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6312 ;;Total ram usage:        7 bytes
  6313 ;; Hardware stack levels used:    1
  6314 ;; Hardware stack levels required when called:    7
  6315 ;; This function calls:
  6316 ;;		Nothing
  6317 ;; This function is called by:
  6318 ;;		_printf
  6319 ;; This function uses a non-reentrant model
  6320 ;;
  6321                           
  6322                           	psect	text22
  6323  002CEC                     __ptext22:
  6324                           	opt stack 0
  6325  002CEC                     ___lwdiv:
  6326                           	opt stack 21
  6327                           
  6328                           ; BSR set to: 0
  6329                           ;incstack = 0
  6330  002CEC  0E00               	movlw	0
  6331  002CEE  0100               	movlb	0	; () banked
  6332  002CF0  6F95               	movwf	(___lwdiv@quotient+1)& (0+255),b
  6333  002CF2  0E00               	movlw	0
  6334  002CF4  6F94               	movwf	___lwdiv@quotient& (0+255),b
  6335                           
  6336                           ; BSR set to: 0
  6337  002CF6  0100               	movlb	0	; () banked
  6338  002CF8  5192               	movf	___lwdiv@divisor& (0+255),w,b
  6339  002CFA  0100               	movlb	0	; () banked
  6340  002CFC  1193               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  6341  002CFE  B4D8               	btfsc	status,2,c
  6342  002D00  D02C               	goto	l997
  6343                           
  6344                           ; BSR set to: 0
  6345  002D02  0E01               	movlw	1
  6346  002D04  0100               	movlb	0	; () banked
  6347  002D06  6F96               	movwf	___lwdiv@counter& (0+255),b
  6348  002D08  D006               	goto	l3957
  6349  002D0A                     l3955:
  6350                           
  6351                           ; BSR set to: 0
  6352  002D0A  0100               	movlb	0	; () banked
  6353  002D0C  90D8               	bcf	status,0,c
  6354  002D0E  3792               	rlcf	___lwdiv@divisor& (0+255),f,b
  6355  002D10  3793               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6356  002D12  0100               	movlb	0	; () banked
  6357  002D14  2B96               	incf	___lwdiv@counter& (0+255),f,b
  6358  002D16                     l3957:
  6359                           
  6360                           ; BSR set to: 0
  6361  002D16  0100               	movlb	0	; () banked
  6362  002D18  AF93               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6363  002D1A  D7F7               	goto	l3955
  6364  002D1C                     l3959:
  6365                           
  6366                           ; BSR set to: 0
  6367  002D1C  0100               	movlb	0	; () banked
  6368  002D1E  90D8               	bcf	status,0,c
  6369  002D20  3794               	rlcf	___lwdiv@quotient& (0+255),f,b
  6370  002D22  3795               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6371                           
  6372                           ; BSR set to: 0
  6373  002D24  0100               	movlb	0	; () banked
  6374  002D26  5192               	movf	___lwdiv@divisor& (0+255),w,b
  6375  002D28  0100               	movlb	0	; () banked
  6376  002D2A  5D90               	subwf	___lwdiv@dividend& (0+255),w,b
  6377  002D2C  0100               	movlb	0	; () banked
  6378  002D2E  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6379  002D30  0100               	movlb	0	; () banked
  6380  002D32  5991               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6381  002D34  A0D8               	btfss	status,0,c
  6382  002D36  D00A               	goto	l3967
  6383                           
  6384                           ; BSR set to: 0
  6385  002D38  0100               	movlb	0	; () banked
  6386  002D3A  5192               	movf	___lwdiv@divisor& (0+255),w,b
  6387  002D3C  0100               	movlb	0	; () banked
  6388  002D3E  5F90               	subwf	___lwdiv@dividend& (0+255),f,b
  6389  002D40  0100               	movlb	0	; () banked
  6390  002D42  5193               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6391  002D44  0100               	movlb	0	; () banked
  6392  002D46  5B91               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6393                           
  6394                           ; BSR set to: 0
  6395  002D48  0100               	movlb	0	; () banked
  6396  002D4A  8194               	bsf	___lwdiv@quotient& (0+255),0,b
  6397  002D4C                     l3967:
  6398                           
  6399                           ; BSR set to: 0
  6400  002D4C  0100               	movlb	0	; () banked
  6401  002D4E  90D8               	bcf	status,0,c
  6402  002D50  3393               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6403  002D52  3392               	rrcf	___lwdiv@divisor& (0+255),f,b
  6404                           
  6405                           ; BSR set to: 0
  6406  002D54  0100               	movlb	0	; () banked
  6407  002D56  2F96               	decfsz	___lwdiv@counter& (0+255),f,b
  6408  002D58  D7E1               	goto	l3959
  6409  002D5A                     l997:
  6410                           
  6411                           ; BSR set to: 0
  6412  002D5A  C094  F090         	movff	___lwdiv@quotient,?___lwdiv
  6413  002D5E  C095  F091         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6414                           
  6415                           ; BSR set to: 0
  6416  002D62  0012               	return		;funcret
  6417  002D64                     __end_of___lwdiv:
  6418                           	opt stack 0
  6419                           tblptru	equ	0xFF8
  6420                           tblptrh	equ	0xFF7
  6421                           tblptrl	equ	0xFF6
  6422                           tablat	equ	0xFF5
  6423                           prodh	equ	0xFF4
  6424                           prodl	equ	0xFF3
  6425                           intcon	equ	0xFF2
  6426                           intcon2	equ	0xFF1
  6427                           intcon3	equ	0xFF0
  6428                           postinc0	equ	0xFEE
  6429                           wreg	equ	0xFE8
  6430                           postdec1	equ	0xFE5
  6431                           fsr1l	equ	0xFE1
  6432                           indf2	equ	0xFDF
  6433                           postinc2	equ	0xFDE
  6434                           postdec2	equ	0xFDD
  6435                           fsr2h	equ	0xFDA
  6436                           fsr2l	equ	0xFD9
  6437                           status	equ	0xFD8
  6438                           
  6439 ;; *************** function _lcdInst *****************
  6440 ;; Defined at:
  6441 ;;		line 26 in file "lcd.c"
  6442 ;; Parameters:    Size  Location     Type
  6443 ;;  data            1    wreg     unsigned char 
  6444 ;; Auto vars:     Size  Location     Type
  6445 ;;  data            1   18[BANK0 ] unsigned char 
  6446 ;; Return value:  Size  Location     Type
  6447 ;;                  1    wreg      void 
  6448 ;; Registers used:
  6449 ;;		wreg, status,2, status,0, cstack
  6450 ;; Tracked objects:
  6451 ;;		On entry : 0/0
  6452 ;;		On exit  : 0/0
  6453 ;;		Unchanged: 0/0
  6454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6456 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6458 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6459 ;;Total ram usage:        1 bytes
  6460 ;; Hardware stack levels used:    1
  6461 ;; Hardware stack levels required when called:    8
  6462 ;; This function calls:
  6463 ;;		_lcdNibble
  6464 ;; This function is called by:
  6465 ;;		_initLCD
  6466 ;;		_standby
  6467 ;;		_bottle_count
  6468 ;;		_display_log
  6469 ;;		_bottle_time
  6470 ;;		_operation
  6471 ;;		_operationend
  6472 ;;		_emergencystop
  6473 ;;		_date_time
  6474 ;; This function uses a non-reentrant model
  6475 ;;
  6476                           
  6477                           	psect	text23
  6478  00346C                     __ptext23:
  6479                           	opt stack 0
  6480  00346C                     _lcdInst:
  6481                           	opt stack 21
  6482                           
  6483                           ; BSR set to: 0
  6484                           ;incstack = 0
  6485                           ;lcdInst@data stored from wreg
  6486  00346C  0100               	movlb	0	; () banked
  6487  00346E  6F92               	movwf	lcdInst@data& (0+255),b
  6488                           
  6489                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  6490  003470  948C               	bcf	3980,2,c	;volatile
  6491                           
  6492                           ;lcd.c: 28: lcdNibble(data);
  6493  003472  0100               	movlb	0	; () banked
  6494  003474  5192               	movf	lcdInst@data& (0+255),w,b
  6495  003476  ECBF  F017         	call	_lcdNibble
  6496  00347A  0012               	return		;funcret
  6497  00347C                     __end_of_lcdInst:
  6498                           	opt stack 0
  6499                           tblptru	equ	0xFF8
  6500                           tblptrh	equ	0xFF7
  6501                           tblptrl	equ	0xFF6
  6502                           tablat	equ	0xFF5
  6503                           prodh	equ	0xFF4
  6504                           prodl	equ	0xFF3
  6505                           intcon	equ	0xFF2
  6506                           intcon2	equ	0xFF1
  6507                           intcon3	equ	0xFF0
  6508                           postinc0	equ	0xFEE
  6509                           wreg	equ	0xFE8
  6510                           postdec1	equ	0xFE5
  6511                           fsr1l	equ	0xFE1
  6512                           indf2	equ	0xFDF
  6513                           postinc2	equ	0xFDE
  6514                           postdec2	equ	0xFDD
  6515                           fsr2h	equ	0xFDA
  6516                           fsr2l	equ	0xFD9
  6517                           status	equ	0xFD8
  6518                           
  6519 ;; *************** function _lcdNibble *****************
  6520 ;; Defined at:
  6521 ;;		line 36 in file "lcd.c"
  6522 ;; Parameters:    Size  Location     Type
  6523 ;;  data            1    wreg     unsigned char 
  6524 ;; Auto vars:     Size  Location     Type
  6525 ;;  data            1   17[BANK0 ] unsigned char 
  6526 ;;  temp            1   16[BANK0 ] unsigned char 
  6527 ;; Return value:  Size  Location     Type
  6528 ;;                  1    wreg      void 
  6529 ;; Registers used:
  6530 ;;		wreg, status,2, status,0
  6531 ;; Tracked objects:
  6532 ;;		On entry : 0/0
  6533 ;;		On exit  : 0/0
  6534 ;;		Unchanged: 0/0
  6535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6536 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6537 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6539 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6540 ;;Total ram usage:        2 bytes
  6541 ;; Hardware stack levels used:    1
  6542 ;; Hardware stack levels required when called:    7
  6543 ;; This function calls:
  6544 ;;		Nothing
  6545 ;; This function is called by:
  6546 ;;		_lcdInst
  6547 ;;		_putch
  6548 ;; This function uses a non-reentrant model
  6549 ;;
  6550                           
  6551                           	psect	text24
  6552  002F7E                     __ptext24:
  6553                           	opt stack 0
  6554  002F7E                     _lcdNibble:
  6555                           	opt stack 20
  6556                           
  6557                           ;incstack = 0
  6558                           ;lcdNibble@data stored from wreg
  6559  002F7E  0100               	movlb	0	; () banked
  6560  002F80  6F91               	movwf	lcdNibble@data& (0+255),b
  6561                           
  6562                           ;lcd.c: 38: char temp = data & 0xF0;
  6563  002F82  0100               	movlb	0	; () banked
  6564  002F84  5191               	movf	lcdNibble@data& (0+255),w,b
  6565  002F86  0BF0               	andlw	240
  6566  002F88  0100               	movlb	0	; () banked
  6567  002F8A  6F90               	movwf	lcdNibble@temp& (0+255),b
  6568                           
  6569                           ;lcd.c: 39: LATD = LATD & 0x0F;
  6570  002F8C  508C               	movf	3980,w,c	;volatile
  6571  002F8E  0B0F               	andlw	15
  6572  002F90  6E8C               	movwf	3980,c	;volatile
  6573                           
  6574                           ;lcd.c: 40: LATD = temp | LATD;
  6575  002F92  0100               	movlb	0	; () banked
  6576  002F94  5190               	movf	lcdNibble@temp& (0+255),w,b
  6577  002F96  108C               	iorwf	3980,w,c	;volatile
  6578  002F98  6E8C               	movwf	3980,c	;volatile
  6579                           
  6580                           ; BSR set to: 0
  6581                           ;lcd.c: 42: LATDbits.LATD3 = 0;
  6582  002F9A  968C               	bcf	3980,3,c	;volatile
  6583                           
  6584                           ; BSR set to: 0
  6585                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6586  002F9C  0E19               	movlw	25
  6587  002F9E                     u5637:
  6588  002F9E  2EE8               	decfsz	wreg,f,c
  6589  002FA0  D7FE               	bra	u5637
  6590                           
  6591                           ;lcd.c: 44: LATDbits.LATD3 = 1;
  6592  002FA2  868C               	bsf	3980,3,c	;volatile
  6593                           
  6594                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6595  002FA4  0E19               	movlw	25
  6596  002FA6                     u5647:
  6597  002FA6  2EE8               	decfsz	wreg,f,c
  6598  002FA8  D7FE               	bra	u5647
  6599                           
  6600                           ;lcd.c: 47: data = data << 4;
  6601  002FAA  0100               	movlb	0	; () banked
  6602  002FAC  3991               	swapf	lcdNibble@data& (0+255),w,b
  6603  002FAE  0BF0               	andlw	240
  6604  002FB0  0100               	movlb	0	; () banked
  6605  002FB2  6F91               	movwf	lcdNibble@data& (0+255),b
  6606                           
  6607                           ;lcd.c: 49: temp = data & 0xF0;
  6608  002FB4  0100               	movlb	0	; () banked
  6609  002FB6  5191               	movf	lcdNibble@data& (0+255),w,b
  6610  002FB8  0BF0               	andlw	240
  6611  002FBA  0100               	movlb	0	; () banked
  6612  002FBC  6F90               	movwf	lcdNibble@temp& (0+255),b
  6613                           
  6614                           ;lcd.c: 50: LATD = LATD & 0x0F;
  6615  002FBE  508C               	movf	3980,w,c	;volatile
  6616  002FC0  0B0F               	andlw	15
  6617  002FC2  6E8C               	movwf	3980,c	;volatile
  6618                           
  6619                           ;lcd.c: 51: LATD = temp | LATD;
  6620  002FC4  0100               	movlb	0	; () banked
  6621  002FC6  5190               	movf	lcdNibble@temp& (0+255),w,b
  6622  002FC8  108C               	iorwf	3980,w,c	;volatile
  6623  002FCA  6E8C               	movwf	3980,c	;volatile
  6624                           
  6625                           ; BSR set to: 0
  6626                           ;lcd.c: 53: LATDbits.LATD3 = 0;
  6627  002FCC  968C               	bcf	3980,3,c	;volatile
  6628                           
  6629                           ; BSR set to: 0
  6630                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6631  002FCE  0E19               	movlw	25
  6632  002FD0                     u5657:
  6633  002FD0  2EE8               	decfsz	wreg,f,c
  6634  002FD2  D7FE               	bra	u5657
  6635                           
  6636                           ;lcd.c: 55: LATDbits.LATD3 = 1;
  6637  002FD4  868C               	bsf	3980,3,c	;volatile
  6638                           
  6639                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
  6640  002FD6  0E19               	movlw	25
  6641  002FD8                     u5667:
  6642  002FD8  2EE8               	decfsz	wreg,f,c
  6643  002FDA  D7FE               	bra	u5667
  6644  002FDC  0012               	return		;funcret
  6645  002FDE                     __end_of_lcdNibble:
  6646                           	opt stack 0
  6647                           tblptru	equ	0xFF8
  6648                           tblptrh	equ	0xFF7
  6649                           tblptrl	equ	0xFF6
  6650                           tablat	equ	0xFF5
  6651                           prodh	equ	0xFF4
  6652                           prodl	equ	0xFF3
  6653                           intcon	equ	0xFF2
  6654                           intcon2	equ	0xFF1
  6655                           intcon3	equ	0xFF0
  6656                           postinc0	equ	0xFEE
  6657                           wreg	equ	0xFE8
  6658                           postdec1	equ	0xFE5
  6659                           fsr1l	equ	0xFE1
  6660                           indf2	equ	0xFDF
  6661                           postinc2	equ	0xFDE
  6662                           postdec2	equ	0xFDD
  6663                           fsr2h	equ	0xFDA
  6664                           fsr2l	equ	0xFD9
  6665                           status	equ	0xFD8
  6666                           
  6667 ;; *************** function ___awmod *****************
  6668 ;; Defined at:
  6669 ;;		line 8 in file "/Applications/microchip/xc8/v1.40/sources/common/awmod.c"
  6670 ;; Parameters:    Size  Location     Type
  6671 ;;  dividend        2   16[BANK0 ] int 
  6672 ;;  divisor         2   18[BANK0 ] int 
  6673 ;; Auto vars:     Size  Location     Type
  6674 ;;  sign            1   21[BANK0 ] unsigned char 
  6675 ;;  counter         1   20[BANK0 ] unsigned char 
  6676 ;; Return value:  Size  Location     Type
  6677 ;;                  2   16[BANK0 ] int 
  6678 ;; Registers used:
  6679 ;;		wreg, status,2, status,0
  6680 ;; Tracked objects:
  6681 ;;		On entry : 0/0
  6682 ;;		On exit  : 0/0
  6683 ;;		Unchanged: 0/0
  6684 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6685 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6686 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6687 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6688 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6689 ;;Total ram usage:        6 bytes
  6690 ;; Hardware stack levels used:    1
  6691 ;; Hardware stack levels required when called:    7
  6692 ;; This function calls:
  6693 ;;		Nothing
  6694 ;; This function is called by:
  6695 ;;		_bottle_count
  6696 ;;		_display_log
  6697 ;; This function uses a non-reentrant model
  6698 ;;
  6699                           
  6700                           	psect	text25
  6701  002A16                     __ptext25:
  6702                           	opt stack 0
  6703  002A16                     ___awmod:
  6704                           	opt stack 22
  6705                           
  6706                           ;incstack = 0
  6707  002A16  0E00               	movlw	0
  6708  002A18  0100               	movlb	0	; () banked
  6709  002A1A  6F95               	movwf	___awmod@sign& (0+255),b
  6710                           
  6711                           ; BSR set to: 0
  6712  002A1C  0100               	movlb	0	; () banked
  6713  002A1E  AF91               	btfss	(___awmod@dividend+1)& (0+255),7,b
  6714  002A20  D008               	goto	l4503
  6715                           
  6716                           ; BSR set to: 0
  6717  002A22  0100               	movlb	0	; () banked
  6718  002A24  6D90               	negf	___awmod@dividend& (0+255),b
  6719  002A26  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  6720  002A28  B0D8               	btfsc	status,0,c
  6721  002A2A  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  6722                           
  6723                           ; BSR set to: 0
  6724  002A2C  0E01               	movlw	1
  6725  002A2E  0100               	movlb	0	; () banked
  6726  002A30  6F95               	movwf	___awmod@sign& (0+255),b
  6727  002A32                     l4503:
  6728                           
  6729                           ; BSR set to: 0
  6730  002A32  0100               	movlb	0	; () banked
  6731  002A34  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6732  002A36  D005               	goto	l4507
  6733                           
  6734                           ; BSR set to: 0
  6735  002A38  0100               	movlb	0	; () banked
  6736  002A3A  6D92               	negf	___awmod@divisor& (0+255),b
  6737  002A3C  1F93               	comf	(___awmod@divisor+1)& (0+255),f,b
  6738  002A3E  B0D8               	btfsc	status,0,c
  6739  002A40  2B93               	incf	(___awmod@divisor+1)& (0+255),f,b
  6740  002A42                     l4507:
  6741                           
  6742                           ; BSR set to: 0
  6743  002A42  0100               	movlb	0	; () banked
  6744  002A44  5192               	movf	___awmod@divisor& (0+255),w,b
  6745  002A46  0100               	movlb	0	; () banked
  6746  002A48  1193               	iorwf	(___awmod@divisor+1)& (0+255),w,b
  6747  002A4A  B4D8               	btfsc	status,2,c
  6748  002A4C  D026               	goto	l4523
  6749                           
  6750                           ; BSR set to: 0
  6751  002A4E  0E01               	movlw	1
  6752  002A50  0100               	movlb	0	; () banked
  6753  002A52  6F94               	movwf	___awmod@counter& (0+255),b
  6754  002A54  D006               	goto	l4513
  6755  002A56                     l4511:
  6756                           
  6757                           ; BSR set to: 0
  6758  002A56  0100               	movlb	0	; () banked
  6759  002A58  90D8               	bcf	status,0,c
  6760  002A5A  3792               	rlcf	___awmod@divisor& (0+255),f,b
  6761  002A5C  3793               	rlcf	(___awmod@divisor+1)& (0+255),f,b
  6762  002A5E  0100               	movlb	0	; () banked
  6763  002A60  2B94               	incf	___awmod@counter& (0+255),f,b
  6764  002A62                     l4513:
  6765                           
  6766                           ; BSR set to: 0
  6767  002A62  0100               	movlb	0	; () banked
  6768  002A64  AF93               	btfss	(___awmod@divisor+1)& (0+255),7,b
  6769  002A66  D7F7               	goto	l4511
  6770  002A68                     l4515:
  6771                           
  6772                           ; BSR set to: 0
  6773  002A68  0100               	movlb	0	; () banked
  6774  002A6A  5192               	movf	___awmod@divisor& (0+255),w,b
  6775  002A6C  0100               	movlb	0	; () banked
  6776  002A6E  5D90               	subwf	___awmod@dividend& (0+255),w,b
  6777  002A70  0100               	movlb	0	; () banked
  6778  002A72  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  6779  002A74  0100               	movlb	0	; () banked
  6780  002A76  5991               	subwfb	(___awmod@dividend+1)& (0+255),w,b
  6781  002A78  A0D8               	btfss	status,0,c
  6782  002A7A  D008               	goto	l4519
  6783                           
  6784                           ; BSR set to: 0
  6785  002A7C  0100               	movlb	0	; () banked
  6786  002A7E  5192               	movf	___awmod@divisor& (0+255),w,b
  6787  002A80  0100               	movlb	0	; () banked
  6788  002A82  5F90               	subwf	___awmod@dividend& (0+255),f,b
  6789  002A84  0100               	movlb	0	; () banked
  6790  002A86  5193               	movf	(___awmod@divisor+1)& (0+255),w,b
  6791  002A88  0100               	movlb	0	; () banked
  6792  002A8A  5B91               	subwfb	(___awmod@dividend+1)& (0+255),f,b
  6793  002A8C                     l4519:
  6794                           
  6795                           ; BSR set to: 0
  6796  002A8C  0100               	movlb	0	; () banked
  6797  002A8E  90D8               	bcf	status,0,c
  6798  002A90  3393               	rrcf	(___awmod@divisor+1)& (0+255),f,b
  6799  002A92  3392               	rrcf	___awmod@divisor& (0+255),f,b
  6800                           
  6801                           ; BSR set to: 0
  6802  002A94  0100               	movlb	0	; () banked
  6803  002A96  2F94               	decfsz	___awmod@counter& (0+255),f,b
  6804  002A98  D7E7               	goto	l4515
  6805  002A9A                     l4523:
  6806                           
  6807                           ; BSR set to: 0
  6808  002A9A  0100               	movlb	0	; () banked
  6809  002A9C  5195               	movf	___awmod@sign& (0+255),w,b
  6810  002A9E  0100               	movlb	0	; () banked
  6811  002AA0  B4D8               	btfsc	status,2,c
  6812  002AA2  D005               	goto	l4527
  6813                           
  6814                           ; BSR set to: 0
  6815  002AA4  0100               	movlb	0	; () banked
  6816  002AA6  6D90               	negf	___awmod@dividend& (0+255),b
  6817  002AA8  1F91               	comf	(___awmod@dividend+1)& (0+255),f,b
  6818  002AAA  B0D8               	btfsc	status,0,c
  6819  002AAC  2B91               	incf	(___awmod@dividend+1)& (0+255),f,b
  6820  002AAE                     l4527:
  6821                           
  6822                           ; BSR set to: 0
  6823  002AAE  C090  F090         	movff	___awmod@dividend,?___awmod
  6824  002AB2  C091  F091         	movff	___awmod@dividend+1,?___awmod+1
  6825  002AB6  0012               	return	
  6826  002AB8                     __end_of___awmod:
  6827                           	opt stack 0
  6828                           tblptru	equ	0xFF8
  6829                           tblptrh	equ	0xFF7
  6830                           tblptrl	equ	0xFF6
  6831                           tablat	equ	0xFF5
  6832                           prodh	equ	0xFF4
  6833                           prodl	equ	0xFF3
  6834                           intcon	equ	0xFF2
  6835                           intcon2	equ	0xFF1
  6836                           intcon3	equ	0xFF0
  6837                           postinc0	equ	0xFEE
  6838                           wreg	equ	0xFE8
  6839                           postdec1	equ	0xFE5
  6840                           fsr1l	equ	0xFE1
  6841                           indf2	equ	0xFDF
  6842                           postinc2	equ	0xFDE
  6843                           postdec2	equ	0xFDD
  6844                           fsr2h	equ	0xFDA
  6845                           fsr2l	equ	0xFD9
  6846                           status	equ	0xFD8
  6847                           
  6848 ;; *************** function _I2C_Master_Init *****************
  6849 ;; Defined at:
  6850 ;;		line 13 in file "I2C.c"
  6851 ;; Parameters:    Size  Location     Type
  6852 ;;  c               4   29[BANK0 ] const unsigned long 
  6853 ;; Auto vars:     Size  Location     Type
  6854 ;;		None
  6855 ;; Return value:  Size  Location     Type
  6856 ;;                  1    wreg      void 
  6857 ;; Registers used:
  6858 ;;		wreg, status,2, status,0, cstack
  6859 ;; Tracked objects:
  6860 ;;		On entry : 0/0
  6861 ;;		On exit  : 0/0
  6862 ;;		Unchanged: 0/0
  6863 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6864 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6865 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6866 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6867 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6868 ;;Total ram usage:        8 bytes
  6869 ;; Hardware stack levels used:    1
  6870 ;; Hardware stack levels required when called:    8
  6871 ;; This function calls:
  6872 ;;		___lldiv
  6873 ;; This function is called by:
  6874 ;;		_main
  6875 ;; This function uses a non-reentrant model
  6876 ;;
  6877                           
  6878                           	psect	text26
  6879  002FDE                     __ptext26:
  6880                           	opt stack 0
  6881  002FDE                     _I2C_Master_Init:
  6882                           	opt stack 22
  6883                           
  6884                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  6885                           
  6886                           ; BSR set to: 0
  6887                           ;incstack = 0
  6888  002FDE  0E00               	movlw	0
  6889  002FE0  6EC7               	movwf	4039,c	;volatile
  6890                           
  6891                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  6892  002FE2  0E28               	movlw	40
  6893  002FE4  6EC6               	movwf	4038,c	;volatile
  6894                           
  6895                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  6896  002FE6  0E00               	movlw	0
  6897  002FE8  6EC5               	movwf	4037,c	;volatile
  6898                           
  6899                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  6900  002FEA  0E80               	movlw	128
  6901  002FEC  0100               	movlb	0	; () banked
  6902  002FEE  6F90               	movwf	___lldiv@dividend& (0+255),b
  6903  002FF0  0E96               	movlw	150
  6904  002FF2  6F91               	movwf	(___lldiv@dividend+1)& (0+255),b
  6905  002FF4  0E98               	movlw	152
  6906  002FF6  6F92               	movwf	(___lldiv@dividend+2)& (0+255),b
  6907  002FF8  0E00               	movlw	0
  6908  002FFA  6F93               	movwf	(___lldiv@dividend+3)& (0+255),b
  6909  002FFC  C09D  F0A1         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  6910  003000  C09E  F0A2         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  6911  003004  C09F  F0A3         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  6912  003008  C0A0  F0A4         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  6913  00300C  0E02               	movlw	2
  6914  00300E                     u4705:
  6915  00300E  90D8               	bcf	status,0,c
  6916  003010  0100               	movlb	0	; () banked
  6917  003012  37A1               	rlcf	??_I2C_Master_Init& (0+255),f,b
  6918  003014  37A2               	rlcf	(??_I2C_Master_Init+1)& (0+255),f,b
  6919  003016  37A3               	rlcf	(??_I2C_Master_Init+2)& (0+255),f,b
  6920  003018  37A4               	rlcf	(??_I2C_Master_Init+3)& (0+255),f,b
  6921  00301A  2EE8               	decfsz	wreg,f,c
  6922  00301C  D7F8               	goto	u4705
  6923  00301E  C0A1  F094         	movff	??_I2C_Master_Init,___lldiv@divisor
  6924  003022  C0A2  F095         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  6925  003026  C0A3  F096         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  6926  00302A  C0A4  F097         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  6927  00302E  ECA2  F013         	call	___lldiv	;wreg free
  6928  003032  0100               	movlb	0	; () banked
  6929  003034  0590               	decf	?___lldiv& (0+255),w,b
  6930  003036  6EC8               	movwf	4040,c	;volatile
  6931                           
  6932                           ; BSR set to: 0
  6933                           ;I2C.c: 20: TRISC3 = 1;
  6934  003038  8694               	bsf	3988,3,c	;volatile
  6935                           
  6936                           ; BSR set to: 0
  6937                           ;I2C.c: 21: TRISC4 = 1;
  6938  00303A  8894               	bsf	3988,4,c	;volatile
  6939                           
  6940                           ; BSR set to: 0
  6941  00303C  0012               	return		;funcret
  6942  00303E                     __end_of_I2C_Master_Init:
  6943                           	opt stack 0
  6944                           tblptru	equ	0xFF8
  6945                           tblptrh	equ	0xFF7
  6946                           tblptrl	equ	0xFF6
  6947                           tablat	equ	0xFF5
  6948                           prodh	equ	0xFF4
  6949                           prodl	equ	0xFF3
  6950                           intcon	equ	0xFF2
  6951                           intcon2	equ	0xFF1
  6952                           intcon3	equ	0xFF0
  6953                           postinc0	equ	0xFEE
  6954                           wreg	equ	0xFE8
  6955                           postdec1	equ	0xFE5
  6956                           fsr1l	equ	0xFE1
  6957                           indf2	equ	0xFDF
  6958                           postinc2	equ	0xFDE
  6959                           postdec2	equ	0xFDD
  6960                           fsr2h	equ	0xFDA
  6961                           fsr2l	equ	0xFD9
  6962                           status	equ	0xFD8
  6963                           
  6964 ;; *************** function ___lldiv *****************
  6965 ;; Defined at:
  6966 ;;		line 8 in file "/Applications/microchip/xc8/v1.40/sources/common/lldiv.c"
  6967 ;; Parameters:    Size  Location     Type
  6968 ;;  dividend        4   16[BANK0 ] unsigned long 
  6969 ;;  divisor         4   20[BANK0 ] unsigned long 
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;  quotient        4   24[BANK0 ] unsigned long 
  6972 ;;  counter         1   28[BANK0 ] unsigned char 
  6973 ;; Return value:  Size  Location     Type
  6974 ;;                  4   16[BANK0 ] unsigned long 
  6975 ;; Registers used:
  6976 ;;		wreg, status,2, status,0
  6977 ;; Tracked objects:
  6978 ;;		On entry : 0/0
  6979 ;;		On exit  : 0/0
  6980 ;;		Unchanged: 0/0
  6981 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6982 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6983 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6984 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6985 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6986 ;;Total ram usage:       13 bytes
  6987 ;; Hardware stack levels used:    1
  6988 ;; Hardware stack levels required when called:    7
  6989 ;; This function calls:
  6990 ;;		Nothing
  6991 ;; This function is called by:
  6992 ;;		_I2C_Master_Init
  6993 ;; This function uses a non-reentrant model
  6994 ;;
  6995                           
  6996                           	psect	text27
  6997  002744                     __ptext27:
  6998                           	opt stack 0
  6999  002744                     ___lldiv:
  7000                           	opt stack 22
  7001                           
  7002                           ; BSR set to: 0
  7003                           ;incstack = 0
  7004  002744  0E00               	movlw	0
  7005  002746  0100               	movlb	0	; () banked
  7006  002748  6F98               	movwf	___lldiv@quotient& (0+255),b
  7007  00274A  0E00               	movlw	0
  7008  00274C  6F99               	movwf	(___lldiv@quotient+1)& (0+255),b
  7009  00274E  0E00               	movlw	0
  7010  002750  6F9A               	movwf	(___lldiv@quotient+2)& (0+255),b
  7011  002752  0E00               	movlw	0
  7012  002754  6F9B               	movwf	(___lldiv@quotient+3)& (0+255),b
  7013                           
  7014                           ; BSR set to: 0
  7015  002756  0100               	movlb	0	; () banked
  7016  002758  5194               	movf	___lldiv@divisor& (0+255),w,b
  7017  00275A  0100               	movlb	0	; () banked
  7018  00275C  1195               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
  7019  00275E  0100               	movlb	0	; () banked
  7020  002760  1196               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
  7021  002762  0100               	movlb	0	; () banked
  7022  002764  1197               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
  7023  002766  B4D8               	btfsc	status,2,c
  7024  002768  D042               	goto	l944
  7025                           
  7026                           ; BSR set to: 0
  7027  00276A  0E01               	movlw	1
  7028  00276C  0100               	movlb	0	; () banked
  7029  00276E  6F9C               	movwf	___lldiv@counter& (0+255),b
  7030  002770  D008               	goto	l4539
  7031  002772                     l4537:
  7032                           
  7033                           ; BSR set to: 0
  7034  002772  0100               	movlb	0	; () banked
  7035  002774  90D8               	bcf	status,0,c
  7036  002776  3794               	rlcf	___lldiv@divisor& (0+255),f,b
  7037  002778  3795               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
  7038  00277A  3796               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
  7039  00277C  3797               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
  7040  00277E  0100               	movlb	0	; () banked
  7041  002780  2B9C               	incf	___lldiv@counter& (0+255),f,b
  7042  002782                     l4539:
  7043                           
  7044                           ; BSR set to: 0
  7045  002782  0100               	movlb	0	; () banked
  7046  002784  AF97               	btfss	(___lldiv@divisor+3)& (0+255),7,b
  7047  002786  D7F5               	goto	l4537
  7048  002788                     l4541:
  7049                           
  7050                           ; BSR set to: 0
  7051  002788  0100               	movlb	0	; () banked
  7052  00278A  90D8               	bcf	status,0,c
  7053  00278C  3798               	rlcf	___lldiv@quotient& (0+255),f,b
  7054  00278E  3799               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
  7055  002790  379A               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
  7056  002792  379B               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
  7057                           
  7058                           ; BSR set to: 0
  7059  002794  0100               	movlb	0	; () banked
  7060  002796  5194               	movf	___lldiv@divisor& (0+255),w,b
  7061  002798  0100               	movlb	0	; () banked
  7062  00279A  5D90               	subwf	___lldiv@dividend& (0+255),w,b
  7063  00279C  0100               	movlb	0	; () banked
  7064  00279E  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7065  0027A0  0100               	movlb	0	; () banked
  7066  0027A2  5991               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
  7067  0027A4  0100               	movlb	0	; () banked
  7068  0027A6  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7069  0027A8  0100               	movlb	0	; () banked
  7070  0027AA  5992               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
  7071  0027AC  0100               	movlb	0	; () banked
  7072  0027AE  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7073  0027B0  0100               	movlb	0	; () banked
  7074  0027B2  5993               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
  7075  0027B4  A0D8               	btfss	status,0,c
  7076  0027B6  D012               	goto	l4549
  7077                           
  7078                           ; BSR set to: 0
  7079  0027B8  0100               	movlb	0	; () banked
  7080  0027BA  5194               	movf	___lldiv@divisor& (0+255),w,b
  7081  0027BC  0100               	movlb	0	; () banked
  7082  0027BE  5F90               	subwf	___lldiv@dividend& (0+255),f,b
  7083  0027C0  0100               	movlb	0	; () banked
  7084  0027C2  5195               	movf	(___lldiv@divisor+1)& (0+255),w,b
  7085  0027C4  0100               	movlb	0	; () banked
  7086  0027C6  5B91               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
  7087  0027C8  0100               	movlb	0	; () banked
  7088  0027CA  5196               	movf	(___lldiv@divisor+2)& (0+255),w,b
  7089  0027CC  0100               	movlb	0	; () banked
  7090  0027CE  5B92               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
  7091  0027D0  0100               	movlb	0	; () banked
  7092  0027D2  5197               	movf	(___lldiv@divisor+3)& (0+255),w,b
  7093  0027D4  0100               	movlb	0	; () banked
  7094  0027D6  5B93               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
  7095                           
  7096                           ; BSR set to: 0
  7097  0027D8  0100               	movlb	0	; () banked
  7098  0027DA  8198               	bsf	___lldiv@quotient& (0+255),0,b
  7099  0027DC                     l4549:
  7100                           
  7101                           ; BSR set to: 0
  7102  0027DC  0100               	movlb	0	; () banked
  7103  0027DE  90D8               	bcf	status,0,c
  7104  0027E0  3397               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
  7105  0027E2  3396               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
  7106  0027E4  3395               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
  7107  0027E6  3394               	rrcf	___lldiv@divisor& (0+255),f,b
  7108                           
  7109                           ; BSR set to: 0
  7110  0027E8  0100               	movlb	0	; () banked
  7111  0027EA  2F9C               	decfsz	___lldiv@counter& (0+255),f,b
  7112  0027EC  D7CD               	goto	l4541
  7113  0027EE                     l944:
  7114                           
  7115                           ; BSR set to: 0
  7116  0027EE  C098  F090         	movff	___lldiv@quotient,?___lldiv
  7117  0027F2  C099  F091         	movff	___lldiv@quotient+1,?___lldiv+1
  7118  0027F6  C09A  F092         	movff	___lldiv@quotient+2,?___lldiv+2
  7119  0027FA  C09B  F093         	movff	___lldiv@quotient+3,?___lldiv+3
  7120                           
  7121                           ; BSR set to: 0
  7122  0027FE  0012               	return		;funcret
  7123  002800                     __end_of___lldiv:
  7124                           	opt stack 0
  7125                           tblptru	equ	0xFF8
  7126                           tblptrh	equ	0xFF7
  7127                           tblptrl	equ	0xFF6
  7128                           tablat	equ	0xFF5
  7129                           prodh	equ	0xFF4
  7130                           prodl	equ	0xFF3
  7131                           intcon	equ	0xFF2
  7132                           intcon2	equ	0xFF1
  7133                           intcon3	equ	0xFF0
  7134                           postinc0	equ	0xFEE
  7135                           wreg	equ	0xFE8
  7136                           postdec1	equ	0xFE5
  7137                           fsr1l	equ	0xFE1
  7138                           indf2	equ	0xFDF
  7139                           postinc2	equ	0xFDE
  7140                           postdec2	equ	0xFDD
  7141                           fsr2h	equ	0xFDA
  7142                           fsr2l	equ	0xFD9
  7143                           status	equ	0xFD8
  7144                           
  7145 ;; *************** function _isr *****************
  7146 ;; Defined at:
  7147 ;;		line 196 in file "main.c"
  7148 ;; Parameters:    Size  Location     Type
  7149 ;;		None
  7150 ;; Auto vars:     Size  Location     Type
  7151 ;;  i               1  114[COMRAM] unsigned char 
  7152 ;; Return value:  Size  Location     Type
  7153 ;;                  1    wreg      void 
  7154 ;; Registers used:
  7155 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7156 ;; Tracked objects:
  7157 ;;		On entry : 0/0
  7158 ;;		On exit  : 0/0
  7159 ;;		Unchanged: 0/0
  7160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7162 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7163 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7164 ;;      Totals:         3      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7165 ;;Total ram usage:       19 bytes
  7166 ;; Hardware stack levels used:    1
  7167 ;; Hardware stack levels required when called:    6
  7168 ;; This function calls:
  7169 ;;		_dec_to_hex
  7170 ;;		_read_time
  7171 ;;		_servo_rotate0
  7172 ;;		_servo_rotate1
  7173 ;;		_servo_rotate2
  7174 ;;		i2___wmul
  7175 ;;		i2_lcdInst
  7176 ;;		i2_printf
  7177 ;;		i2_read_sensor
  7178 ;; This function is called by:
  7179 ;;		Interrupt level 2
  7180 ;; This function uses a non-reentrant model
  7181 ;;
  7182                           
  7183                           	psect	intcode
  7184  000008                     __pintcode:
  7185                           	opt stack 0
  7186  000008                     _isr:
  7187                           	opt stack 20
  7188                           
  7189                           ; BSR set to: 0
  7190                           ;incstack = 0
  7191  000008  827F               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  7192  00000A  ED82  F008         	call	int_func,f	;refresh shadow registers
  7193                           tblptru	equ	0xFF8
  7194                           tblptrh	equ	0xFF7
  7195                           tblptrl	equ	0xFF6
  7196                           tablat	equ	0xFF5
  7197                           prodh	equ	0xFF4
  7198                           prodl	equ	0xFF3
  7199                           intcon	equ	0xFF2
  7200                           intcon2	equ	0xFF1
  7201                           intcon3	equ	0xFF0
  7202                           postinc0	equ	0xFEE
  7203                           wreg	equ	0xFE8
  7204                           postdec1	equ	0xFE5
  7205                           fsr1l	equ	0xFE1
  7206                           indf2	equ	0xFDF
  7207                           postinc2	equ	0xFDE
  7208                           postdec2	equ	0xFDD
  7209                           fsr2h	equ	0xFDA
  7210                           fsr2l	equ	0xFD9
  7211                           status	equ	0xFD8
  7212                           
  7213                           	psect	intcode_body
  7214  001104                     __pintcode_body:
  7215                           	opt stack 20
  7216  001104                     int_func:
  7217                           	opt stack 20
  7218  001104  0006               	pop		; remove dummy address from shadow register refresh
  7219  001106  CFFA F082          	movff	pclath,??_isr+2
  7220  00110A  CFFB F083          	movff	pclatu,??_isr+3
  7221  00110E  CFE9 F084          	movff	fsr0l,??_isr+4
  7222  001112  CFEA F085          	movff	fsr0h,??_isr+5
  7223  001116  CFE1 F086          	movff	fsr1l,??_isr+6
  7224  00111A  CFE2 F087          	movff	fsr1h,??_isr+7
  7225  00111E  CFD9 F088          	movff	fsr2l,??_isr+8
  7226  001122  CFDA F089          	movff	fsr2h,??_isr+9
  7227  001126  CFF3 F08A          	movff	prodl,??_isr+10
  7228  00112A  CFF4 F08B          	movff	prodh,??_isr+11
  7229  00112E  CFF6 F08C          	movff	tblptrl,??_isr+12
  7230  001132  CFF7 F08D          	movff	tblptrh,??_isr+13
  7231  001136  CFF8 F08E          	movff	tblptru,??_isr+14
  7232  00113A  CFF5 F08F          	movff	tablat,??_isr+15
  7233                           
  7234                           ;main.c: 197: if (INT1IF) {
  7235  00113E  B0F0               	btfsc	intcon3,0,c	;volatile
  7236  001140  D0D0               	goto	i2l5405
  7237  001142  D0ED               	goto	i2l283
  7238  001144                     i2l285:
  7239                           
  7240                           ;main.c: 200: can_count_disp = -1;
  7241  001144  0100               	movlb	0	; () banked
  7242  001146  69EB               	setf	_can_count_disp& (0+255),b
  7243  001148  69EC               	setf	(_can_count_disp+1)& (0+255),b
  7244                           
  7245                           ; BSR set to: 0
  7246                           ;main.c: 201: log_position += 1;
  7247  00114A  0100               	movlb	0	; () banked
  7248  00114C  4BED               	infsnz	_log_position& (0+255),f,b
  7249  00114E  2BEE               	incf	(_log_position+1)& (0+255),f,b
  7250                           
  7251                           ; BSR set to: 0
  7252                           ;main.c: 202: printf("reached logs");
  7253  001150  0EE8               	movlw	low STR_1
  7254  001152  6E0D               	movwf	i2printf@f,c
  7255  001154  0EFF               	movlw	high STR_1
  7256  001156  6E0E               	movwf	i2printf@f+1,c
  7257  001158  ECCD  F004         	call	i2_printf	;wreg free
  7258                           
  7259                           ;main.c: 203: curr_state = LOGS;
  7260  00115C  0E07               	movlw	7
  7261  00115E  D0B0               	goto	L14
  7262  001160                     i2l287:
  7263                           
  7264                           ;main.c: 206: LATAbits.LATA2 = 1;
  7265  001160  8489               	bsf	3977,2,c	;volatile
  7266                           
  7267                           ;main.c: 207: INT0IE = 1;
  7268  001162  88F2               	bsf	intcon,4,c	;volatile
  7269                           
  7270                           ;main.c: 208: INT2IE = 1;
  7271  001164  88F0               	bsf	intcon3,4,c	;volatile
  7272                           
  7273                           ;main.c: 209: TMR0IE = 1;
  7274  001166  8AF2               	bsf	intcon,5,c	;volatile
  7275                           
  7276                           ;main.c: 210: TMR0ON = 1;
  7277  001168  8ED5               	bsf	4053,7,c	;volatile
  7278                           
  7279                           ;main.c: 211: TMR0 = 0;
  7280  00116A  0E00               	movlw	0
  7281  00116C  6ED7               	movwf	4055,c	;volatile
  7282  00116E  0E00               	movlw	0
  7283  001170  6ED6               	movwf	4054,c	;volatile
  7284                           
  7285                           ;main.c: 212: printf("reached logs");
  7286  001172  0EE8               	movlw	low STR_1
  7287  001174  6E0D               	movwf	i2printf@f,c
  7288  001176  0EFF               	movlw	high STR_1
  7289  001178  6E0E               	movwf	i2printf@f+1,c
  7290  00117A  ECCD  F004         	call	i2_printf	;wreg free
  7291                           
  7292                           ;main.c: 213: read_time();
  7293  00117E  EC29  F017         	call	_read_time	;wreg free
  7294                           
  7295                           ;main.c: 214: start_time[1] = time[1];
  7296  001182  C0C4  F07B         	movff	_time+1,_start_time+1
  7297                           
  7298                           ;main.c: 215: start_time[0] = time[0];
  7299  001186  C0C3  F07A         	movff	_time,_start_time
  7300                           
  7301                           ;main.c: 217: bottlequeue_head = bottlequeue_tail = 0;
  7302  00118A  0E00               	movlw	0
  7303  00118C  0100               	movlb	0	; () banked
  7304  00118E  6FD5               	movwf	(_bottlequeue_tail+1)& (0+255),b
  7305  001190  0E00               	movlw	0
  7306  001192  6FD4               	movwf	_bottlequeue_tail& (0+255),b
  7307  001194  C0D4  F0D2         	movff	_bottlequeue_tail,_bottlequeue_head
  7308  001198  C0D5  F0D3         	movff	_bottlequeue_tail+1,_bottlequeue_head+1
  7309                           
  7310                           ; BSR set to: 0
  7311                           ;main.c: 219: lcdInst(0b00000001);
  7312  00119C  0E01               	movlw	1
  7313  00119E  EC44  F01A         	call	i2_lcdInst
  7314                           
  7315                           ;main.c: 220: can_count_disp = -1;
  7316  0011A2  0100               	movlb	0	; () banked
  7317  0011A4  69EB               	setf	_can_count_disp& (0+255),b
  7318  0011A6  69EC               	setf	(_can_count_disp+1)& (0+255),b
  7319                           
  7320                           ; BSR set to: 0
  7321                           ;main.c: 221: curr_state = OPERATION;
  7322  0011A8  0E02               	movlw	2
  7323  0011AA  D08A               	goto	L14
  7324  0011AC                     i2l5361:
  7325                           
  7326                           ;main.c: 224: can_count_disp += 1;
  7327  0011AC  0100               	movlb	0	; () banked
  7328  0011AE  4BEB               	infsnz	_can_count_disp& (0+255),f,b
  7329  0011B0  2BEC               	incf	(_can_count_disp+1)& (0+255),f,b
  7330                           
  7331                           ; BSR set to: 0
  7332                           ;main.c: 225: curr_state = CANCOUNT;
  7333  0011B2  0E05               	movlw	5
  7334  0011B4  0100               	movlb	0	; () banked
  7335  0011B6  6FEA               	movwf	_curr_state& (0+255),b
  7336  0011B8                     i2l5365:
  7337  0011B8  0E1F               	movlw	31
  7338  0011BA  1881               	xorwf	3969,w,c	;volatile
  7339  0011BC  A4D8               	btfss	status,2,c
  7340  0011BE  D0AD               	goto	i2l286
  7341  0011C0  D7FB               	goto	i2l5365
  7342  0011C2                     i2l5367:
  7343                           
  7344                           ;main.c: 229: operation_time = etime - stime;
  7345  0011C2  C07C  F080         	movff	_stime,??_isr
  7346  0011C6  C07D  F081         	movff	_stime+1,??_isr+1
  7347  0011CA  0100               	movlb	0	; () banked
  7348  0011CC  1F80               	comf	??_isr& (0+255),f,b
  7349  0011CE  1F81               	comf	(??_isr+1)& (0+255),f,b
  7350  0011D0  4B80               	infsnz	??_isr& (0+255),f,b
  7351  0011D2  2B81               	incf	(??_isr+1)& (0+255),f,b
  7352  0011D4  5078               	movf	_etime,w,c
  7353  0011D6  0100               	movlb	0	; () banked
  7354  0011D8  2580               	addwf	??_isr& (0+255),w,b
  7355  0011DA  0100               	movlb	0	; () banked
  7356  0011DC  6FE4               	movwf	_operation_time& (0+255),b
  7357  0011DE  5079               	movf	_etime+1,w,c
  7358  0011E0  0100               	movlb	0	; () banked
  7359  0011E2  2181               	addwfc	(??_isr+1)& (0+255),w,b
  7360  0011E4  0100               	movlb	0	; () banked
  7361  0011E6  6FE5               	movwf	(_operation_time+1)& (0+255),b
  7362                           
  7363                           ; BSR set to: 0
  7364                           ;main.c: 230: can_count_disp = -1;
  7365  0011E8  0100               	movlb	0	; () banked
  7366  0011EA  69EB               	setf	_can_count_disp& (0+255),b
  7367  0011EC  69EC               	setf	(_can_count_disp+1)& (0+255),b
  7368                           
  7369                           ; BSR set to: 0
  7370                           ;main.c: 231: curr_state = CANTIME;
  7371  0011EE  0E06               	movlw	6
  7372  0011F0  D067               	goto	L14
  7373  0011F2                     i2l293:
  7374                           
  7375                           ;main.c: 234: can_count_disp = -1;
  7376  0011F2  0100               	movlb	0	; () banked
  7377  0011F4  69EB               	setf	_can_count_disp& (0+255),b
  7378  0011F6  69EC               	setf	(_can_count_disp+1)& (0+255),b
  7379                           
  7380                           ; BSR set to: 0
  7381                           ;main.c: 235: curr_state = STANDBY;
  7382  0011F8  0E00               	movlw	0
  7383  0011FA  D062               	goto	L14
  7384  0011FC                     i2l294:
  7385                           
  7386                           ;main.c: 238: LATAbits.LATA2 = 0;
  7387  0011FC  9489               	bcf	3977,2,c	;volatile
  7388                           
  7389                           ;main.c: 239: INT0IE = 0;
  7390  0011FE  98F2               	bcf	intcon,4,c	;volatile
  7391                           
  7392                           ;main.c: 240: INT2IE = 0;
  7393  001200  98F0               	bcf	intcon3,4,c	;volatile
  7394                           
  7395                           ;main.c: 241: TMR0IE = 0;
  7396  001202  9AF2               	bcf	intcon,5,c	;volatile
  7397                           
  7398                           ;main.c: 242: TMR0ON = 0;
  7399  001204  9ED5               	bcf	4053,7,c	;volatile
  7400                           
  7401                           ;main.c: 244: read_time();
  7402  001206  EC29  F017         	call	_read_time	;wreg free
  7403                           
  7404                           ;main.c: 245: end_time[1] = time[1];
  7405  00120A  C0C4  F077         	movff	_time+1,_end_time+1
  7406                           
  7407                           ;main.c: 246: end_time[0] = time[0];
  7408  00120E  C0C3  F076         	movff	_time,_end_time
  7409                           
  7410                           ;main.c: 247: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  7411  001212  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  7412  001216  6A64               	clrf	dec_to_hex@num+1,c
  7413  001218  EC95  F00F         	call	_dec_to_hex	;wreg free
  7414  00121C  C063  F074         	movff	?_dec_to_hex,_isr$1501
  7415  001220  C064  F075         	movff	?_dec_to_hex+1,_isr$1501+1
  7416                           
  7417                           ;main.c: 247: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  7418  001224  C074  F001         	movff	_isr$1501,i2___wmul@multiplier
  7419  001228  C075  F002         	movff	_isr$1501+1,i2___wmul@multiplier+1
  7420  00122C  0E00               	movlw	0
  7421  00122E  6E04               	movwf	i2___wmul@multiplicand+1,c
  7422  001230  0E3C               	movlw	60
  7423  001232  6E03               	movwf	i2___wmul@multiplicand,c
  7424  001234  ECC0  F019         	call	i2___wmul	;wreg free
  7425  001238  C001  F080         	movff	?i2___wmul,??_isr
  7426  00123C  C002  F081         	movff	?i2___wmul+1,??_isr+1
  7427  001240  C07A  F063         	movff	_start_time,dec_to_hex@num
  7428  001244  6A64               	clrf	dec_to_hex@num+1,c
  7429  001246  EC95  F00F         	call	_dec_to_hex	;wreg free
  7430  00124A  5063               	movf	?_dec_to_hex,w,c
  7431  00124C  0100               	movlb	0	; () banked
  7432  00124E  2580               	addwf	??_isr& (0+255),w,b
  7433  001250  6E7C               	movwf	_stime,c
  7434  001252  5064               	movf	?_dec_to_hex+1,w,c
  7435  001254  0100               	movlb	0	; () banked
  7436  001256  2181               	addwfc	(??_isr+1)& (0+255),w,b
  7437  001258  6E7D               	movwf	_stime+1,c
  7438                           
  7439                           ; BSR set to: 0
  7440                           ;main.c: 248: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  7441  00125A  C077  F063         	movff	_end_time+1,dec_to_hex@num
  7442  00125E  6A64               	clrf	dec_to_hex@num+1,c
  7443  001260  EC95  F00F         	call	_dec_to_hex	;wreg free
  7444  001264  C063  F074         	movff	?_dec_to_hex,_isr$1501
  7445  001268  C064  F075         	movff	?_dec_to_hex+1,_isr$1501+1
  7446                           
  7447                           ;main.c: 248: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  7448  00126C  C074  F001         	movff	_isr$1501,i2___wmul@multiplier
  7449  001270  C075  F002         	movff	_isr$1501+1,i2___wmul@multiplier+1
  7450  001274  0E00               	movlw	0
  7451  001276  6E04               	movwf	i2___wmul@multiplicand+1,c
  7452  001278  0E3C               	movlw	60
  7453  00127A  6E03               	movwf	i2___wmul@multiplicand,c
  7454  00127C  ECC0  F019         	call	i2___wmul	;wreg free
  7455  001280  C001  F080         	movff	?i2___wmul,??_isr
  7456  001284  C002  F081         	movff	?i2___wmul+1,??_isr+1
  7457  001288  C076  F063         	movff	_end_time,dec_to_hex@num
  7458  00128C  6A64               	clrf	dec_to_hex@num+1,c
  7459  00128E  EC95  F00F         	call	_dec_to_hex	;wreg free
  7460  001292  5063               	movf	?_dec_to_hex,w,c
  7461  001294  0100               	movlb	0	; () banked
  7462  001296  2580               	addwf	??_isr& (0+255),w,b
  7463  001298  6E78               	movwf	_etime,c
  7464  00129A  5064               	movf	?_dec_to_hex+1,w,c
  7465  00129C  0100               	movlb	0	; () banked
  7466  00129E  2181               	addwfc	(??_isr+1)& (0+255),w,b
  7467  0012A0  6E79               	movwf	_etime+1,c
  7468                           
  7469                           ; BSR set to: 0
  7470                           ;main.c: 249: lcdInst(0b00000001);
  7471  0012A2  0E01               	movlw	1
  7472  0012A4  EC44  F01A         	call	i2_lcdInst
  7473                           
  7474                           ;main.c: 250: can_count_disp = -1;
  7475  0012A8  0100               	movlb	0	; () banked
  7476  0012AA  69EB               	setf	_can_count_disp& (0+255),b
  7477  0012AC  69EC               	setf	(_can_count_disp+1)& (0+255),b
  7478                           
  7479                           ; BSR set to: 0
  7480                           ;main.c: 251: curr_state = OPERATIONEND;
  7481  0012AE  0E03               	movlw	3
  7482  0012B0  D007               	goto	L14
  7483  0012B2                     i2l295:
  7484                           
  7485                           ;main.c: 254: LATAbits.LATA2 = 0;
  7486  0012B2  9489               	bcf	3977,2,c	;volatile
  7487                           
  7488                           ;main.c: 255: (INTCONbits.GIE = 0);
  7489  0012B4  9EF2               	bcf	intcon,7,c	;volatile
  7490                           
  7491                           ;main.c: 256: TMR0ON = 0;
  7492  0012B6  9ED5               	bcf	4053,7,c	;volatile
  7493                           
  7494                           ;main.c: 257: lcdInst(0b00000001);
  7495  0012B8  0E01               	movlw	1
  7496  0012BA  EC44  F01A         	call	i2_lcdInst
  7497                           
  7498                           ;main.c: 258: curr_state = EMERGENCYSTOP;
  7499  0012BE  0E01               	movlw	1
  7500  0012C0                     L14:
  7501  0012C0  0100               	movlb	0	; () banked
  7502  0012C2  6FEA               	movwf	_curr_state& (0+255),b
  7503                           
  7504                           ;main.c: 259: break;
  7505  0012C4  D02A               	goto	i2l286
  7506  0012C6                     i2l5399:
  7507                           
  7508                           ;main.c: 261: servo_rotate0(1);
  7509  0012C6  0E00               	movlw	0
  7510  0012C8  6E02               	movwf	servo_rotate0@degree+1,c
  7511  0012CA  0E01               	movlw	1
  7512  0012CC  6E01               	movwf	servo_rotate0@degree,c
  7513  0012CE  EC5C  F015         	call	_servo_rotate0	;wreg free
  7514                           
  7515                           ;main.c: 262: break;
  7516  0012D2  D023               	goto	i2l286
  7517  0012D4                     i2l5401:
  7518                           
  7519                           ;main.c: 264: servo_rotate0(2);
  7520  0012D4  0E00               	movlw	0
  7521  0012D6  6E02               	movwf	servo_rotate0@degree+1,c
  7522  0012D8  0E02               	movlw	2
  7523  0012DA  6E01               	movwf	servo_rotate0@degree,c
  7524  0012DC  EC5C  F015         	call	_servo_rotate0	;wreg free
  7525                           
  7526                           ;main.c: 266: }
  7527                           
  7528                           ;main.c: 265: break;
  7529  0012E0  D01C               	goto	i2l286
  7530  0012E2                     i2l5405:
  7531  0012E2  5081               	movf	3969,w,c	;volatile
  7532                           
  7533                           ; Switch size 1, requested type "space"
  7534                           ; Number of cases is 9, Range of values is 15 to 239
  7535                           ; switch strategies available:
  7536                           ; Name         Instructions Cycles
  7537                           ; simple_byte           28    15 (average)
  7538                           ;	Chosen strategy is simple_byte
  7539  0012E4  0A0F               	xorlw	15	; case 15
  7540  0012E6  B4D8               	btfsc	status,2,c
  7541  0012E8  D73B               	goto	i2l287
  7542  0012EA  0A10               	xorlw	16	; case 31
  7543  0012EC  B4D8               	btfsc	status,2,c
  7544  0012EE  D75E               	goto	i2l5361
  7545  0012F0  0A30               	xorlw	48	; case 47
  7546  0012F2  B4D8               	btfsc	status,2,c
  7547  0012F4  D766               	goto	i2l5367
  7548  0012F6  0A10               	xorlw	16	; case 63
  7549  0012F8  B4D8               	btfsc	status,2,c
  7550  0012FA  D77B               	goto	i2l293
  7551  0012FC  0A70               	xorlw	112	; case 79
  7552  0012FE  B4D8               	btfsc	status,2,c
  7553  001300  D77D               	goto	i2l294
  7554  001302  0A30               	xorlw	48	; case 127
  7555  001304  B4D8               	btfsc	status,2,c
  7556  001306  D7DF               	goto	i2l5399
  7557  001308  0AC0               	xorlw	192	; case 191
  7558  00130A  B4D8               	btfsc	status,2,c
  7559  00130C  D7E3               	goto	i2l5401
  7560  00130E  0A70               	xorlw	112	; case 207
  7561  001310  B4D8               	btfsc	status,2,c
  7562  001312  D7CF               	goto	i2l295
  7563  001314  0A20               	xorlw	32	; case 239
  7564  001316  B4D8               	btfsc	status,2,c
  7565  001318  D715               	goto	i2l285
  7566  00131A                     i2l286:
  7567                           
  7568                           ;main.c: 267: INT1IF = 0;
  7569  00131A  90F0               	bcf	intcon3,0,c	;volatile
  7570                           
  7571                           ;main.c: 268: }
  7572  00131C  D140               	goto	i2l322
  7573  00131E                     i2l283:
  7574                           
  7575                           ;main.c: 269: else if (INT0IF){
  7576  00131E  A2F2               	btfss	intcon,1,c	;volatile
  7577  001320  D014               	goto	i2l299
  7578                           
  7579                           ;main.c: 270: if(PORTAbits.RA3){
  7580  001322  A680               	btfss	3968,3,c	;volatile
  7581  001324  D010               	goto	i2l5413
  7582                           
  7583                           ;main.c: 271: read_sensor();
  7584  001326  EC67  F01A         	call	i2_read_sensor	;wreg free
  7585                           
  7586                           ;main.c: 273: _delay((unsigned long)((150)*(10000000/4000.0)));
  7587  00132A  0E02               	movlw	2
  7588  00132C  0100               	movlb	0	; () banked
  7589  00132E  6F81               	movwf	(??_isr+1)& (0+255),b
  7590  001330  0EE7               	movlw	231
  7591  001332  0100               	movlb	0	; () banked
  7592  001334  6F80               	movwf	??_isr& (0+255),b
  7593  001336  0E00               	movlw	0
  7594  001338                     i2u567_47:
  7595  001338  2EE8               	decfsz	wreg,f,c
  7596  00133A  D7FE               	bra	i2u567_47
  7597  00133C  2F80               	decfsz	??_isr& (0+255),f,b
  7598  00133E  D7FC               	bra	i2u567_47
  7599  001340  2F81               	decfsz	(??_isr+1)& (0+255),f,b
  7600  001342  D7FA               	bra	i2u567_47
  7601  001344  F000               	nop	
  7602  001346                     i2l5413:
  7603                           
  7604                           ;main.c: 274: }
  7605                           ;main.c: 275: INT0IF = 0;
  7606  001346  92F2               	bcf	intcon,1,c	;volatile
  7607                           
  7608                           ;main.c: 276: }
  7609  001348  D12A               	goto	i2l322
  7610  00134A                     i2l299:
  7611                           
  7612                           ;main.c: 277: else if (INT2IF){
  7613  00134A  A2F0               	btfss	intcon3,1,c	;volatile
  7614  00134C  D0B1               	goto	i2l302
  7615                           
  7616                           ;main.c: 278: if(PORTAbits.RA4){
  7617  00134E  A880               	btfss	3968,4,c	;volatile
  7618  001350  D0AD               	goto	i2l303
  7619                           
  7620                           ;main.c: 281: testdata = 1;
  7621  001352  0E00               	movlw	0
  7622  001354  0100               	movlb	0	; () banked
  7623  001356  6FE7               	movwf	(_testdata+1)& (0+255),b
  7624  001358  0E01               	movlw	1
  7625  00135A  6FE6               	movwf	_testdata& (0+255),b
  7626                           
  7627                           ; BSR set to: 0
  7628                           ;main.c: 282: data = testdata;
  7629  00135C  C0E6  F0D6         	movff	_testdata,_data
  7630  001360  C0E7  F0D7         	movff	_testdata+1,_data+1
  7631                           
  7632                           ;main.c: 283: switch (data){
  7633  001364  D080               	goto	i2l5471
  7634  001366                     i2l5421:
  7635                           
  7636                           ; BSR set to: 0
  7637                           ;main.c: 285: servo_rotate0(0);
  7638  001366  0E00               	movlw	0
  7639  001368  6E02               	movwf	servo_rotate0@degree+1,c
  7640  00136A  0E00               	movlw	0
  7641  00136C  6E01               	movwf	servo_rotate0@degree,c
  7642  00136E  EC5C  F015         	call	_servo_rotate0	;wreg free
  7643                           
  7644                           ;main.c: 286: servo_rotate2(0);
  7645  001372  0E00               	movlw	0
  7646  001374  6E10               	movwf	servo_rotate2@degree+1,c
  7647  001376  0E00               	movlw	0
  7648  001378  6E0F               	movwf	servo_rotate2@degree,c
  7649  00137A  EC00  F014         	call	_servo_rotate2	;wreg free
  7650                           
  7651                           ;main.c: 287: SOUP_LBL_count += 1;
  7652  00137E  0100               	movlb	0	; () banked
  7653  001380  4BCE               	infsnz	_SOUP_LBL_count& (0+255),f,b
  7654  001382  2BCF               	incf	(_SOUP_LBL_count+1)& (0+255),f,b
  7655                           
  7656                           ;main.c: 288: break;
  7657  001384  D093               	goto	i2l303
  7658  001386                     i2l5427:
  7659                           
  7660                           ; BSR set to: 0
  7661                           ;main.c: 290: servo_rotate0(0);
  7662  001386  0E00               	movlw	0
  7663  001388  6E02               	movwf	servo_rotate0@degree+1,c
  7664  00138A  0E00               	movlw	0
  7665  00138C  6E01               	movwf	servo_rotate0@degree,c
  7666  00138E  EC5C  F015         	call	_servo_rotate0	;wreg free
  7667                           
  7668                           ;main.c: 291: servo_rotate2(0);
  7669  001392  0E00               	movlw	0
  7670  001394  6E10               	movwf	servo_rotate2@degree+1,c
  7671  001396  0E00               	movlw	0
  7672  001398  6E0F               	movwf	servo_rotate2@degree,c
  7673  00139A  EC00  F014         	call	_servo_rotate2	;wreg free
  7674                           
  7675                           ;main.c: 292: SOUP_NOLBL_COUNT += 1;
  7676  00139E  0100               	movlb	0	; () banked
  7677  0013A0  4BD0               	infsnz	_SOUP_NOLBL_COUNT& (0+255),f,b
  7678  0013A2  2BD1               	incf	(_SOUP_NOLBL_COUNT+1)& (0+255),f,b
  7679                           
  7680                           ;main.c: 293: break;
  7681  0013A4  D083               	goto	i2l303
  7682  0013A6                     i2l5433:
  7683                           
  7684                           ; BSR set to: 0
  7685                           ;main.c: 295: servo_rotate0(0);
  7686  0013A6  0E00               	movlw	0
  7687  0013A8  6E02               	movwf	servo_rotate0@degree+1,c
  7688  0013AA  0E00               	movlw	0
  7689  0013AC  6E01               	movwf	servo_rotate0@degree,c
  7690  0013AE  EC5C  F015         	call	_servo_rotate0	;wreg free
  7691                           
  7692                           ;main.c: 296: servo_rotate2(120);
  7693  0013B2  0E00               	movlw	0
  7694  0013B4  6E10               	movwf	servo_rotate2@degree+1,c
  7695  0013B6  0E78               	movlw	120
  7696  0013B8  6E0F               	movwf	servo_rotate2@degree,c
  7697  0013BA  EC00  F014         	call	_servo_rotate2	;wreg free
  7698                           
  7699                           ;main.c: 297: POPCAN_TAB_count += 1;
  7700  0013BE  0100               	movlb	0	; () banked
  7701  0013C0  4BCC               	infsnz	_POPCAN_TAB_count& (0+255),f,b
  7702  0013C2  2BCD               	incf	(_POPCAN_TAB_count+1)& (0+255),f,b
  7703                           
  7704                           ;main.c: 298: break;
  7705  0013C4  D073               	goto	i2l303
  7706  0013C6                     i2l5439:
  7707                           
  7708                           ; BSR set to: 0
  7709                           ;main.c: 300: servo_rotate0(0);
  7710  0013C6  0E00               	movlw	0
  7711  0013C8  6E02               	movwf	servo_rotate0@degree+1,c
  7712  0013CA  0E00               	movlw	0
  7713  0013CC  6E01               	movwf	servo_rotate0@degree,c
  7714  0013CE  EC5C  F015         	call	_servo_rotate0	;wreg free
  7715                           
  7716                           ;main.c: 301: servo_rotate2(120);
  7717  0013D2  0E00               	movlw	0
  7718  0013D4  6E10               	movwf	servo_rotate2@degree+1,c
  7719  0013D6  0E78               	movlw	120
  7720  0013D8  6E0F               	movwf	servo_rotate2@degree,c
  7721  0013DA  EC00  F014         	call	_servo_rotate2	;wreg free
  7722                           
  7723                           ;main.c: 302: POPCAN_NOTAB_count += 1;
  7724  0013DE  0100               	movlb	0	; () banked
  7725  0013E0  4BCA               	infsnz	_POPCAN_NOTAB_count& (0+255),f,b
  7726  0013E2  2BCB               	incf	(_POPCAN_NOTAB_count+1)& (0+255),f,b
  7727                           
  7728                           ;main.c: 303: break;
  7729  0013E4  D063               	goto	i2l303
  7730  0013E6                     i2l5445:
  7731                           
  7732                           ; BSR set to: 0
  7733                           ;main.c: 305: servo_rotate0(120);
  7734  0013E6  0E00               	movlw	0
  7735  0013E8  6E02               	movwf	servo_rotate0@degree+1,c
  7736  0013EA  0E78               	movlw	120
  7737  0013EC  6E01               	movwf	servo_rotate0@degree,c
  7738  0013EE  EC5C  F015         	call	_servo_rotate0	;wreg free
  7739                           
  7740                           ;main.c: 306: servo_rotate1(0);
  7741  0013F2  0E00               	movlw	0
  7742  0013F4  6E10               	movwf	servo_rotate1@degree+1,c
  7743  0013F6  0E00               	movlw	0
  7744  0013F8  6E0F               	movwf	servo_rotate1@degree,c
  7745  0013FA  EC5A  F014         	call	_servo_rotate1	;wreg free
  7746                           
  7747                           ;main.c: 307: eskacaplbl_count += 1;
  7748  0013FE  0100               	movlb	0	; () banked
  7749  001400  4BDE               	infsnz	_eskacaplbl_count& (0+255),f,b
  7750  001402  2BDF               	incf	(_eskacaplbl_count+1)& (0+255),f,b
  7751                           
  7752                           ;main.c: 308: break;
  7753  001404  D053               	goto	i2l303
  7754  001406                     i2l5451:
  7755                           
  7756                           ; BSR set to: 0
  7757                           ;main.c: 310: servo_rotate0(120);
  7758  001406  0E00               	movlw	0
  7759  001408  6E02               	movwf	servo_rotate0@degree+1,c
  7760  00140A  0E78               	movlw	120
  7761  00140C  6E01               	movwf	servo_rotate0@degree,c
  7762  00140E  EC5C  F015         	call	_servo_rotate0	;wreg free
  7763                           
  7764                           ;main.c: 311: servo_rotate1(0);
  7765  001412  0E00               	movlw	0
  7766  001414  6E10               	movwf	servo_rotate1@degree+1,c
  7767  001416  0E00               	movlw	0
  7768  001418  6E0F               	movwf	servo_rotate1@degree,c
  7769  00141A  EC5A  F014         	call	_servo_rotate1	;wreg free
  7770                           
  7771                           ;main.c: 312: eskacap_count += 1;
  7772  00141E  0100               	movlb	0	; () banked
  7773  001420  4BDC               	infsnz	_eskacap_count& (0+255),f,b
  7774  001422  2BDD               	incf	(_eskacap_count+1)& (0+255),f,b
  7775                           
  7776                           ;main.c: 313: break;
  7777  001424  D043               	goto	i2l303
  7778  001426                     i2l5457:
  7779                           
  7780                           ; BSR set to: 0
  7781                           ;main.c: 315: servo_rotate0(120);
  7782  001426  0E00               	movlw	0
  7783  001428  6E02               	movwf	servo_rotate0@degree+1,c
  7784  00142A  0E78               	movlw	120
  7785  00142C  6E01               	movwf	servo_rotate0@degree,c
  7786  00142E  EC5C  F015         	call	_servo_rotate0	;wreg free
  7787                           
  7788                           ;main.c: 316: servo_rotate1(120);
  7789  001432  0E00               	movlw	0
  7790  001434  6E10               	movwf	servo_rotate1@degree+1,c
  7791  001436  0E78               	movlw	120
  7792  001438  6E0F               	movwf	servo_rotate1@degree,c
  7793  00143A  EC5A  F014         	call	_servo_rotate1	;wreg free
  7794                           
  7795                           ;main.c: 317: eskalbl_count += 1;
  7796  00143E  0100               	movlb	0	; () banked
  7797  001440  4BE0               	infsnz	_eskalbl_count& (0+255),f,b
  7798  001442  2BE1               	incf	(_eskalbl_count+1)& (0+255),f,b
  7799                           
  7800                           ;main.c: 318: break;
  7801  001444  D033               	goto	i2l303
  7802  001446                     i2l5463:
  7803                           
  7804                           ; BSR set to: 0
  7805                           ;main.c: 320: servo_rotate0(120);
  7806  001446  0E00               	movlw	0
  7807  001448  6E02               	movwf	servo_rotate0@degree+1,c
  7808  00144A  0E78               	movlw	120
  7809  00144C  6E01               	movwf	servo_rotate0@degree,c
  7810  00144E  EC5C  F015         	call	_servo_rotate0	;wreg free
  7811                           
  7812                           ;main.c: 321: servo_rotate1(120);
  7813  001452  0E00               	movlw	0
  7814  001454  6E10               	movwf	servo_rotate1@degree+1,c
  7815  001456  0E78               	movlw	120
  7816  001458  6E0F               	movwf	servo_rotate1@degree,c
  7817  00145A  EC5A  F014         	call	_servo_rotate1	;wreg free
  7818                           
  7819                           ;main.c: 322: eska_count += 1;
  7820  00145E  0100               	movlb	0	; () banked
  7821  001460  4BDA               	infsnz	_eska_count& (0+255),f,b
  7822  001462  2BDB               	incf	(_eska_count+1)& (0+255),f,b
  7823                           
  7824                           ; BSR set to: 0
  7825                           ;main.c: 324: }
  7826                           
  7827                           ;main.c: 323: break;
  7828  001464  D023               	goto	i2l303
  7829  001466                     i2l5471:
  7830                           
  7831                           ; BSR set to: 0
  7832  001466  C0D6  F080         	movff	_data,??_isr
  7833  00146A  C0D7  F081         	movff	_data+1,??_isr+1
  7834                           
  7835                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  7836                           ; Switch size 1, requested type "space"
  7837                           ; Number of cases is 1, Range of values is 0 to 0
  7838                           ; switch strategies available:
  7839                           ; Name         Instructions Cycles
  7840                           ; simple_byte            4     3 (average)
  7841                           ;	Chosen strategy is simple_byte
  7842  00146E  0100               	movlb	0	; () banked
  7843  001470  5181               	movf	(??_isr+1)& (0+255),w,b
  7844  001472  0A00               	xorlw	0	; case 0
  7845  001474  A4D8               	btfss	status,2,c
  7846  001476  D01A               	goto	i2l303
  7847                           
  7848                           ; BSR set to: 0
  7849                           ; Switch size 1, requested type "space"
  7850                           ; Number of cases is 8, Range of values is 0 to 7
  7851                           ; switch strategies available:
  7852                           ; Name         Instructions Cycles
  7853                           ; simple_byte           25    13 (average)
  7854                           ;	Chosen strategy is simple_byte
  7855  001478  0100               	movlb	0	; () banked
  7856  00147A  5180               	movf	??_isr& (0+255),w,b
  7857  00147C  0A00               	xorlw	0	; case 0
  7858  00147E  B4D8               	btfsc	status,2,c
  7859  001480  D772               	goto	i2l5421
  7860  001482  0A01               	xorlw	1	; case 1
  7861  001484  B4D8               	btfsc	status,2,c
  7862  001486  D77F               	goto	i2l5427
  7863  001488  0A03               	xorlw	3	; case 2
  7864  00148A  B4D8               	btfsc	status,2,c
  7865  00148C  D78C               	goto	i2l5433
  7866  00148E  0A01               	xorlw	1	; case 3
  7867  001490  B4D8               	btfsc	status,2,c
  7868  001492  D799               	goto	i2l5439
  7869  001494  0A07               	xorlw	7	; case 4
  7870  001496  B4D8               	btfsc	status,2,c
  7871  001498  D7A6               	goto	i2l5445
  7872  00149A  0A01               	xorlw	1	; case 5
  7873  00149C  B4D8               	btfsc	status,2,c
  7874  00149E  D7B3               	goto	i2l5451
  7875  0014A0  0A03               	xorlw	3	; case 6
  7876  0014A2  B4D8               	btfsc	status,2,c
  7877  0014A4  D7C0               	goto	i2l5457
  7878  0014A6  0A01               	xorlw	1	; case 7
  7879  0014A8  B4D8               	btfsc	status,2,c
  7880  0014AA  D7CD               	goto	i2l5463
  7881  0014AC                     i2l303:
  7882                           
  7883                           ;main.c: 325: }
  7884                           ;main.c: 326: INT2IF = 0;
  7885  0014AC  92F0               	bcf	intcon3,1,c	;volatile
  7886                           
  7887                           ;main.c: 327: }
  7888  0014AE  D077               	goto	i2l322
  7889  0014B0                     i2l302:
  7890                           
  7891                           ;main.c: 328: else if (TMR0IF){
  7892  0014B0  A4F2               	btfss	intcon,2,c	;volatile
  7893  0014B2  D05B               	goto	i2l5497
  7894                           
  7895                           ;main.c: 329: LATAbits.LATA2 = 0;
  7896  0014B4  9489               	bcf	3977,2,c	;volatile
  7897                           
  7898                           ;main.c: 330: TMR0ON = 0;
  7899  0014B6  9ED5               	bcf	4053,7,c	;volatile
  7900                           
  7901                           ;main.c: 331: read_time();
  7902  0014B8  EC29  F017         	call	_read_time	;wreg free
  7903                           
  7904                           ;main.c: 332: end_time[1] = time[1];
  7905  0014BC  C0C4  F077         	movff	_time+1,_end_time+1
  7906                           
  7907                           ;main.c: 333: end_time[0] = time[0];
  7908  0014C0  C0C3  F076         	movff	_time,_end_time
  7909                           
  7910                           ;main.c: 334: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  7911  0014C4  C07B  F063         	movff	_start_time+1,dec_to_hex@num
  7912  0014C8  6A64               	clrf	dec_to_hex@num+1,c
  7913  0014CA  EC95  F00F         	call	_dec_to_hex	;wreg free
  7914  0014CE  C063  F074         	movff	?_dec_to_hex,_isr$1501
  7915  0014D2  C064  F075         	movff	?_dec_to_hex+1,_isr$1501+1
  7916                           
  7917                           ;main.c: 334: stime = 60*dec_to_hex(start_time[1])+dec_to_hex(start_time[0]);
  7918  0014D6  C074  F001         	movff	_isr$1501,i2___wmul@multiplier
  7919  0014DA  C075  F002         	movff	_isr$1501+1,i2___wmul@multiplier+1
  7920  0014DE  0E00               	movlw	0
  7921  0014E0  6E04               	movwf	i2___wmul@multiplicand+1,c
  7922  0014E2  0E3C               	movlw	60
  7923  0014E4  6E03               	movwf	i2___wmul@multiplicand,c
  7924  0014E6  ECC0  F019         	call	i2___wmul	;wreg free
  7925  0014EA  C001  F080         	movff	?i2___wmul,??_isr
  7926  0014EE  C002  F081         	movff	?i2___wmul+1,??_isr+1
  7927  0014F2  C07A  F063         	movff	_start_time,dec_to_hex@num
  7928  0014F6  6A64               	clrf	dec_to_hex@num+1,c
  7929  0014F8  EC95  F00F         	call	_dec_to_hex	;wreg free
  7930  0014FC  5063               	movf	?_dec_to_hex,w,c
  7931  0014FE  0100               	movlb	0	; () banked
  7932  001500  2580               	addwf	??_isr& (0+255),w,b
  7933  001502  6E7C               	movwf	_stime,c
  7934  001504  5064               	movf	?_dec_to_hex+1,w,c
  7935  001506  0100               	movlb	0	; () banked
  7936  001508  2181               	addwfc	(??_isr+1)& (0+255),w,b
  7937  00150A  6E7D               	movwf	_stime+1,c
  7938                           
  7939                           ; BSR set to: 0
  7940                           ;main.c: 335: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  7941  00150C  C077  F063         	movff	_end_time+1,dec_to_hex@num
  7942  001510  6A64               	clrf	dec_to_hex@num+1,c
  7943  001512  EC95  F00F         	call	_dec_to_hex	;wreg free
  7944  001516  C063  F074         	movff	?_dec_to_hex,_isr$1501
  7945  00151A  C064  F075         	movff	?_dec_to_hex+1,_isr$1501+1
  7946                           
  7947                           ;main.c: 335: etime = 60*dec_to_hex(end_time[1])+dec_to_hex(end_time[0]);
  7948  00151E  C074  F001         	movff	_isr$1501,i2___wmul@multiplier
  7949  001522  C075  F002         	movff	_isr$1501+1,i2___wmul@multiplier+1
  7950  001526  0E00               	movlw	0
  7951  001528  6E04               	movwf	i2___wmul@multiplicand+1,c
  7952  00152A  0E3C               	movlw	60
  7953  00152C  6E03               	movwf	i2___wmul@multiplicand,c
  7954  00152E  ECC0  F019         	call	i2___wmul	;wreg free
  7955  001532  C001  F080         	movff	?i2___wmul,??_isr
  7956  001536  C002  F081         	movff	?i2___wmul+1,??_isr+1
  7957  00153A  C076  F063         	movff	_end_time,dec_to_hex@num
  7958  00153E  6A64               	clrf	dec_to_hex@num+1,c
  7959  001540  EC95  F00F         	call	_dec_to_hex	;wreg free
  7960  001544  5063               	movf	?_dec_to_hex,w,c
  7961  001546  0100               	movlb	0	; () banked
  7962  001548  2580               	addwf	??_isr& (0+255),w,b
  7963  00154A  6E78               	movwf	_etime,c
  7964  00154C  5064               	movf	?_dec_to_hex+1,w,c
  7965  00154E  0100               	movlb	0	; () banked
  7966  001550  2181               	addwfc	(??_isr+1)& (0+255),w,b
  7967  001552  6E79               	movwf	_etime+1,c
  7968                           
  7969                           ; BSR set to: 0
  7970                           ;main.c: 336: lcdInst(0b00000001);
  7971  001554  0E01               	movlw	1
  7972  001556  EC44  F01A         	call	i2_lcdInst
  7973                           
  7974                           ;main.c: 337: curr_state = OPERATIONEND;
  7975  00155A  0E03               	movlw	3
  7976  00155C  0100               	movlb	0	; () banked
  7977  00155E  6FEA               	movwf	_curr_state& (0+255),b
  7978                           
  7979                           ; BSR set to: 0
  7980                           ;main.c: 338: can_count_disp = -1;
  7981  001560  0100               	movlb	0	; () banked
  7982  001562  69EB               	setf	_can_count_disp& (0+255),b
  7983  001564  69EC               	setf	(_can_count_disp+1)& (0+255),b
  7984                           
  7985                           ; BSR set to: 0
  7986                           ;main.c: 339: TMR0IF = 0;
  7987  001566  94F2               	bcf	intcon,2,c	;volatile
  7988                           
  7989                           ;main.c: 340: }
  7990  001568  D01A               	goto	i2l322
  7991  00156A                     i2l5497:
  7992                           
  7993                           ;main.c: 343: lcdInst(0b10000000);
  7994  00156A  0E80               	movlw	128
  7995  00156C  EC44  F01A         	call	i2_lcdInst
  7996                           
  7997                           ;main.c: 344: printf("Invalid Action");
  7998  001570  0ECA               	movlw	low STR_3
  7999  001572  6E0D               	movwf	i2printf@f,c
  8000  001574  0EFF               	movlw	high STR_3
  8001  001576  6E0E               	movwf	i2printf@f+1,c
  8002  001578  ECCD  F004         	call	i2_printf	;wreg free
  8003                           
  8004                           ;main.c: 345: for(char i=0;i<100;i++){_delay((unsigned long)((10)*(10000000/4000.0)));};
  8005  00157C  0E00               	movlw	0
  8006  00157E  6E73               	movwf	isr@i,c
  8007  001580                     i2l5503:
  8008  001580  0E63               	movlw	99
  8009  001582  6473               	cpfsgt	isr@i,c
  8010  001584  D001               	goto	i2l5507
  8011  001586  D7F1               	goto	i2l5497
  8012  001588                     i2l5507:
  8013  001588  0E21               	movlw	33
  8014  00158A  0100               	movlb	0	; () banked
  8015  00158C  6F80               	movwf	??_isr& (0+255),b
  8016  00158E  0E76               	movlw	118
  8017  001590                     i2u568_47:
  8018  001590  2EE8               	decfsz	wreg,f,c
  8019  001592  D7FE               	bra	i2u568_47
  8020  001594  2F80               	decfsz	??_isr& (0+255),f,b
  8021  001596  D7FC               	bra	i2u568_47
  8022  001598  F000               	nop	
  8023  00159A  2A73               	incf	isr@i,f,c
  8024  00159C  D7F1               	goto	i2l5503
  8025  00159E                     i2l322:
  8026  00159E  C08F  FFF5         	movff	??_isr+15,tablat
  8027  0015A2  C08E  FFF8         	movff	??_isr+14,tblptru
  8028  0015A6  C08D  FFF7         	movff	??_isr+13,tblptrh
  8029  0015AA  C08C  FFF6         	movff	??_isr+12,tblptrl
  8030  0015AE  C08B  FFF4         	movff	??_isr+11,prodh
  8031  0015B2  C08A  FFF3         	movff	??_isr+10,prodl
  8032  0015B6  C089  FFDA         	movff	??_isr+9,fsr2h
  8033  0015BA  C088  FFD9         	movff	??_isr+8,fsr2l
  8034  0015BE  C087  FFE2         	movff	??_isr+7,fsr1h
  8035  0015C2  C086  FFE1         	movff	??_isr+6,fsr1l
  8036  0015C6  C085  FFEA         	movff	??_isr+5,fsr0h
  8037  0015CA  C084  FFE9         	movff	??_isr+4,fsr0l
  8038  0015CE  C083  FFFB         	movff	??_isr+3,pclatu
  8039  0015D2  C082  FFFA         	movff	??_isr+2,pclath
  8040  0015D6  927F               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  8041  0015D8  0011               	retfie		f
  8042  0015DA                     __end_of_isr:
  8043                           	opt stack 0
  8044                           pclatu	equ	0xFFB
  8045                           pclath	equ	0xFFA
  8046                           tblptru	equ	0xFF8
  8047                           tblptrh	equ	0xFF7
  8048                           tblptrl	equ	0xFF6
  8049                           tablat	equ	0xFF5
  8050                           prodh	equ	0xFF4
  8051                           prodl	equ	0xFF3
  8052                           intcon	equ	0xFF2
  8053                           intcon2	equ	0xFF1
  8054                           intcon3	equ	0xFF0
  8055                           postinc0	equ	0xFEE
  8056                           fsr0h	equ	0xFEA
  8057                           fsr0l	equ	0xFE9
  8058                           wreg	equ	0xFE8
  8059                           postdec1	equ	0xFE5
  8060                           fsr1h	equ	0xFE2
  8061                           fsr1l	equ	0xFE1
  8062                           indf2	equ	0xFDF
  8063                           postinc2	equ	0xFDE
  8064                           postdec2	equ	0xFDD
  8065                           fsr2h	equ	0xFDA
  8066                           fsr2l	equ	0xFD9
  8067                           status	equ	0xFD8
  8068                           
  8069 ;; *************** function i2_read_sensor *****************
  8070 ;; Defined at:
  8071 ;;		line 655 in file "main.c"
  8072 ;; Parameters:    Size  Location     Type
  8073 ;;		None
  8074 ;; Auto vars:     Size  Location     Type
  8075 ;;		None
  8076 ;; Return value:  Size  Location     Type
  8077 ;;                  1    wreg      void 
  8078 ;; Registers used:
  8079 ;;		None
  8080 ;; Tracked objects:
  8081 ;;		On entry : 0/0
  8082 ;;		On exit  : 0/0
  8083 ;;		Unchanged: 0/0
  8084 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8085 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8086 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8087 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8088 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8089 ;;Total ram usage:        0 bytes
  8090 ;; Hardware stack levels used:    1
  8091 ;; This function calls:
  8092 ;;		Nothing
  8093 ;; This function is called by:
  8094 ;;		_isr
  8095 ;; This function uses a non-reentrant model
  8096 ;;
  8097                           
  8098                           	psect	text29
  8099  0034CE                     __ptext29:
  8100                           	opt stack 0
  8101  0034CE                     i2_read_sensor:
  8102                           	opt stack 25
  8103                           
  8104                           ;main.c: 656: return;
  8105                           
  8106                           ;incstack = 0
  8107  0034CE  0012               	return		;funcret
  8108  0034D0                     __end_ofi2_read_sensor:
  8109                           	opt stack 0
  8110                           pclatu	equ	0xFFB
  8111                           pclath	equ	0xFFA
  8112                           tblptru	equ	0xFF8
  8113                           tblptrh	equ	0xFF7
  8114                           tblptrl	equ	0xFF6
  8115                           tablat	equ	0xFF5
  8116                           prodh	equ	0xFF4
  8117                           prodl	equ	0xFF3
  8118                           intcon	equ	0xFF2
  8119                           intcon2	equ	0xFF1
  8120                           intcon3	equ	0xFF0
  8121                           postinc0	equ	0xFEE
  8122                           fsr0h	equ	0xFEA
  8123                           fsr0l	equ	0xFE9
  8124                           wreg	equ	0xFE8
  8125                           postdec1	equ	0xFE5
  8126                           fsr1h	equ	0xFE2
  8127                           fsr1l	equ	0xFE1
  8128                           indf2	equ	0xFDF
  8129                           postinc2	equ	0xFDE
  8130                           postdec2	equ	0xFDD
  8131                           fsr2h	equ	0xFDA
  8132                           fsr2l	equ	0xFD9
  8133                           status	equ	0xFD8
  8134                           
  8135 ;; *************** function i2_printf *****************
  8136 ;; Defined at:
  8137 ;;		line 464 in file "/Applications/microchip/xc8/v1.40/sources/common/doprnt.c"
  8138 ;; Parameters:    Size  Location     Type
  8139 ;;  f               2   12[COMRAM] PTR const unsigned char 
  8140 ;;		 -> STR_43(18), STR_42(18), STR_41(18), STR_40(25), 
  8141 ;;		 -> STR_39(25), STR_38(25), STR_37(24), STR_36(23), 
  8142 ;;		 -> STR_35(18), STR_34(18), STR_33(10), STR_32(18), 
  8143 ;;		 -> STR_31(18), STR_30(18), STR_29(18), STR_28(18), 
  8144 ;;		 -> STR_27(18), STR_26(18), STR_25(18), STR_24(18), 
  8145 ;;		 -> STR_23(18), STR_22(18), STR_21(18), STR_20(18), 
  8146 ;;		 -> STR_19(18), STR_18(18), STR_17(18), STR_16(18), 
  8147 ;;		 -> STR_15(18), STR_14(10), STR_13(18), STR_12(18), 
  8148 ;;		 -> STR_11(18), STR_10(18), STR_9(17), STR_8(17), 
  8149 ;;		 -> STR_7(21), STR_6(21), STR_5(16), STR_4(15), 
  8150 ;;		 -> STR_3(15), STR_2(13), STR_1(13), 
  8151 ;; Auto vars:     Size  Location     Type
  8152 ;;  printf          4    0        struct .
  8153 ;;  printf          2   37[COMRAM] unsigned short 
  8154 ;;  printf          2   34[COMRAM] int 
  8155 ;;  printf          2   31[COMRAM] unsigned int 
  8156 ;;  printf          2   29[COMRAM] PTR void [1]
  8157 ;;		 -> ?i2_printf(2), ?_printf(2), 
  8158 ;;  printf          2   27[COMRAM] unsigned int 
  8159 ;;  printf          2   19[COMRAM] PTR const unsigned char 
  8160 ;;		 -> printf@c(1), 
  8161 ;;  printf          1   36[COMRAM] char 
  8162 ;;  printf          1   33[COMRAM] char 
  8163 ;;  printf          1   18[COMRAM] unsigned char 
  8164 ;; Return value:  Size  Location     Type
  8165 ;;                  2   12[COMRAM] int 
  8166 ;; Registers used:
  8167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8168 ;; Tracked objects:
  8169 ;;		On entry : 0/0
  8170 ;;		On exit  : 0/0
  8171 ;;		Unchanged: 0/0
  8172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8173 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8174 ;;      Locals:        21       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8175 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8176 ;;      Totals:        27       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8177 ;;Total ram usage:       27 bytes
  8178 ;; Hardware stack levels used:    1
  8179 ;; Hardware stack levels required when called:    2
  8180 ;; This function calls:
  8181 ;;		i2___lwdiv
  8182 ;;		i2___lwmod
  8183 ;;		i2___wmul
  8184 ;;		i2_isdigit
  8185 ;;		i2_putch
  8186 ;; This function is called by:
  8187 ;;		_isr
  8188 ;; This function uses a non-reentrant model
  8189 ;;
  8190                           
  8191                           	psect	text30
  8192  00099A                     __ptext30:
  8193                           	opt stack 0
  8194  00099A                     i2_printf:
  8195                           	opt stack 23
  8196                           
  8197                           ;doprnt.c: 466: va_list ap;
  8198                           ;doprnt.c: 499: signed char c;
  8199                           ;doprnt.c: 501: int width;
  8200                           ;doprnt.c: 506: signed char prec;
  8201                           ;doprnt.c: 508: unsigned short flag;
  8202                           ;doprnt.c: 523: union {
  8203                           ;doprnt.c: 524: unsigned long vd;
  8204                           ;doprnt.c: 525: double integ;
  8205                           ;doprnt.c: 526: } tmpval;
  8206                           ;doprnt.c: 528: unsigned int val;
  8207                           ;doprnt.c: 529: unsigned len;
  8208                           ;doprnt.c: 530: const char * cp;
  8209                           ;doprnt.c: 533: *ap = __va_start();
  8210                           
  8211                           ;incstack = 0
  8212  00099A  0E0F               	movlw	low (?i2_printf+2)
  8213  00099C  6E1E               	movwf	i2printf@ap,c
  8214  00099E  0E00               	movlw	high (?i2_printf+2)
  8215  0009A0  6E1F               	movwf	i2printf@ap+1,c
  8216                           
  8217                           ;doprnt.c: 536: while(c = *f++) {
  8218  0009A2  D3A3               	goto	i2l5267
  8219  0009A4                     i2l4961:
  8220                           
  8221                           ;doprnt.c: 538: if(c != '%')
  8222  0009A4  0E25               	movlw	37
  8223  0009A6  1825               	xorwf	i2printf@c,w,c
  8224  0009A8  B4D8               	btfsc	status,2,c
  8225  0009AA  D004               	goto	i2l4965
  8226                           
  8227                           ;doprnt.c: 540: {
  8228                           ;doprnt.c: 541: (putch(c) );
  8229  0009AC  5025               	movf	i2printf@c,w,c
  8230  0009AE  EC3E  F01A         	call	i2_putch
  8231                           
  8232                           ;doprnt.c: 542: continue;
  8233  0009B2  D39B               	goto	i2l5267
  8234  0009B4                     i2l4965:
  8235                           
  8236                           ;doprnt.c: 543: }
  8237                           ;doprnt.c: 546: width = 0;
  8238  0009B4  0E00               	movlw	0
  8239  0009B6  6E24               	movwf	i2printf@width+1,c
  8240  0009B8  0E00               	movlw	0
  8241  0009BA  6E23               	movwf	i2printf@width,c
  8242                           
  8243                           ;doprnt.c: 548: flag = 0;
  8244  0009BC  0E00               	movlw	0
  8245  0009BE  6E27               	movwf	i2printf@flag+1,c
  8246  0009C0  0E00               	movlw	0
  8247  0009C2  6E26               	movwf	i2printf@flag,c
  8248                           
  8249                           ;doprnt.c: 551: switch(*f) {
  8250                           
  8251                           ;doprnt.c: 550: for(;;) {
  8252  0009C4  D009               	goto	i2l4977
  8253  0009C6                     i2l4967:
  8254                           
  8255                           ;doprnt.c: 554: flag |= 0x08;
  8256  0009C6  8626               	bsf	i2printf@flag,3,c
  8257  0009C8  D005               	goto	L17
  8258  0009CA                     i2l4969:
  8259                           
  8260                           ;doprnt.c: 561: flag |= 0x01;
  8261  0009CA  8026               	bsf	i2printf@flag,0,c
  8262  0009CC  D003               	goto	L17
  8263  0009CE                     i2l4971:
  8264                           
  8265                           ;doprnt.c: 574: flag |= 0x800;
  8266  0009CE  8627               	bsf	i2printf@flag+1,3,c
  8267  0009D0  D001               	goto	L17
  8268  0009D2                     i2l4973:
  8269                           
  8270                           ;doprnt.c: 580: flag |= 0x04;
  8271  0009D2  8426               	bsf	i2printf@flag,2,c
  8272  0009D4                     L17:
  8273                           
  8274                           ;doprnt.c: 581: f++;
  8275  0009D4  4A0D               	infsnz	i2printf@f,f,c
  8276  0009D6  2A0E               	incf	i2printf@f+1,f,c
  8277  0009D8                     i2l4977:
  8278  0009D8  C00D  FFF6         	movff	i2printf@f,tblptrl
  8279  0009DC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8280  0009E0                     	if	0	;tblptru may be non-zero
  8281  0009E0                     	endif
  8282  0009E0                     	if	0	;tblptru may be non-zero
  8283  0009E0                     	endif
  8284  0009E0  0008               	tblrd		*
  8285  0009E2  50F5               	movf	tablat,w,c
  8286                           
  8287                           ; Switch size 1, requested type "space"
  8288                           ; Number of cases is 4, Range of values is 32 to 48
  8289                           ; switch strategies available:
  8290                           ; Name         Instructions Cycles
  8291                           ; simple_byte           13     7 (average)
  8292                           ;	Chosen strategy is simple_byte
  8293  0009E4  0A20               	xorlw	32	; case 32
  8294  0009E6  B4D8               	btfsc	status,2,c
  8295  0009E8  D7F0               	goto	i2l4969
  8296  0009EA  0A03               	xorlw	3	; case 35
  8297  0009EC  B4D8               	btfsc	status,2,c
  8298  0009EE  D7EF               	goto	i2l4971
  8299  0009F0  0A0E               	xorlw	14	; case 45
  8300  0009F2  B4D8               	btfsc	status,2,c
  8301  0009F4  D7E8               	goto	i2l4967
  8302  0009F6  0A1D               	xorlw	29	; case 48
  8303  0009F8  B4D8               	btfsc	status,2,c
  8304  0009FA  D7EB               	goto	i2l4973
  8305                           
  8306                           ;doprnt.c: 593: if(flag & 0x08)
  8307                           
  8308                           ;doprnt.c: 586: }
  8309                           
  8310                           ;doprnt.c: 585: break;
  8311  0009FC  B626               	btfsc	i2printf@flag,3,c
  8312                           
  8313                           ;doprnt.c: 594: flag &= ~0x04;
  8314  0009FE  9426               	bcf	i2printf@flag,2,c
  8315                           
  8316                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  8317  000A00  C00D  FFF6         	movff	i2printf@f,tblptrl
  8318  000A04  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8319  000A08                     	if	0	;tblptru may be non-zero
  8320  000A08                     	endif
  8321  000A08                     	if	0	;tblptru may be non-zero
  8322  000A08                     	endif
  8323  000A08  0008               	tblrd		*
  8324  000A0A  50F5               	movf	tablat,w,c
  8325  000A0C  ECF6  F019         	call	i2_isdigit
  8326  000A10  A0D8               	btfss	status,0,c
  8327  000A12  D033               	goto	i2l4993
  8328                           
  8329                           ;doprnt.c: 598: width = 0;
  8330  000A14  0E00               	movlw	0
  8331  000A16  6E24               	movwf	i2printf@width+1,c
  8332  000A18  0E00               	movlw	0
  8333  000A1A  6E23               	movwf	i2printf@width,c
  8334  000A1C                     i2l4985:
  8335                           
  8336                           ;doprnt.c: 600: width *= 10;
  8337  000A1C  C023  F001         	movff	i2printf@width,i2___wmul@multiplier
  8338  000A20  C024  F002         	movff	i2printf@width+1,i2___wmul@multiplier+1
  8339  000A24  0E00               	movlw	0
  8340  000A26  6E04               	movwf	i2___wmul@multiplicand+1,c
  8341  000A28  0E0A               	movlw	10
  8342  000A2A  6E03               	movwf	i2___wmul@multiplicand,c
  8343  000A2C  ECC0  F019         	call	i2___wmul	;wreg free
  8344  000A30  C001  F023         	movff	?i2___wmul,i2printf@width
  8345  000A34  C002  F024         	movff	?i2___wmul+1,i2printf@width+1
  8346                           
  8347                           ;doprnt.c: 601: width += *f++ - '0';
  8348  000A38  0ED0               	movlw	208
  8349  000A3A  6E0F               	movwf	??i2_printf& (0+255),c
  8350  000A3C  0EFF               	movlw	255
  8351  000A3E  6E10               	movwf	(??i2_printf+1)& (0+255),c
  8352  000A40  C00D  FFF6         	movff	i2printf@f,tblptrl
  8353  000A44  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8354  000A48                     	if	0	;tblptru may be non-zero
  8355  000A48                     	endif
  8356  000A48                     	if	0	;tblptru may be non-zero
  8357  000A48                     	endif
  8358  000A48  0008               	tblrd		*
  8359  000A4A  50F5               	movf	tablat,w,c
  8360  000A4C  6E11               	movwf	(??i2_printf+2)& (0+255),c
  8361  000A4E  6A12               	clrf	(??i2_printf+3)& (0+255),c
  8362  000A50  500F               	movf	??i2_printf,w,c
  8363  000A52  2611               	addwf	??i2_printf+2,f,c
  8364  000A54  5010               	movf	??i2_printf+1,w,c
  8365  000A56  2212               	addwfc	??i2_printf+3,f,c
  8366  000A58  5011               	movf	??i2_printf+2,w,c
  8367  000A5A  2623               	addwf	i2printf@width,f,c
  8368  000A5C  5012               	movf	??i2_printf+3,w,c
  8369  000A5E  2224               	addwfc	i2printf@width+1,f,c
  8370  000A60  4A0D               	infsnz	i2printf@f,f,c
  8371  000A62  2A0E               	incf	i2printf@f+1,f,c
  8372                           
  8373                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  8374  000A64  C00D  FFF6         	movff	i2printf@f,tblptrl
  8375  000A68  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8376  000A6C                     	if	0	;tblptru may be non-zero
  8377  000A6C                     	endif
  8378  000A6C                     	if	0	;tblptru may be non-zero
  8379  000A6C                     	endif
  8380  000A6C  0008               	tblrd		*
  8381  000A6E  50F5               	movf	tablat,w,c
  8382  000A70  ECF6  F019         	call	i2_isdigit
  8383  000A74  A0D8               	btfss	status,0,c
  8384  000A76  D018               	goto	i2l5001
  8385  000A78  D7D1               	goto	i2l4985
  8386  000A7A                     i2l4993:
  8387  000A7A  C00D  FFF6         	movff	i2printf@f,tblptrl
  8388  000A7E  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8389  000A82                     	if	0	;tblptru may be non-zero
  8390  000A82                     	endif
  8391  000A82                     	if	0	;tblptru may be non-zero
  8392  000A82                     	endif
  8393  000A82  0008               	tblrd		*
  8394  000A84  50F5               	movf	tablat,w,c
  8395  000A86  0A2A               	xorlw	42
  8396  000A88  A4D8               	btfss	status,2,c
  8397  000A8A  D00E               	goto	i2l5001
  8398                           
  8399                           ;doprnt.c: 605: width = (*(int *)__va_arg((*(int **)ap), (int)0));
  8400  000A8C  C01E  FFD9         	movff	i2printf@ap,fsr2l
  8401  000A90  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
  8402  000A94  CFDE F023          	movff	postinc2,i2printf@width
  8403  000A98  CFDD F024          	movff	postdec2,i2printf@width+1
  8404  000A9C  0E02               	movlw	2
  8405  000A9E  261E               	addwf	i2printf@ap,f,c
  8406  000AA0  0E00               	movlw	0
  8407  000AA2  221F               	addwfc	i2printf@ap+1,f,c
  8408                           
  8409                           ;doprnt.c: 606: f++;
  8410  000AA4  4A0D               	infsnz	i2printf@f,f,c
  8411  000AA6  2A0E               	incf	i2printf@f+1,f,c
  8412  000AA8                     i2l5001:
  8413                           
  8414                           ;doprnt.c: 608: }
  8415                           ;doprnt.c: 611: if(*f == '.') {
  8416  000AA8  C00D  FFF6         	movff	i2printf@f,tblptrl
  8417  000AAC  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8418  000AB0                     	if	0	;tblptru may be non-zero
  8419  000AB0                     	endif
  8420  000AB0                     	if	0	;tblptru may be non-zero
  8421  000AB0                     	endif
  8422  000AB0  0008               	tblrd		*
  8423  000AB2  50F5               	movf	tablat,w,c
  8424  000AB4  0A2E               	xorlw	46
  8425  000AB6  A4D8               	btfss	status,2,c
  8426  000AB8  D036               	goto	i2l5021
  8427                           
  8428                           ;doprnt.c: 612: flag |= 0x4000;
  8429  000ABA  8C27               	bsf	i2printf@flag+1,6,c
  8430                           
  8431                           ;doprnt.c: 613: f++;
  8432  000ABC  4A0D               	infsnz	i2printf@f,f,c
  8433  000ABE  2A0E               	incf	i2printf@f+1,f,c
  8434                           
  8435                           ;doprnt.c: 615: if(*f == '*') {
  8436  000AC0  C00D  FFF6         	movff	i2printf@f,tblptrl
  8437  000AC4  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8438  000AC8                     	if	0	;tblptru may be non-zero
  8439  000AC8                     	endif
  8440  000AC8                     	if	0	;tblptru may be non-zero
  8441  000AC8                     	endif
  8442  000AC8  0008               	tblrd		*
  8443  000ACA  50F5               	movf	tablat,w,c
  8444  000ACC  0A2A               	xorlw	42
  8445  000ACE  A4D8               	btfss	status,2,c
  8446  000AD0  D00D               	goto	i2l5013
  8447                           
  8448                           ;doprnt.c: 616: prec = (*(int *)__va_arg((*(int **)ap), (int)0));
  8449  000AD2  C01E  FFD9         	movff	i2printf@ap,fsr2l
  8450  000AD6  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
  8451  000ADA  50DF               	movf	indf2,w,c
  8452  000ADC  6E22               	movwf	i2printf@prec,c
  8453  000ADE  0E02               	movlw	2
  8454  000AE0  261E               	addwf	i2printf@ap,f,c
  8455  000AE2  0E00               	movlw	0
  8456  000AE4  221F               	addwfc	i2printf@ap+1,f,c
  8457                           
  8458                           ;doprnt.c: 617: f++;
  8459  000AE6  4A0D               	infsnz	i2printf@f,f,c
  8460  000AE8  2A0E               	incf	i2printf@f+1,f,c
  8461                           
  8462                           ;doprnt.c: 618: } else
  8463  000AEA  D08C               	goto	i2l5071
  8464  000AEC                     i2l5013:
  8465                           
  8466                           ;doprnt.c: 620: {
  8467                           ;doprnt.c: 621: prec = 0;
  8468  000AEC  0E00               	movlw	0
  8469  000AEE  6E22               	movwf	i2printf@prec,c
  8470                           
  8471                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  8472  000AF0  D00F               	goto	i2l5019
  8473  000AF2                     i2l5015:
  8474                           
  8475                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  8476  000AF2  C00D  FFF6         	movff	i2printf@f,tblptrl
  8477  000AF6  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8478  000AFA                     	if	0	;tblptru may be non-zero
  8479  000AFA                     	endif
  8480  000AFA                     	if	0	;tblptru may be non-zero
  8481  000AFA                     	endif
  8482  000AFA  0008               	tblrd		*
  8483  000AFC  CFF5 F00F          	movff	tablat,??i2_printf
  8484  000B00  5022               	movf	i2printf@prec,w,c
  8485  000B02  0D0A               	mullw	10
  8486  000B04  50F3               	movf	prodl,w,c
  8487  000B06  240F               	addwf	??i2_printf,w,c
  8488  000B08  0FD0               	addlw	208
  8489  000B0A  6E22               	movwf	i2printf@prec,c
  8490  000B0C  4A0D               	infsnz	i2printf@f,f,c
  8491  000B0E  2A0E               	incf	i2printf@f+1,f,c
  8492  000B10                     i2l5019:
  8493  000B10  C00D  FFF6         	movff	i2printf@f,tblptrl
  8494  000B14  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8495  000B18                     	if	0	;tblptru may be non-zero
  8496  000B18                     	endif
  8497  000B18                     	if	0	;tblptru may be non-zero
  8498  000B18                     	endif
  8499  000B18  0008               	tblrd		*
  8500  000B1A  50F5               	movf	tablat,w,c
  8501  000B1C  ECF6  F019         	call	i2_isdigit
  8502  000B20  A0D8               	btfss	status,0,c
  8503  000B22  D070               	goto	i2l5071
  8504  000B24  D7E6               	goto	i2l5015
  8505  000B26                     i2l5021:
  8506                           
  8507                           ;doprnt.c: 626: prec = 0;
  8508  000B26  0E00               	movlw	0
  8509  000B28  6E22               	movwf	i2printf@prec,c
  8510                           
  8511                           ;doprnt.c: 630: }
  8512                           ;doprnt.c: 635: switch(c = *f++) {
  8513  000B2A  D06C               	goto	i2l5071
  8514  000B2C                     i2l5023:
  8515                           
  8516                           ;doprnt.c: 691: flag |= 0x40;
  8517  000B2C  8C26               	bsf	i2printf@flag,6,c
  8518                           
  8519                           ;doprnt.c: 698: case 'i':
  8520                           ;doprnt.c: 699: break;
  8521                           
  8522                           ;doprnt.c: 697: case 'd':
  8523                           
  8524                           ;doprnt.c: 693: break;
  8525  000B2E  D08D               	goto	i2l5073
  8526  000B30                     i2l5025:
  8527                           
  8528                           ;doprnt.c: 714: flag |= 0x20;
  8529  000B30  8A26               	bsf	i2printf@flag,5,c
  8530  000B32                     i2l492:
  8531                           
  8532                           ;doprnt.c: 721: flag |= 0x80;
  8533  000B32  8E26               	bsf	i2printf@flag,7,c
  8534                           
  8535                           ;doprnt.c: 723: break;
  8536  000B34  D08A               	goto	i2l5073
  8537  000B36                     i2l5027:
  8538                           
  8539                           ;doprnt.c: 753: if(prec && prec < len)
  8540  000B36  5022               	movf	i2printf@prec,w,c
  8541  000B38  B4D8               	btfsc	status,2,c
  8542  000B3A  D010               	goto	i2l5033
  8543  000B3C  C022  F00F         	movff	i2printf@prec,??i2_printf
  8544  000B40  6A10               	clrf	(??i2_printf+1)& (0+255),c
  8545  000B42  BE0F               	btfsc	??i2_printf& (0+255),7,c
  8546  000B44  0610               	decf	(??i2_printf+1)& (0+255),f,c
  8547  000B46  501C               	movf	i2printf@len,w,c
  8548  000B48  5C0F               	subwf	??i2_printf,w,c
  8549  000B4A  501D               	movf	i2printf@len+1,w,c
  8550  000B4C  5810               	subwfb	??i2_printf+1,w,c
  8551  000B4E  B0D8               	btfsc	status,0,c
  8552  000B50  D005               	goto	i2l5033
  8553                           
  8554                           ;doprnt.c: 754: len = prec;
  8555  000B52  5022               	movf	i2printf@prec,w,c
  8556  000B54  6E1C               	movwf	i2printf@len,c
  8557  000B56  6A1D               	clrf	i2printf@len+1,c
  8558  000B58  BE1C               	btfsc	i2printf@len,7,c
  8559  000B5A  061D               	decf	i2printf@len+1,f,c
  8560  000B5C                     i2l5033:
  8561                           
  8562                           ;doprnt.c: 757: if(width > len)
  8563  000B5C  5023               	movf	i2printf@width,w,c
  8564  000B5E  5C1C               	subwf	i2printf@len,w,c
  8565  000B60  5024               	movf	i2printf@width+1,w,c
  8566  000B62  581D               	subwfb	i2printf@len+1,w,c
  8567  000B64  B0D8               	btfsc	status,0,c
  8568  000B66  D005               	goto	i2l5037
  8569                           
  8570                           ;doprnt.c: 758: width -= len;
  8571  000B68  501C               	movf	i2printf@len,w,c
  8572  000B6A  5E23               	subwf	i2printf@width,f,c
  8573  000B6C  501D               	movf	i2printf@len+1,w,c
  8574  000B6E  5A24               	subwfb	i2printf@width+1,f,c
  8575  000B70  D004               	goto	i2l5039
  8576  000B72                     i2l5037:
  8577                           
  8578                           ;doprnt.c: 759: else
  8579                           ;doprnt.c: 760: width = 0;
  8580  000B72  0E00               	movlw	0
  8581  000B74  6E24               	movwf	i2printf@width+1,c
  8582  000B76  0E00               	movlw	0
  8583  000B78  6E23               	movwf	i2printf@width,c
  8584  000B7A                     i2l5039:
  8585                           
  8586                           ;doprnt.c: 762: if(!(flag & 0x08))
  8587  000B7A  A626               	btfss	i2printf@flag,3,c
  8588  000B7C  D004               	goto	i2l5045
  8589  000B7E  D015               	goto	i2l5051
  8590  000B80                     i2l5043:
  8591                           
  8592                           ;doprnt.c: 765: (putch(' ') );
  8593  000B80  0E20               	movlw	32
  8594  000B82  EC3E  F01A         	call	i2_putch
  8595  000B86                     i2l5045:
  8596  000B86  0623               	decf	i2printf@width,f,c
  8597  000B88  A0D8               	btfss	status,0,c
  8598  000B8A  0624               	decf	i2printf@width+1,f,c
  8599  000B8C  2823               	incf	i2printf@width,w,c
  8600  000B8E  E1F8               	bnz	i2l5043
  8601  000B90  2824               	incf	i2printf@width+1,w,c
  8602  000B92  B4D8               	btfsc	status,2,c
  8603  000B94  D00A               	goto	i2l5051
  8604  000B96  D7F4               	goto	i2l5043
  8605  000B98                     i2l5047:
  8606                           
  8607                           ;doprnt.c: 768: (putch(*cp++) );
  8608  000B98  C014  FFD9         	movff	i2printf@cp,fsr2l
  8609  000B9C  C015  FFDA         	movff	i2printf@cp+1,fsr2h
  8610  000BA0  50DF               	movf	indf2,w,c
  8611  000BA2  EC3E  F01A         	call	i2_putch
  8612  000BA6  4A14               	infsnz	i2printf@cp,f,c
  8613  000BA8  2A15               	incf	i2printf@cp+1,f,c
  8614  000BAA                     i2l5051:
  8615  000BAA  061C               	decf	i2printf@len,f,c
  8616  000BAC  A0D8               	btfss	status,0,c
  8617  000BAE  061D               	decf	i2printf@len+1,f,c
  8618  000BB0  281C               	incf	i2printf@len,w,c
  8619  000BB2  E1F2               	bnz	i2l5047
  8620  000BB4  281D               	incf	i2printf@len+1,w,c
  8621  000BB6  A4D8               	btfss	status,2,c
  8622  000BB8  D7EF               	goto	i2l5047
  8623                           
  8624                           ;doprnt.c: 770: if(flag & 0x08)
  8625  000BBA  B626               	btfsc	i2printf@flag,3,c
  8626  000BBC  D004               	goto	i2l5057
  8627  000BBE  D295               	goto	i2l5267
  8628  000BC0                     i2l5055:
  8629                           
  8630                           ;doprnt.c: 772: (putch(' ') );
  8631  000BC0  0E20               	movlw	32
  8632  000BC2  EC3E  F01A         	call	i2_putch
  8633  000BC6                     i2l5057:
  8634  000BC6  0623               	decf	i2printf@width,f,c
  8635  000BC8  A0D8               	btfss	status,0,c
  8636  000BCA  0624               	decf	i2printf@width+1,f,c
  8637  000BCC  2823               	incf	i2printf@width,w,c
  8638  000BCE  E1F8               	bnz	i2l5055
  8639  000BD0  2824               	incf	i2printf@width+1,w,c
  8640  000BD2  B4D8               	btfsc	status,2,c
  8641  000BD4  D28A               	goto	i2l5267
  8642  000BD6  D7F4               	goto	i2l5055
  8643  000BD8                     i2l5059:
  8644                           
  8645                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  8646  000BD8  C01E  FFD9         	movff	i2printf@ap,fsr2l
  8647  000BDC  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
  8648  000BE0  50DF               	movf	indf2,w,c
  8649  000BE2  6E25               	movwf	i2printf@c,c
  8650  000BE4  0E02               	movlw	2
  8651  000BE6  261E               	addwf	i2printf@ap,f,c
  8652  000BE8  0E00               	movlw	0
  8653  000BEA  221F               	addwfc	i2printf@ap+1,f,c
  8654  000BEC                     i2l5063:
  8655                           
  8656                           ;doprnt.c: 805: cp = (char *)&c;
  8657  000BEC  0E25               	movlw	low i2printf@c
  8658  000BEE  6E14               	movwf	i2printf@cp,c
  8659  000BF0  0E00               	movlw	high i2printf@c
  8660  000BF2  6E15               	movwf	i2printf@cp+1,c
  8661                           
  8662                           ;doprnt.c: 806: len = 1;
  8663  000BF4  0E00               	movlw	0
  8664  000BF6  6E1D               	movwf	i2printf@len+1,c
  8665  000BF8  0E01               	movlw	1
  8666  000BFA  6E1C               	movwf	i2printf@len,c
  8667                           
  8668                           ;doprnt.c: 807: goto dostring;
  8669  000BFC  D79C               	goto	i2l5027
  8670  000BFE                     i2l5067:
  8671                           
  8672                           ;doprnt.c: 818: flag |= 0xC0;
  8673  000BFE  0EC0               	movlw	192
  8674  000C00  1226               	iorwf	i2printf@flag,f,c
  8675                           
  8676                           ;doprnt.c: 822: }
  8677                           
  8678                           ;doprnt.c: 819: break;
  8679  000C02  D023               	goto	i2l5073
  8680  000C04                     i2l5071:
  8681  000C04  C00D  FFF6         	movff	i2printf@f,tblptrl
  8682  000C08  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  8683  000C0C  4A0D               	infsnz	i2printf@f,f,c
  8684  000C0E  2A0E               	incf	i2printf@f+1,f,c
  8685  000C10                     	if	0	;tblptru may be non-zero
  8686  000C10                     	endif
  8687  000C10                     	if	0	;tblptru may be non-zero
  8688  000C10                     	endif
  8689  000C10  0008               	tblrd		*
  8690  000C12  CFF5 F025          	movff	tablat,i2printf@c
  8691  000C16  5025               	movf	i2printf@c,w,c
  8692                           
  8693                           ; Switch size 1, requested type "space"
  8694                           ; Number of cases is 8, Range of values is 0 to 120
  8695                           ; switch strategies available:
  8696                           ; Name         Instructions Cycles
  8697                           ; simple_byte           25    13 (average)
  8698                           ;	Chosen strategy is simple_byte
  8699  000C18  0A00               	xorlw	0	; case 0
  8700  000C1A  B4D8               	btfsc	status,2,c
  8701  000C1C  0012               	return	
  8702  000C1E  0A58               	xorlw	88	; case 88
  8703  000C20  B4D8               	btfsc	status,2,c
  8704  000C22  D786               	goto	i2l5025
  8705  000C24  0A3B               	xorlw	59	; case 99
  8706  000C26  B4D8               	btfsc	status,2,c
  8707  000C28  D7D7               	goto	i2l5059
  8708  000C2A  0A07               	xorlw	7	; case 100
  8709  000C2C  B4D8               	btfsc	status,2,c
  8710  000C2E  D00D               	goto	i2l5073
  8711  000C30  0A0D               	xorlw	13	; case 105
  8712  000C32  B4D8               	btfsc	status,2,c
  8713  000C34  D00A               	goto	i2l5073
  8714  000C36  0A06               	xorlw	6	; case 111
  8715  000C38  B4D8               	btfsc	status,2,c
  8716  000C3A  D778               	goto	i2l5023
  8717  000C3C  0A1A               	xorlw	26	; case 117
  8718  000C3E  B4D8               	btfsc	status,2,c
  8719  000C40  D7DE               	goto	i2l5067
  8720  000C42  0A0D               	xorlw	13	; case 120
  8721  000C44  B4D8               	btfsc	status,2,c
  8722  000C46  D775               	goto	i2l492
  8723  000C48  D7D1               	goto	i2l5063
  8724  000C4A                     i2l5073:
  8725                           
  8726                           ;doprnt.c: 1251: if((flag & (0xC0)) == 0x00)
  8727  000C4A  0EC0               	movlw	192
  8728  000C4C  1426               	andwf	i2printf@flag,w,c
  8729  000C4E  6E0F               	movwf	??i2_printf& (0+255),c
  8730  000C50  0E00               	movlw	0
  8731  000C52  1427               	andwf	i2printf@flag+1,w,c
  8732  000C54  6E10               	movwf	(??i2_printf+1)& (0+255),c
  8733  000C56  500F               	movf	??i2_printf,w,c
  8734  000C58  1010               	iorwf	??i2_printf+1,w,c
  8735  000C5A  A4D8               	btfss	status,2,c
  8736  000C5C  D015               	goto	i2l5085
  8737                           
  8738                           ;doprnt.c: 1253: {
  8739                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  8740  000C5E  C01E  FFD9         	movff	i2printf@ap,fsr2l
  8741  000C62  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
  8742  000C66  CFDE F020          	movff	postinc2,i2printf@val
  8743  000C6A  CFDD F021          	movff	postdec2,i2printf@val+1
  8744  000C6E  0E02               	movlw	2
  8745  000C70  261E               	addwf	i2printf@ap,f,c
  8746  000C72  0E00               	movlw	0
  8747  000C74  221F               	addwfc	i2printf@ap+1,f,c
  8748                           
  8749                           ;doprnt.c: 1261: if((int)val < 0) {
  8750  000C76  AE21               	btfss	i2printf@val+1,7,c
  8751  000C78  D013               	goto	i2l5089
  8752                           
  8753                           ;doprnt.c: 1262: flag |= 0x03;
  8754  000C7A  0E03               	movlw	3
  8755  000C7C  1226               	iorwf	i2printf@flag,f,c
  8756                           
  8757                           ;doprnt.c: 1263: val = -val;
  8758  000C7E  6C20               	negf	i2printf@val,c
  8759  000C80  1E21               	comf	i2printf@val+1,f,c
  8760  000C82  B0D8               	btfsc	status,0,c
  8761  000C84  2A21               	incf	i2printf@val+1,f,c
  8762                           
  8763                           ;doprnt.c: 1264: }
  8764                           ;doprnt.c: 1266: }
  8765  000C86  D00C               	goto	i2l5089
  8766  000C88                     i2l5085:
  8767                           
  8768                           ;doprnt.c: 1268: else
  8769                           ;doprnt.c: 1273: {
  8770                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  8771  000C88  C01E  FFD9         	movff	i2printf@ap,fsr2l
  8772  000C8C  C01F  FFDA         	movff	i2printf@ap+1,fsr2h
  8773  000C90  CFDE F020          	movff	postinc2,i2printf@val
  8774  000C94  CFDD F021          	movff	postdec2,i2printf@val+1
  8775  000C98  0E02               	movlw	2
  8776  000C9A  261E               	addwf	i2printf@ap,f,c
  8777  000C9C  0E00               	movlw	0
  8778  000C9E  221F               	addwfc	i2printf@ap+1,f,c
  8779  000CA0                     i2l5089:
  8780                           
  8781                           ;doprnt.c: 1287: }
  8782                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  8783  000CA0  5022               	movf	i2printf@prec,w,c
  8784  000CA2  A4D8               	btfss	status,2,c
  8785  000CA4  D04E               	goto	i2l5139
  8786  000CA6  5020               	movf	i2printf@val,w,c
  8787  000CA8  1021               	iorwf	i2printf@val+1,w,c
  8788  000CAA  A4D8               	btfss	status,2,c
  8789  000CAC  D04A               	goto	i2l5139
  8790                           
  8791                           ;doprnt.c: 1291: prec++;
  8792  000CAE  2A22               	incf	i2printf@prec,f,c
  8793                           
  8794                           ;doprnt.c: 1294: switch((unsigned char)(flag & (0xC0))) {
  8795  000CB0  D048               	goto	i2l5139
  8796  000CB2                     i2l5095:
  8797                           
  8798                           ;doprnt.c: 1302: case 0xC0:
  8799                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  8800  000CB2  0E01               	movlw	1
  8801  000CB4  6E25               	movwf	i2printf@c,c
  8802  000CB6                     i2l5097:
  8803  000CB6  0E05               	movlw	5
  8804  000CB8  1825               	xorwf	i2printf@c,w,c
  8805  000CBA  B4D8               	btfsc	status,2,c
  8806  000CBC  D050               	goto	i2l5141
  8807                           
  8808                           ;doprnt.c: 1306: if(val < dpowers[c])
  8809  000CBE  5025               	movf	i2printf@c,w,c
  8810  000CC0  0D02               	mullw	2
  8811  000CC2  0EA4               	movlw	low _dpowers
  8812  000CC4  24F3               	addwf	prodl,w,c
  8813  000CC6  6EF6               	movwf	tblptrl,c
  8814  000CC8  0EFD               	movlw	high _dpowers
  8815  000CCA  20F4               	addwfc	prodh,w,c
  8816  000CCC  6EF7               	movwf	tblptrh,c
  8817  000CCE                     	if	0	;There are less than 3 active tblptr bytes
  8818  000CCE                     	endif
  8819  000CCE  0009               	tblrd		*+
  8820  000CD0  50F5               	movf	tablat,w,c
  8821  000CD2  5C20               	subwf	i2printf@val,w,c
  8822  000CD4  0009               	tblrd		*+
  8823  000CD6  50F5               	movf	tablat,w,c
  8824  000CD8  5821               	subwfb	i2printf@val+1,w,c
  8825  000CDA  A0D8               	btfss	status,0,c
  8826  000CDC  D040               	goto	i2l5141
  8827                           
  8828                           ;doprnt.c: 1307: break;
  8829  000CDE  2A25               	incf	i2printf@c,f,c
  8830  000CE0  D7EA               	goto	i2l5097
  8831  000CE2                     i2l5109:
  8832                           
  8833                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  8834  000CE2  0E01               	movlw	1
  8835  000CE4  6E25               	movwf	i2printf@c,c
  8836  000CE6                     i2l5111:
  8837  000CE6  0E04               	movlw	4
  8838  000CE8  1825               	xorwf	i2printf@c,w,c
  8839  000CEA  B4D8               	btfsc	status,2,c
  8840  000CEC  D038               	goto	i2l5141
  8841                           
  8842                           ;doprnt.c: 1317: if(val < hexpowers[c])
  8843  000CEE  5025               	movf	i2printf@c,w,c
  8844  000CF0  0D02               	mullw	2
  8845  000CF2  0EAE               	movlw	low _hexpowers
  8846  000CF4  24F3               	addwf	prodl,w,c
  8847  000CF6  6EF6               	movwf	tblptrl,c
  8848  000CF8  0EFD               	movlw	high _hexpowers
  8849  000CFA  20F4               	addwfc	prodh,w,c
  8850  000CFC  6EF7               	movwf	tblptrh,c
  8851  000CFE                     	if	0	;There are less than 3 active tblptr bytes
  8852  000CFE                     	endif
  8853  000CFE  0009               	tblrd		*+
  8854  000D00  50F5               	movf	tablat,w,c
  8855  000D02  5C20               	subwf	i2printf@val,w,c
  8856  000D04  0009               	tblrd		*+
  8857  000D06  50F5               	movf	tablat,w,c
  8858  000D08  5821               	subwfb	i2printf@val+1,w,c
  8859  000D0A  A0D8               	btfss	status,0,c
  8860  000D0C  D028               	goto	i2l5141
  8861                           
  8862                           ;doprnt.c: 1318: break;
  8863  000D0E  2A25               	incf	i2printf@c,f,c
  8864  000D10  D7EA               	goto	i2l5111
  8865  000D12                     i2l5123:
  8866                           
  8867                           ;doprnt.c: 1328: for(c = 1 ; c != sizeof octpowers/sizeof octpowers[0] ; c++)
  8868  000D12  0E01               	movlw	1
  8869  000D14  6E25               	movwf	i2printf@c,c
  8870  000D16                     i2l5125:
  8871  000D16  0E06               	movlw	6
  8872  000D18  1825               	xorwf	i2printf@c,w,c
  8873  000D1A  B4D8               	btfsc	status,2,c
  8874  000D1C  D020               	goto	i2l5141
  8875                           
  8876                           ;doprnt.c: 1329: if(val < octpowers[c])
  8877  000D1E  5025               	movf	i2printf@c,w,c
  8878  000D20  0D02               	mullw	2
  8879  000D22  0E98               	movlw	low _octpowers
  8880  000D24  24F3               	addwf	prodl,w,c
  8881  000D26  6EF6               	movwf	tblptrl,c
  8882  000D28  0EFD               	movlw	high _octpowers
  8883  000D2A  20F4               	addwfc	prodh,w,c
  8884  000D2C  6EF7               	movwf	tblptrh,c
  8885  000D2E                     	if	0	;There are less than 3 active tblptr bytes
  8886  000D2E                     	endif
  8887  000D2E  0009               	tblrd		*+
  8888  000D30  50F5               	movf	tablat,w,c
  8889  000D32  5C20               	subwf	i2printf@val,w,c
  8890  000D34  0009               	tblrd		*+
  8891  000D36  50F5               	movf	tablat,w,c
  8892  000D38  5821               	subwfb	i2printf@val+1,w,c
  8893  000D3A  A0D8               	btfss	status,0,c
  8894  000D3C  D010               	goto	i2l5141
  8895                           
  8896                           ;doprnt.c: 1330: break;
  8897  000D3E  2A25               	incf	i2printf@c,f,c
  8898  000D40  D7EA               	goto	i2l5125
  8899  000D42                     i2l5139:
  8900  000D42  5026               	movf	i2printf@flag,w,c
  8901  000D44  0BC0               	andlw	192
  8902                           
  8903                           ; Switch size 1, requested type "space"
  8904                           ; Number of cases is 4, Range of values is 0 to 192
  8905                           ; switch strategies available:
  8906                           ; Name         Instructions Cycles
  8907                           ; simple_byte           13     7 (average)
  8908                           ;	Chosen strategy is simple_byte
  8909  000D46  0A00               	xorlw	0	; case 0
  8910  000D48  B4D8               	btfsc	status,2,c
  8911  000D4A  D7B3               	goto	i2l5095
  8912  000D4C  0A40               	xorlw	64	; case 64
  8913  000D4E  B4D8               	btfsc	status,2,c
  8914  000D50  D7E0               	goto	i2l5123
  8915  000D52  0AC0               	xorlw	192	; case 128
  8916  000D54  B4D8               	btfsc	status,2,c
  8917  000D56  D7C5               	goto	i2l5109
  8918  000D58  0A40               	xorlw	64	; case 192
  8919  000D5A  B4D8               	btfsc	status,2,c
  8920  000D5C  D7AA               	goto	i2l5095
  8921  000D5E                     i2l5141:
  8922                           
  8923                           ;doprnt.c: 1339: if(c < prec)
  8924  000D5E  5025               	movf	i2printf@c,w,c
  8925  000D60  0A80               	xorlw	128
  8926  000D62  6E0F               	movwf	??i2_printf& (0+255),c
  8927  000D64  5022               	movf	i2printf@prec,w,c
  8928  000D66  0A80               	xorlw	128
  8929  000D68  5C0F               	subwf	??i2_printf& (0+255),w,c
  8930  000D6A  B0D8               	btfsc	status,0,c
  8931  000D6C  D003               	goto	i2l5145
  8932                           
  8933                           ;doprnt.c: 1340: c = prec;
  8934  000D6E  C022  F025         	movff	i2printf@prec,i2printf@c
  8935  000D72  D009               	goto	i2l5149
  8936  000D74                     i2l5145:
  8937                           
  8938                           ;doprnt.c: 1341: else if(prec < c)
  8939  000D74  5022               	movf	i2printf@prec,w,c
  8940  000D76  0A80               	xorlw	128
  8941  000D78  6E0F               	movwf	??i2_printf& (0+255),c
  8942  000D7A  5025               	movf	i2printf@c,w,c
  8943  000D7C  0A80               	xorlw	128
  8944  000D7E  5C0F               	subwf	??i2_printf& (0+255),w,c
  8945  000D80  A0D8               	btfss	status,0,c
  8946                           
  8947                           ;doprnt.c: 1342: prec = c;
  8948  000D82  C025  F022         	movff	i2printf@c,i2printf@prec
  8949  000D86                     i2l5149:
  8950                           
  8951                           ;doprnt.c: 1345: if(width && flag & 0x03)
  8952  000D86  5023               	movf	i2printf@width,w,c
  8953  000D88  1024               	iorwf	i2printf@width+1,w,c
  8954  000D8A  B4D8               	btfsc	status,2,c
  8955  000D8C  D00D               	goto	i2l5155
  8956  000D8E  0E03               	movlw	3
  8957  000D90  1426               	andwf	i2printf@flag,w,c
  8958  000D92  6E0F               	movwf	??i2_printf& (0+255),c
  8959  000D94  0E00               	movlw	0
  8960  000D96  1427               	andwf	i2printf@flag+1,w,c
  8961  000D98  6E10               	movwf	(??i2_printf+1)& (0+255),c
  8962  000D9A  500F               	movf	??i2_printf,w,c
  8963  000D9C  1010               	iorwf	??i2_printf+1,w,c
  8964  000D9E  B4D8               	btfsc	status,2,c
  8965  000DA0  D003               	goto	i2l5155
  8966                           
  8967                           ;doprnt.c: 1346: width--;
  8968  000DA2  0623               	decf	i2printf@width,f,c
  8969  000DA4  A0D8               	btfss	status,0,c
  8970  000DA6  0624               	decf	i2printf@width+1,f,c
  8971  000DA8                     i2l5155:
  8972                           
  8973                           ;doprnt.c: 1348: if(flag & 0x4000) {
  8974  000DA8  AC27               	btfss	i2printf@flag+1,6,c
  8975  000DAA  D016               	goto	i2l5163
  8976                           
  8977                           ;doprnt.c: 1349: if(width > prec)
  8978  000DAC  0E80               	movlw	128
  8979  000DAE  BE22               	btfsc	i2printf@prec,7,c
  8980  000DB0  0E7F               	movlw	127
  8981  000DB2  6E0F               	movwf	??i2_printf& (0+255),c
  8982  000DB4  5023               	movf	i2printf@width,w,c
  8983  000DB6  5C22               	subwf	i2printf@prec,w,c
  8984  000DB8  5024               	movf	i2printf@width+1,w,c
  8985  000DBA  0A80               	xorlw	128
  8986  000DBC  580F               	subwfb	??i2_printf& (0+255),w,c
  8987  000DBE  B0D8               	btfsc	status,0,c
  8988  000DC0  D007               	goto	i2l5161
  8989                           
  8990                           ;doprnt.c: 1350: width -= prec;
  8991  000DC2  5022               	movf	i2printf@prec,w,c
  8992  000DC4  5E23               	subwf	i2printf@width,f,c
  8993  000DC6  0E00               	movlw	0
  8994  000DC8  BE22               	btfsc	i2printf@prec,7,c
  8995  000DCA  0EFF               	movlw	255
  8996  000DCC  5A24               	subwfb	i2printf@width+1,f,c
  8997  000DCE  D004               	goto	i2l5163
  8998  000DD0                     i2l5161:
  8999                           
  9000                           ;doprnt.c: 1351: else
  9001                           ;doprnt.c: 1352: width = 0;
  9002  000DD0  0E00               	movlw	0
  9003  000DD2  6E24               	movwf	i2printf@width+1,c
  9004  000DD4  0E00               	movlw	0
  9005  000DD6  6E23               	movwf	i2printf@width,c
  9006  000DD8                     i2l5163:
  9007                           
  9008                           ;doprnt.c: 1353: }
  9009                           ;doprnt.c: 1357: if((flag & (
  9010                           ;doprnt.c: 1359: 0x04|
  9011                           ;doprnt.c: 1361: (0xC0)|0x800)) == (0x40|0x800)) {
  9012  000DD8  0EC4               	movlw	196
  9013  000DDA  6E0F               	movwf	??i2_printf& (0+255),c
  9014  000DDC  0E08               	movlw	8
  9015  000DDE  6E10               	movwf	(??i2_printf+1)& (0+255),c
  9016  000DE0  C026  F011         	movff	i2printf@flag,??i2_printf+2
  9017  000DE4  C027  F012         	movff	i2printf@flag+1,??i2_printf+3
  9018  000DE8  500F               	movf	??i2_printf,w,c
  9019  000DEA  1611               	andwf	??i2_printf+2,f,c
  9020  000DEC  5010               	movf	??i2_printf+1,w,c
  9021  000DEE  1612               	andwf	??i2_printf+3,f,c
  9022  000DF0  0E40               	movlw	64
  9023  000DF2  1811               	xorwf	??i2_printf+2,w,c
  9024  000DF4  E10C               	bnz	i2l5169
  9025  000DF6  0E08               	movlw	8
  9026  000DF8  1812               	xorwf	??i2_printf+3,w,c
  9027  000DFA  A4D8               	btfss	status,2,c
  9028  000DFC  D008               	goto	i2l5169
  9029                           
  9030                           ;doprnt.c: 1362: if(width)
  9031  000DFE  5023               	movf	i2printf@width,w,c
  9032  000E00  1024               	iorwf	i2printf@width+1,w,c
  9033  000E02  B4D8               	btfsc	status,2,c
  9034  000E04  D028               	goto	i2l5177
  9035                           
  9036                           ;doprnt.c: 1363: width--;
  9037  000E06  0623               	decf	i2printf@width,f,c
  9038  000E08  A0D8               	btfss	status,0,c
  9039  000E0A  0624               	decf	i2printf@width+1,f,c
  9040                           
  9041                           ;doprnt.c: 1364: } else
  9042  000E0C  D024               	goto	i2l5177
  9043  000E0E                     i2l5169:
  9044                           
  9045                           ;doprnt.c: 1368: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  9046  000E0E  0EC0               	movlw	192
  9047  000E10  6E0F               	movwf	??i2_printf& (0+255),c
  9048  000E12  0E08               	movlw	8
  9049  000E14  6E10               	movwf	(??i2_printf+1)& (0+255),c
  9050  000E16  C026  F011         	movff	i2printf@flag,??i2_printf+2
  9051  000E1A  C027  F012         	movff	i2printf@flag+1,??i2_printf+3
  9052  000E1E  500F               	movf	??i2_printf,w,c
  9053  000E20  1611               	andwf	??i2_printf+2,f,c
  9054  000E22  5010               	movf	??i2_printf+1,w,c
  9055  000E24  1612               	andwf	??i2_printf+3,f,c
  9056  000E26  0E80               	movlw	128
  9057  000E28  1811               	xorwf	??i2_printf+2,w,c
  9058  000E2A  E115               	bnz	i2l5177
  9059  000E2C  0E08               	movlw	8
  9060  000E2E  1812               	xorwf	??i2_printf+3,w,c
  9061  000E30  A4D8               	btfss	status,2,c
  9062  000E32  D011               	goto	i2l5177
  9063                           
  9064                           ;doprnt.c: 1372: if(width > 2)
  9065  000E34  BE24               	btfsc	i2printf@width+1,7,c
  9066  000E36  D00B               	goto	i2l5175
  9067  000E38  5024               	movf	i2printf@width+1,w,c
  9068  000E3A  E104               	bnz	i2u524_40
  9069  000E3C  0E03               	movlw	3
  9070  000E3E  5C23               	subwf	i2printf@width,w,c
  9071  000E40  A0D8               	btfss	status,0,c
  9072  000E42  D005               	goto	i2l5175
  9073  000E44                     i2u524_40:
  9074                           
  9075                           ;doprnt.c: 1373: width -= 2;
  9076  000E44  0EFE               	movlw	254
  9077  000E46  2623               	addwf	i2printf@width,f,c
  9078  000E48  0EFF               	movlw	255
  9079  000E4A  2224               	addwfc	i2printf@width+1,f,c
  9080  000E4C  D004               	goto	i2l5177
  9081  000E4E                     i2l5175:
  9082                           
  9083                           ;doprnt.c: 1374: else
  9084                           ;doprnt.c: 1375: width = 0;
  9085  000E4E  0E00               	movlw	0
  9086  000E50  6E24               	movwf	i2printf@width+1,c
  9087  000E52  0E00               	movlw	0
  9088  000E54  6E23               	movwf	i2printf@width,c
  9089  000E56                     i2l5177:
  9090                           
  9091                           ;doprnt.c: 1376: }
  9092                           ;doprnt.c: 1381: if(width > c)
  9093  000E56  0E80               	movlw	128
  9094  000E58  BE25               	btfsc	i2printf@c,7,c
  9095  000E5A  0E7F               	movlw	127
  9096  000E5C  6E0F               	movwf	??i2_printf& (0+255),c
  9097  000E5E  5023               	movf	i2printf@width,w,c
  9098  000E60  5C25               	subwf	i2printf@c,w,c
  9099  000E62  5024               	movf	i2printf@width+1,w,c
  9100  000E64  0A80               	xorlw	128
  9101  000E66  580F               	subwfb	??i2_printf& (0+255),w,c
  9102  000E68  B0D8               	btfsc	status,0,c
  9103  000E6A  D007               	goto	i2l5181
  9104                           
  9105                           ;doprnt.c: 1382: width -= c;
  9106  000E6C  5025               	movf	i2printf@c,w,c
  9107  000E6E  5E23               	subwf	i2printf@width,f,c
  9108  000E70  0E00               	movlw	0
  9109  000E72  BE25               	btfsc	i2printf@c,7,c
  9110  000E74  0EFF               	movlw	255
  9111  000E76  5A24               	subwfb	i2printf@width+1,f,c
  9112  000E78  D004               	goto	i2l5183
  9113  000E7A                     i2l5181:
  9114                           
  9115                           ;doprnt.c: 1383: else
  9116                           ;doprnt.c: 1384: width = 0;
  9117  000E7A  0E00               	movlw	0
  9118  000E7C  6E24               	movwf	i2printf@width+1,c
  9119  000E7E  0E00               	movlw	0
  9120  000E80  6E23               	movwf	i2printf@width,c
  9121  000E82                     i2l5183:
  9122                           
  9123                           ;doprnt.c: 1387: if(flag & 0x04) {
  9124  000E82  A426               	btfss	i2printf@flag,2,c
  9125  000E84  D042               	goto	i2l5209
  9126                           
  9127                           ;doprnt.c: 1392: if(flag & 0x03)
  9128  000E86  0E03               	movlw	3
  9129  000E88  1426               	andwf	i2printf@flag,w,c
  9130  000E8A  6E0F               	movwf	??i2_printf& (0+255),c
  9131  000E8C  0E00               	movlw	0
  9132  000E8E  1427               	andwf	i2printf@flag+1,w,c
  9133  000E90  6E10               	movwf	(??i2_printf+1)& (0+255),c
  9134  000E92  500F               	movf	??i2_printf,w,c
  9135  000E94  1010               	iorwf	??i2_printf+1,w,c
  9136  000E96  B4D8               	btfsc	status,2,c
  9137  000E98  D004               	goto	i2l546
  9138                           
  9139                           ;doprnt.c: 1393: (putch('-') );
  9140  000E9A  0E2D               	movlw	45
  9141  000E9C  EC3E  F01A         	call	i2_putch
  9142  000EA0  D029               	goto	i2l5203
  9143  000EA2                     i2l546:
  9144                           
  9145                           ;doprnt.c: 1396: else
  9146                           ;doprnt.c: 1399: if(flag & 0x01)
  9147  000EA2  A026               	btfss	i2printf@flag,0,c
  9148  000EA4  D004               	goto	i2l5191
  9149                           
  9150                           ;doprnt.c: 1400: (putch(' ') );
  9151  000EA6  0E20               	movlw	32
  9152  000EA8  EC3E  F01A         	call	i2_putch
  9153  000EAC  D023               	goto	i2l5203
  9154  000EAE                     i2l5191:
  9155                           
  9156                           ;doprnt.c: 1403: else if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  9157  000EAE  0EC0               	movlw	192
  9158  000EB0  6E0F               	movwf	??i2_printf& (0+255),c
  9159  000EB2  0E08               	movlw	8
  9160  000EB4  6E10               	movwf	(??i2_printf+1)& (0+255),c
  9161  000EB6  C026  F011         	movff	i2printf@flag,??i2_printf+2
  9162  000EBA  C027  F012         	movff	i2printf@flag+1,??i2_printf+3
  9163  000EBE  500F               	movf	??i2_printf,w,c
  9164  000EC0  1611               	andwf	??i2_printf+2,f,c
  9165  000EC2  5010               	movf	??i2_printf+1,w,c
  9166  000EC4  1612               	andwf	??i2_printf+3,f,c
  9167  000EC6  0E80               	movlw	128
  9168  000EC8  1811               	xorwf	??i2_printf+2,w,c
  9169  000ECA  E114               	bnz	i2l5203
  9170  000ECC  0E08               	movlw	8
  9171  000ECE  1812               	xorwf	??i2_printf+3,w,c
  9172  000ED0  A4D8               	btfss	status,2,c
  9173  000ED2  D010               	goto	i2l5203
  9174                           
  9175                           ;doprnt.c: 1404: (putch('0') );
  9176  000ED4  0E30               	movlw	48
  9177  000ED6  EC3E  F01A         	call	i2_putch
  9178                           
  9179                           ;doprnt.c: 1406: (putch(flag & 0x20 ? 'X' : 'x') );
  9180  000EDA  BA26               	btfsc	i2printf@flag,5,c
  9181  000EDC  D004               	goto	i2l5199
  9182  000EDE  0E00               	movlw	0
  9183  000EE0  6E17               	movwf	i2_printf$741+1,c
  9184  000EE2  0E78               	movlw	120
  9185  000EE4  D003               	goto	L18
  9186  000EE6                     i2l5199:
  9187  000EE6  0E00               	movlw	0
  9188  000EE8  6E17               	movwf	i2_printf$741+1,c
  9189  000EEA  0E58               	movlw	88
  9190  000EEC                     L18:
  9191  000EEC  6E16               	movwf	i2_printf$741,c
  9192  000EEE  5016               	movf	i2_printf$741,w,c
  9193  000EF0  EC3E  F01A         	call	i2_putch
  9194  000EF4                     i2l5203:
  9195                           
  9196                           ;doprnt.c: 1412: }
  9197                           ;doprnt.c: 1415: if(width)
  9198  000EF4  5023               	movf	i2printf@width,w,c
  9199  000EF6  1024               	iorwf	i2printf@width+1,w,c
  9200  000EF8  B4D8               	btfsc	status,2,c
  9201  000EFA  D0E1               	goto	i2l5259
  9202                           
  9203                           ;doprnt.c: 1417: (putch('0') );
  9204                           
  9205                           ;doprnt.c: 1416: do
  9206  000EFC  0E30               	movlw	48
  9207  000EFE  EC3E  F01A         	call	i2_putch
  9208                           
  9209                           ;doprnt.c: 1418: while(--width);
  9210  000F02  0623               	decf	i2printf@width,f,c
  9211  000F04  A0D8               	btfss	status,0,c
  9212  000F06  0624               	decf	i2printf@width+1,f,c
  9213  000F08  D7F5               	goto	i2l5203
  9214  000F0A                     i2l5209:
  9215                           
  9216                           ;doprnt.c: 1422: {
  9217                           ;doprnt.c: 1424: if(width
  9218                           ;doprnt.c: 1426: && !(flag & 0x08)
  9219                           ;doprnt.c: 1428: )
  9220  000F0A  5023               	movf	i2printf@width,w,c
  9221  000F0C  1024               	iorwf	i2printf@width+1,w,c
  9222  000F0E  A4D8               	btfss	status,2,c
  9223  000F10  B626               	btfsc	i2printf@flag,3,c
  9224  000F12  D00A               	goto	i2l5217
  9225  000F14                     i2l5213:
  9226                           
  9227                           ;doprnt.c: 1430: (putch(' ') );
  9228  000F14  0E20               	movlw	32
  9229  000F16  EC3E  F01A         	call	i2_putch
  9230                           
  9231                           ;doprnt.c: 1431: while(--width);
  9232  000F1A  0623               	decf	i2printf@width,f,c
  9233  000F1C  A0D8               	btfss	status,0,c
  9234  000F1E  0624               	decf	i2printf@width+1,f,c
  9235  000F20  5023               	movf	i2printf@width,w,c
  9236  000F22  1024               	iorwf	i2printf@width+1,w,c
  9237  000F24  A4D8               	btfss	status,2,c
  9238  000F26  D7F6               	goto	i2l5213
  9239  000F28                     i2l5217:
  9240                           
  9241                           ;doprnt.c: 1438: if(flag & 0x03)
  9242  000F28  0E03               	movlw	3
  9243  000F2A  1426               	andwf	i2printf@flag,w,c
  9244  000F2C  6E0F               	movwf	??i2_printf& (0+255),c
  9245  000F2E  0E00               	movlw	0
  9246  000F30  1427               	andwf	i2printf@flag+1,w,c
  9247  000F32  6E10               	movwf	(??i2_printf+1)& (0+255),c
  9248  000F34  500F               	movf	??i2_printf,w,c
  9249  000F36  1010               	iorwf	??i2_printf+1,w,c
  9250  000F38  B4D8               	btfsc	status,2,c
  9251  000F3A  D004               	goto	i2l562
  9252                           
  9253                           ;doprnt.c: 1439: (putch('-') );
  9254  000F3C  0E2D               	movlw	45
  9255  000F3E  EC3E  F01A         	call	i2_putch
  9256  000F42  D005               	goto	i2l5223
  9257  000F44                     i2l562:
  9258                           
  9259                           ;doprnt.c: 1443: else if(flag & 0x01)
  9260  000F44  A026               	btfss	i2printf@flag,0,c
  9261  000F46  D003               	goto	i2l5223
  9262                           
  9263                           ;doprnt.c: 1444: (putch(' ') );
  9264  000F48  0E20               	movlw	32
  9265  000F4A  EC3E  F01A         	call	i2_putch
  9266  000F4E                     i2l5223:
  9267                           
  9268                           ;doprnt.c: 1448: if((flag & ((0xC0)|0x800)) == (0x40|0x800))
  9269  000F4E  0EC0               	movlw	192
  9270  000F50  6E0F               	movwf	??i2_printf& (0+255),c
  9271  000F52  0E08               	movlw	8
  9272  000F54  6E10               	movwf	(??i2_printf+1)& (0+255),c
  9273  000F56  C026  F011         	movff	i2printf@flag,??i2_printf+2
  9274  000F5A  C027  F012         	movff	i2printf@flag+1,??i2_printf+3
  9275  000F5E  500F               	movf	??i2_printf,w,c
  9276  000F60  1611               	andwf	??i2_printf+2,f,c
  9277  000F62  5010               	movf	??i2_printf+1,w,c
  9278  000F64  1612               	andwf	??i2_printf+3,f,c
  9279  000F66  0E40               	movlw	64
  9280  000F68  1811               	xorwf	??i2_printf+2,w,c
  9281  000F6A  E108               	bnz	i2l5227
  9282  000F6C  0E08               	movlw	8
  9283  000F6E  1812               	xorwf	??i2_printf+3,w,c
  9284  000F70  A4D8               	btfss	status,2,c
  9285  000F72  D004               	goto	i2l5227
  9286                           
  9287                           ;doprnt.c: 1449: (putch('0') );
  9288  000F74  0E30               	movlw	48
  9289  000F76  EC3E  F01A         	call	i2_putch
  9290  000F7A  D0A1               	goto	i2l5259
  9291  000F7C                     i2l5227:
  9292                           
  9293                           ;doprnt.c: 1450: else
  9294                           ;doprnt.c: 1454: if((flag & ((0xC0)|0x800)) == (0x80|0x800)) {
  9295  000F7C  0EC0               	movlw	192
  9296  000F7E  6E0F               	movwf	??i2_printf& (0+255),c
  9297  000F80  0E08               	movlw	8
  9298  000F82  6E10               	movwf	(??i2_printf+1)& (0+255),c
  9299  000F84  C026  F011         	movff	i2printf@flag,??i2_printf+2
  9300  000F88  C027  F012         	movff	i2printf@flag+1,??i2_printf+3
  9301  000F8C  500F               	movf	??i2_printf,w,c
  9302  000F8E  1611               	andwf	??i2_printf+2,f,c
  9303  000F90  5010               	movf	??i2_printf+1,w,c
  9304  000F92  1612               	andwf	??i2_printf+3,f,c
  9305  000F94  0E80               	movlw	128
  9306  000F96  1811               	xorwf	??i2_printf+2,w,c
  9307  000F98  E103               	bnz	i2u539_41
  9308  000F9A  0E08               	movlw	8
  9309  000F9C  1812               	xorwf	??i2_printf+3,w,c
  9310  000F9E  A4D8               	btfss	status,2,c
  9311  000FA0                     i2u539_41:
  9312  000FA0  D08E               	goto	i2l5259
  9313                           
  9314                           ;doprnt.c: 1458: (putch('0') );
  9315  000FA2  0E30               	movlw	48
  9316  000FA4  EC3E  F01A         	call	i2_putch
  9317                           
  9318                           ;doprnt.c: 1460: (putch(flag & 0x20 ? 'X' : 'x') );
  9319  000FA8  BA26               	btfsc	i2printf@flag,5,c
  9320  000FAA  D004               	goto	i2l5235
  9321  000FAC  0E00               	movlw	0
  9322  000FAE  6E19               	movwf	i2_printf$742+1,c
  9323  000FB0  0E78               	movlw	120
  9324  000FB2  D003               	goto	L19
  9325  000FB4                     i2l5235:
  9326  000FB4  0E00               	movlw	0
  9327  000FB6  6E19               	movwf	i2_printf$742+1,c
  9328  000FB8  0E58               	movlw	88
  9329  000FBA                     L19:
  9330  000FBA  6E18               	movwf	i2_printf$742,c
  9331  000FBC  5018               	movf	i2_printf$742,w,c
  9332  000FBE  EC3E  F01A         	call	i2_putch
  9333                           
  9334                           ;doprnt.c: 1466: }
  9335                           ;doprnt.c: 1469: }
  9336                           ;doprnt.c: 1474: while(prec--) {
  9337  000FC2  D07D               	goto	i2l5259
  9338  000FC4                     i2l5239:
  9339                           
  9340                           ;doprnt.c: 1486: case 0xC0:
  9341                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  9342  000FC4  5022               	movf	i2printf@prec,w,c
  9343  000FC6  0D02               	mullw	2
  9344  000FC8  0EA4               	movlw	low _dpowers
  9345  000FCA  24F3               	addwf	prodl,w,c
  9346  000FCC  6EF6               	movwf	tblptrl,c
  9347  000FCE  0EFD               	movlw	high _dpowers
  9348  000FD0  20F4               	addwfc	prodh,w,c
  9349  000FD2  6EF7               	movwf	tblptrh,c
  9350  000FD4                     	if	0	;There are less than 3 active tblptr bytes
  9351  000FD4                     	endif
  9352  000FD4  0009               	tblrd		*+
  9353  000FD6  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  9354  000FDA  000A               	tblrd		*-
  9355  000FDC  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  9356  000FE0  C020  F001         	movff	i2printf@val,i2___lwdiv@dividend
  9357  000FE4  C021  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  9358  000FE8  EC76  F018         	call	i2___lwdiv	;wreg free
  9359  000FEC  C001  F008         	movff	?i2___lwdiv,i2___lwmod@dividend
  9360  000FF0  C002  F009         	movff	?i2___lwdiv+1,i2___lwmod@dividend+1
  9361  000FF4  0E00               	movlw	0
  9362  000FF6  6E0B               	movwf	i2___lwmod@divisor+1,c
  9363  000FF8  0E0A               	movlw	10
  9364  000FFA  6E0A               	movwf	i2___lwmod@divisor,c
  9365  000FFC  ECEE  F018         	call	i2___lwmod	;wreg free
  9366  001000  5008               	movf	?i2___lwmod,w,c
  9367  001002  D049               	goto	L20
  9368  001004                     i2l5241:
  9369                           
  9370                           ;doprnt.c: 1499: {
  9371                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  9372  001004  C020  F001         	movff	i2printf@val,i2___lwdiv@dividend
  9373  001008  C021  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  9374  00100C  5022               	movf	i2printf@prec,w,c
  9375  00100E  0D02               	mullw	2
  9376  001010  0EAE               	movlw	low _hexpowers
  9377  001012  24F3               	addwf	prodl,w,c
  9378  001014  6EF6               	movwf	tblptrl,c
  9379  001016  0EFD               	movlw	high _hexpowers
  9380  001018  20F4               	addwfc	prodh,w,c
  9381  00101A  6EF7               	movwf	tblptrh,c
  9382  00101C                     	if	0	;There are less than 3 active tblptr bytes
  9383  00101C                     	endif
  9384  00101C  0009               	tblrd		*+
  9385  00101E  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  9386  001022  000A               	tblrd		*-
  9387  001024  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  9388  001028  EC76  F018         	call	i2___lwdiv	;wreg free
  9389  00102C  5001               	movf	?i2___lwdiv,w,c
  9390  00102E  0B0F               	andlw	15
  9391  001030  6E13               	movwf	i2printf@idx,c
  9392                           
  9393                           ;doprnt.c: 1502: c = (flag & 0x20 ? "0123456789ABCDEF" : "0123456789abcdef")[idx];
  9394  001032  BA26               	btfsc	i2printf@flag,5,c
  9395  001034  D004               	goto	i2l5247
  9396  001036  0E87               	movlw	low STR_45
  9397  001038  6E1A               	movwf	i2_printf$748,c
  9398  00103A  0EFF               	movlw	high STR_45
  9399  00103C  D003               	goto	L21
  9400  00103E                     i2l5247:
  9401  00103E  0E76               	movlw	low STR_44
  9402  001040  6E1A               	movwf	i2_printf$748,c
  9403  001042  0EFF               	movlw	high STR_44
  9404  001044                     L21:
  9405  001044  6E1B               	movwf	i2_printf$748+1,c
  9406  001046  5013               	movf	i2printf@idx,w,c
  9407  001048  0D01               	mullw	1
  9408  00104A  C01A  F00F         	movff	i2_printf$748,??i2_printf
  9409  00104E  C01B  F010         	movff	i2_printf$748+1,??i2_printf+1
  9410  001052  50F3               	movf	prodl,w,c
  9411  001054  260F               	addwf	??i2_printf,f,c
  9412  001056  50F4               	movf	prodh,w,c
  9413  001058  2210               	addwfc	??i2_printf+1,f,c
  9414  00105A  C00F  FFF6         	movff	??i2_printf,tblptrl
  9415  00105E  C010  FFF7         	movff	??i2_printf+1,tblptrh
  9416  001062                     	if	0	;tblptru may be non-zero
  9417  001062                     	endif
  9418  001062                     	if	0	;tblptru may be non-zero
  9419  001062                     	endif
  9420  001062  0008               	tblrd		*
  9421  001064  CFF5 F025          	movff	tablat,i2printf@c
  9422                           
  9423                           ;doprnt.c: 1508: }
  9424                           ;doprnt.c: 1510: break;
  9425  001068  D027               	goto	i2l5257
  9426  00106A                     i2l5251:
  9427                           
  9428                           ;doprnt.c: 1518: c = ((val / octpowers[prec]) & 07) + '0';
  9429  00106A  C020  F001         	movff	i2printf@val,i2___lwdiv@dividend
  9430  00106E  C021  F002         	movff	i2printf@val+1,i2___lwdiv@dividend+1
  9431  001072  5022               	movf	i2printf@prec,w,c
  9432  001074  0D02               	mullw	2
  9433  001076  0E98               	movlw	low _octpowers
  9434  001078  24F3               	addwf	prodl,w,c
  9435  00107A  6EF6               	movwf	tblptrl,c
  9436  00107C  0EFD               	movlw	high _octpowers
  9437  00107E  20F4               	addwfc	prodh,w,c
  9438  001080  6EF7               	movwf	tblptrh,c
  9439  001082                     	if	0	;There are less than 3 active tblptr bytes
  9440  001082                     	endif
  9441  001082  0009               	tblrd		*+
  9442  001084  CFF5 F003          	movff	tablat,i2___lwdiv@divisor
  9443  001088  000A               	tblrd		*-
  9444  00108A  CFF5 F004          	movff	tablat,i2___lwdiv@divisor+1
  9445  00108E  EC76  F018         	call	i2___lwdiv	;wreg free
  9446  001092  5001               	movf	?i2___lwdiv,w,c
  9447  001094  0B07               	andlw	7
  9448  001096                     L20:
  9449  001096  0F30               	addlw	48
  9450  001098  6E25               	movwf	i2printf@c,c
  9451                           
  9452                           ;doprnt.c: 1523: }
  9453                           
  9454                           ;doprnt.c: 1520: break;
  9455  00109A  D00E               	goto	i2l5257
  9456  00109C                     i2l5255:
  9457  00109C  5026               	movf	i2printf@flag,w,c
  9458  00109E  0BC0               	andlw	192
  9459                           
  9460                           ; Switch size 1, requested type "space"
  9461                           ; Number of cases is 4, Range of values is 0 to 192
  9462                           ; switch strategies available:
  9463                           ; Name         Instructions Cycles
  9464                           ; simple_byte           13     7 (average)
  9465                           ;	Chosen strategy is simple_byte
  9466  0010A0  0A00               	xorlw	0	; case 0
  9467  0010A2  B4D8               	btfsc	status,2,c
  9468  0010A4  D78F               	goto	i2l5239
  9469  0010A6  0A40               	xorlw	64	; case 64
  9470  0010A8  B4D8               	btfsc	status,2,c
  9471  0010AA  D7DF               	goto	i2l5251
  9472  0010AC  0AC0               	xorlw	192	; case 128
  9473  0010AE  B4D8               	btfsc	status,2,c
  9474  0010B0  D7A9               	goto	i2l5241
  9475  0010B2  0A40               	xorlw	64	; case 192
  9476  0010B4  B4D8               	btfsc	status,2,c
  9477  0010B6  D786               	goto	i2l5239
  9478  0010B8                     i2l5257:
  9479                           
  9480                           ;doprnt.c: 1524: (putch(c) );
  9481  0010B8  5025               	movf	i2printf@c,w,c
  9482  0010BA  EC3E  F01A         	call	i2_putch
  9483  0010BE                     i2l5259:
  9484  0010BE  0622               	decf	i2printf@prec,f,c
  9485  0010C0  2822               	incf	i2printf@prec,w,c
  9486  0010C2  A4D8               	btfss	status,2,c
  9487  0010C4  D7EB               	goto	i2l5255
  9488                           
  9489                           ;doprnt.c: 1525: }
  9490                           ;doprnt.c: 1528: if((flag & 0x08) && width > 0)
  9491  0010C6  B626               	btfsc	i2printf@flag,3,c
  9492  0010C8  BE24               	btfsc	i2printf@width+1,7,c
  9493  0010CA  D00F               	goto	i2l5267
  9494  0010CC  5024               	movf	i2printf@width+1,w,c
  9495  0010CE  E103               	bnz	i2l5263
  9496  0010D0  0423               	decf	i2printf@width,w,c
  9497  0010D2  A0D8               	btfss	status,0,c
  9498  0010D4  D00A               	goto	i2l5267
  9499  0010D6                     i2l5263:
  9500                           
  9501                           ;doprnt.c: 1530: (putch(' ') );
  9502  0010D6  0E20               	movlw	32
  9503  0010D8  EC3E  F01A         	call	i2_putch
  9504                           
  9505                           ;doprnt.c: 1531: while(--width);
  9506  0010DC  0623               	decf	i2printf@width,f,c
  9507  0010DE  A0D8               	btfss	status,0,c
  9508  0010E0  0624               	decf	i2printf@width+1,f,c
  9509  0010E2  5023               	movf	i2printf@width,w,c
  9510  0010E4  1024               	iorwf	i2printf@width+1,w,c
  9511  0010E6  A4D8               	btfss	status,2,c
  9512  0010E8  D7F6               	goto	i2l5263
  9513  0010EA                     i2l5267:
  9514  0010EA  C00D  FFF6         	movff	i2printf@f,tblptrl
  9515  0010EE  C00E  FFF7         	movff	i2printf@f+1,tblptrh
  9516  0010F2  4A0D               	infsnz	i2printf@f,f,c
  9517  0010F4  2A0E               	incf	i2printf@f+1,f,c
  9518  0010F6                     	if	0	;tblptru may be non-zero
  9519  0010F6                     	endif
  9520  0010F6                     	if	0	;tblptru may be non-zero
  9521  0010F6                     	endif
  9522  0010F6  0008               	tblrd		*
  9523  0010F8  CFF5 F025          	movff	tablat,i2printf@c
  9524  0010FC  5025               	movf	i2printf@c,w,c
  9525  0010FE  B4D8               	btfsc	status,2,c
  9526  001100  0012               	return	
  9527  001102  D450               	goto	i2l4961
  9528  001104                     __end_ofi2_printf:
  9529                           	opt stack 0
  9530                           pclatu	equ	0xFFB
  9531                           pclath	equ	0xFFA
  9532                           tblptru	equ	0xFF8
  9533                           tblptrh	equ	0xFF7
  9534                           tblptrl	equ	0xFF6
  9535                           tablat	equ	0xFF5
  9536                           prodh	equ	0xFF4
  9537                           prodl	equ	0xFF3
  9538                           intcon	equ	0xFF2
  9539                           intcon2	equ	0xFF1
  9540                           intcon3	equ	0xFF0
  9541                           postinc0	equ	0xFEE
  9542                           fsr0h	equ	0xFEA
  9543                           fsr0l	equ	0xFE9
  9544                           wreg	equ	0xFE8
  9545                           postdec1	equ	0xFE5
  9546                           fsr1h	equ	0xFE2
  9547                           fsr1l	equ	0xFE1
  9548                           indf2	equ	0xFDF
  9549                           postinc2	equ	0xFDE
  9550                           postdec2	equ	0xFDD
  9551                           fsr2h	equ	0xFDA
  9552                           fsr2l	equ	0xFD9
  9553                           status	equ	0xFD8
  9554                           
  9555 ;; *************** function i2_putch *****************
  9556 ;; Defined at:
  9557 ;;		line 31 in file "lcd.c"
  9558 ;; Parameters:    Size  Location     Type
  9559 ;;  data            1    wreg     unsigned char 
  9560 ;; Auto vars:     Size  Location     Type
  9561 ;;  data            1    2[COMRAM] unsigned char 
  9562 ;; Return value:  Size  Location     Type
  9563 ;;                  1    wreg      void 
  9564 ;; Registers used:
  9565 ;;		wreg, status,2, status,0, cstack
  9566 ;; Tracked objects:
  9567 ;;		On entry : 0/0
  9568 ;;		On exit  : 0/0
  9569 ;;		Unchanged: 0/0
  9570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9572 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9574 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9575 ;;Total ram usage:        1 bytes
  9576 ;; Hardware stack levels used:    1
  9577 ;; Hardware stack levels required when called:    1
  9578 ;; This function calls:
  9579 ;;		i2_lcdNibble
  9580 ;; This function is called by:
  9581 ;;		i2_printf
  9582 ;; This function uses a non-reentrant model
  9583 ;;
  9584                           
  9585                           	psect	text31
  9586  00347C                     __ptext31:
  9587                           	opt stack 0
  9588  00347C                     i2_putch:
  9589                           	opt stack 23
  9590                           
  9591                           ;incstack = 0
  9592                           ;i2putch@data stored from wreg
  9593  00347C  6E03               	movwf	i2putch@data,c
  9594                           
  9595                           ;lcd.c: 32: LATDbits.LATD2 = 1;
  9596  00347E  848C               	bsf	3980,2,c	;volatile
  9597                           
  9598                           ;lcd.c: 33: lcdNibble(data);
  9599  003480  5003               	movf	i2putch@data,w,c
  9600  003482  ECC7  F018         	call	i2_lcdNibble
  9601  003486  0012               	return		;funcret
  9602  003488                     __end_ofi2_putch:
  9603                           	opt stack 0
  9604                           pclatu	equ	0xFFB
  9605                           pclath	equ	0xFFA
  9606                           tblptru	equ	0xFF8
  9607                           tblptrh	equ	0xFF7
  9608                           tblptrl	equ	0xFF6
  9609                           tablat	equ	0xFF5
  9610                           prodh	equ	0xFF4
  9611                           prodl	equ	0xFF3
  9612                           intcon	equ	0xFF2
  9613                           intcon2	equ	0xFF1
  9614                           intcon3	equ	0xFF0
  9615                           postinc0	equ	0xFEE
  9616                           fsr0h	equ	0xFEA
  9617                           fsr0l	equ	0xFE9
  9618                           wreg	equ	0xFE8
  9619                           postdec1	equ	0xFE5
  9620                           fsr1h	equ	0xFE2
  9621                           fsr1l	equ	0xFE1
  9622                           indf2	equ	0xFDF
  9623                           postinc2	equ	0xFDE
  9624                           postdec2	equ	0xFDD
  9625                           fsr2h	equ	0xFDA
  9626                           fsr2l	equ	0xFD9
  9627                           status	equ	0xFD8
  9628                           
  9629 ;; *************** function i2_isdigit *****************
  9630 ;; Defined at:
  9631 ;;		line 8 in file "/Applications/microchip/xc8/v1.40/sources/common/isdigit.c"
  9632 ;; Parameters:    Size  Location     Type
  9633 ;;  c               1    wreg     unsigned char 
  9634 ;; Auto vars:     Size  Location     Type
  9635 ;;  c               1    2[COMRAM] unsigned char 
  9636 ;; Return value:  Size  Location     Type
  9637 ;;		None               void
  9638 ;; Registers used:
  9639 ;;		wreg, status,2, status,0
  9640 ;; Tracked objects:
  9641 ;;		On entry : 0/0
  9642 ;;		On exit  : 0/0
  9643 ;;		Unchanged: 0/0
  9644 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9645 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9646 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9647 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9648 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9649 ;;Total ram usage:        3 bytes
  9650 ;; Hardware stack levels used:    1
  9651 ;; This function calls:
  9652 ;;		Nothing
  9653 ;; This function is called by:
  9654 ;;		i2_printf
  9655 ;; This function uses a non-reentrant model
  9656 ;;
  9657                           
  9658                           	psect	text32
  9659  0033EC                     __ptext32:
  9660                           	opt stack 0
  9661  0033EC                     i2_isdigit:
  9662                           	opt stack 24
  9663                           
  9664                           ;incstack = 0
  9665                           ;i2isdigit@c stored from wreg
  9666  0033EC  6E03               	movwf	i2isdigit@c,c
  9667  0033EE  0E00               	movlw	0
  9668  0033F0  6E02               	movwf	i2_isdigit$962,c
  9669  0033F2  0E3A               	movlw	58
  9670  0033F4  6003               	cpfslt	i2isdigit@c,c
  9671  0033F6  D005               	goto	i2l4591
  9672  0033F8  0E2F               	movlw	47
  9673  0033FA  6403               	cpfsgt	i2isdigit@c,c
  9674  0033FC  D002               	goto	i2l4591
  9675  0033FE  0E01               	movlw	1
  9676  003400  6E02               	movwf	i2_isdigit$962,c
  9677  003402                     i2l4591:
  9678  003402  C002  F001         	movff	i2_isdigit$962,??i2_isdigit
  9679  003406  3001               	rrcf	??i2_isdigit,w,c
  9680  003408  0012               	return	
  9681  00340A                     __end_ofi2_isdigit:
  9682                           	opt stack 0
  9683                           pclatu	equ	0xFFB
  9684                           pclath	equ	0xFFA
  9685                           tblptru	equ	0xFF8
  9686                           tblptrh	equ	0xFF7
  9687                           tblptrl	equ	0xFF6
  9688                           tablat	equ	0xFF5
  9689                           prodh	equ	0xFF4
  9690                           prodl	equ	0xFF3
  9691                           intcon	equ	0xFF2
  9692                           intcon2	equ	0xFF1
  9693                           intcon3	equ	0xFF0
  9694                           postinc0	equ	0xFEE
  9695                           fsr0h	equ	0xFEA
  9696                           fsr0l	equ	0xFE9
  9697                           wreg	equ	0xFE8
  9698                           postdec1	equ	0xFE5
  9699                           fsr1h	equ	0xFE2
  9700                           fsr1l	equ	0xFE1
  9701                           indf2	equ	0xFDF
  9702                           postinc2	equ	0xFDE
  9703                           postdec2	equ	0xFDD
  9704                           fsr2h	equ	0xFDA
  9705                           fsr2l	equ	0xFD9
  9706                           status	equ	0xFD8
  9707                           
  9708 ;; *************** function i2___lwmod *****************
  9709 ;; Defined at:
  9710 ;;		line 8 in file "/Applications/microchip/xc8/v1.40/sources/common/lwmod.c"
  9711 ;; Parameters:    Size  Location     Type
  9712 ;;  dividend        2    7[COMRAM] unsigned int 
  9713 ;;  divisor         2    9[COMRAM] unsigned int 
  9714 ;; Auto vars:     Size  Location     Type
  9715 ;;  __lwmod         1   11[COMRAM] unsigned char 
  9716 ;; Return value:  Size  Location     Type
  9717 ;;                  2    7[COMRAM] unsigned int 
  9718 ;; Registers used:
  9719 ;;		wreg, status,2, status,0
  9720 ;; Tracked objects:
  9721 ;;		On entry : 0/0
  9722 ;;		On exit  : 0/0
  9723 ;;		Unchanged: 0/0
  9724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9725 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9726 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9727 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9728 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9729 ;;Total ram usage:        5 bytes
  9730 ;; Hardware stack levels used:    1
  9731 ;; This function calls:
  9732 ;;		Nothing
  9733 ;; This function is called by:
  9734 ;;		i2_printf
  9735 ;; This function uses a non-reentrant model
  9736 ;;
  9737                           
  9738                           	psect	text33
  9739  0031DC                     __ptext33:
  9740                           	opt stack 0
  9741  0031DC                     i2___lwmod:
  9742                           	opt stack 24
  9743                           
  9744                           ;incstack = 0
  9745  0031DC  500A               	movf	i2___lwmod@divisor,w,c
  9746  0031DE  100B               	iorwf	i2___lwmod@divisor+1,w,c
  9747  0031E0  B4D8               	btfsc	status,2,c
  9748  0031E2  D018               	goto	i2l1007
  9749  0031E4  0E01               	movlw	1
  9750  0031E6  6E0C               	movwf	i2___lwmod@counter,c
  9751  0031E8  D004               	goto	i2l4623
  9752  0031EA                     i2l4621:
  9753  0031EA  90D8               	bcf	status,0,c
  9754  0031EC  360A               	rlcf	i2___lwmod@divisor,f,c
  9755  0031EE  360B               	rlcf	i2___lwmod@divisor+1,f,c
  9756  0031F0  2A0C               	incf	i2___lwmod@counter,f,c
  9757  0031F2                     i2l4623:
  9758  0031F2  AE0B               	btfss	i2___lwmod@divisor+1,7,c
  9759  0031F4  D7FA               	goto	i2l4621
  9760  0031F6                     i2l4625:
  9761  0031F6  500A               	movf	i2___lwmod@divisor,w,c
  9762  0031F8  5C08               	subwf	i2___lwmod@dividend,w,c
  9763  0031FA  500B               	movf	i2___lwmod@divisor+1,w,c
  9764  0031FC  5809               	subwfb	i2___lwmod@dividend+1,w,c
  9765  0031FE  A0D8               	btfss	status,0,c
  9766  003200  D004               	goto	i2l4629
  9767  003202  500A               	movf	i2___lwmod@divisor,w,c
  9768  003204  5E08               	subwf	i2___lwmod@dividend,f,c
  9769  003206  500B               	movf	i2___lwmod@divisor+1,w,c
  9770  003208  5A09               	subwfb	i2___lwmod@dividend+1,f,c
  9771  00320A                     i2l4629:
  9772  00320A  90D8               	bcf	status,0,c
  9773  00320C  320B               	rrcf	i2___lwmod@divisor+1,f,c
  9774  00320E  320A               	rrcf	i2___lwmod@divisor,f,c
  9775  003210  2E0C               	decfsz	i2___lwmod@counter,f,c
  9776  003212  D7F1               	goto	i2l4625
  9777  003214                     i2l1007:
  9778  003214  C008  F008         	movff	i2___lwmod@dividend,?i2___lwmod
  9779  003218  C009  F009         	movff	i2___lwmod@dividend+1,?i2___lwmod+1
  9780  00321C  0012               	return		;funcret
  9781  00321E                     __end_ofi2___lwmod:
  9782                           	opt stack 0
  9783                           pclatu	equ	0xFFB
  9784                           pclath	equ	0xFFA
  9785                           tblptru	equ	0xFF8
  9786                           tblptrh	equ	0xFF7
  9787                           tblptrl	equ	0xFF6
  9788                           tablat	equ	0xFF5
  9789                           prodh	equ	0xFF4
  9790                           prodl	equ	0xFF3
  9791                           intcon	equ	0xFF2
  9792                           intcon2	equ	0xFF1
  9793                           intcon3	equ	0xFF0
  9794                           postinc0	equ	0xFEE
  9795                           fsr0h	equ	0xFEA
  9796                           fsr0l	equ	0xFE9
  9797                           wreg	equ	0xFE8
  9798                           postdec1	equ	0xFE5
  9799                           fsr1h	equ	0xFE2
  9800                           fsr1l	equ	0xFE1
  9801                           indf2	equ	0xFDF
  9802                           postinc2	equ	0xFDE
  9803                           postdec2	equ	0xFDD
  9804                           fsr2h	equ	0xFDA
  9805                           fsr2l	equ	0xFD9
  9806                           status	equ	0xFD8
  9807                           
  9808 ;; *************** function i2___lwdiv *****************
  9809 ;; Defined at:
  9810 ;;		line 8 in file "/Applications/microchip/xc8/v1.40/sources/common/lwdiv.c"
  9811 ;; Parameters:    Size  Location     Type
  9812 ;;  dividend        2    0[COMRAM] unsigned int 
  9813 ;;  divisor         2    2[COMRAM] unsigned int 
  9814 ;; Auto vars:     Size  Location     Type
  9815 ;;  __lwdiv         2    4[COMRAM] unsigned int 
  9816 ;;  __lwdiv         1    6[COMRAM] unsigned char 
  9817 ;; Return value:  Size  Location     Type
  9818 ;;                  2    0[COMRAM] unsigned int 
  9819 ;; Registers used:
  9820 ;;		wreg, status,2, status,0
  9821 ;; Tracked objects:
  9822 ;;		On entry : 0/0
  9823 ;;		On exit  : 0/0
  9824 ;;		Unchanged: 0/0
  9825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9826 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9827 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9829 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9830 ;;Total ram usage:        7 bytes
  9831 ;; Hardware stack levels used:    1
  9832 ;; This function calls:
  9833 ;;		Nothing
  9834 ;; This function is called by:
  9835 ;;		i2_printf
  9836 ;; This function uses a non-reentrant model
  9837 ;;
  9838                           
  9839                           	psect	text34
  9840  0030EC                     __ptext34:
  9841                           	opt stack 0
  9842  0030EC                     i2___lwdiv:
  9843                           	opt stack 24
  9844                           
  9845                           ;incstack = 0
  9846  0030EC  0E00               	movlw	0
  9847  0030EE  6E06               	movwf	i2___lwdiv@quotient+1,c
  9848  0030F0  0E00               	movlw	0
  9849  0030F2  6E05               	movwf	i2___lwdiv@quotient,c
  9850  0030F4  5003               	movf	i2___lwdiv@divisor,w,c
  9851  0030F6  1004               	iorwf	i2___lwdiv@divisor+1,w,c
  9852  0030F8  B4D8               	btfsc	status,2,c
  9853  0030FA  D01C               	goto	i2l997
  9854  0030FC  0E01               	movlw	1
  9855  0030FE  6E07               	movwf	i2___lwdiv@counter,c
  9856  003100  D004               	goto	i2l4603
  9857  003102                     i2l4601:
  9858  003102  90D8               	bcf	status,0,c
  9859  003104  3603               	rlcf	i2___lwdiv@divisor,f,c
  9860  003106  3604               	rlcf	i2___lwdiv@divisor+1,f,c
  9861  003108  2A07               	incf	i2___lwdiv@counter,f,c
  9862  00310A                     i2l4603:
  9863  00310A  AE04               	btfss	i2___lwdiv@divisor+1,7,c
  9864  00310C  D7FA               	goto	i2l4601
  9865  00310E                     i2l4605:
  9866  00310E  90D8               	bcf	status,0,c
  9867  003110  3605               	rlcf	i2___lwdiv@quotient,f,c
  9868  003112  3606               	rlcf	i2___lwdiv@quotient+1,f,c
  9869  003114  5003               	movf	i2___lwdiv@divisor,w,c
  9870  003116  5C01               	subwf	i2___lwdiv@dividend,w,c
  9871  003118  5004               	movf	i2___lwdiv@divisor+1,w,c
  9872  00311A  5802               	subwfb	i2___lwdiv@dividend+1,w,c
  9873  00311C  A0D8               	btfss	status,0,c
  9874  00311E  D005               	goto	i2l4613
  9875  003120  5003               	movf	i2___lwdiv@divisor,w,c
  9876  003122  5E01               	subwf	i2___lwdiv@dividend,f,c
  9877  003124  5004               	movf	i2___lwdiv@divisor+1,w,c
  9878  003126  5A02               	subwfb	i2___lwdiv@dividend+1,f,c
  9879  003128  8005               	bsf	i2___lwdiv@quotient,0,c
  9880  00312A                     i2l4613:
  9881  00312A  90D8               	bcf	status,0,c
  9882  00312C  3204               	rrcf	i2___lwdiv@divisor+1,f,c
  9883  00312E  3203               	rrcf	i2___lwdiv@divisor,f,c
  9884  003130  2E07               	decfsz	i2___lwdiv@counter,f,c
  9885  003132  D7ED               	goto	i2l4605
  9886  003134                     i2l997:
  9887  003134  C005  F001         	movff	i2___lwdiv@quotient,?i2___lwdiv
  9888  003138  C006  F002         	movff	i2___lwdiv@quotient+1,?i2___lwdiv+1
  9889  00313C  0012               	return		;funcret
  9890  00313E                     __end_ofi2___lwdiv:
  9891                           	opt stack 0
  9892                           pclatu	equ	0xFFB
  9893                           pclath	equ	0xFFA
  9894                           tblptru	equ	0xFF8
  9895                           tblptrh	equ	0xFF7
  9896                           tblptrl	equ	0xFF6
  9897                           tablat	equ	0xFF5
  9898                           prodh	equ	0xFF4
  9899                           prodl	equ	0xFF3
  9900                           intcon	equ	0xFF2
  9901                           intcon2	equ	0xFF1
  9902                           intcon3	equ	0xFF0
  9903                           postinc0	equ	0xFEE
  9904                           fsr0h	equ	0xFEA
  9905                           fsr0l	equ	0xFE9
  9906                           wreg	equ	0xFE8
  9907                           postdec1	equ	0xFE5
  9908                           fsr1h	equ	0xFE2
  9909                           fsr1l	equ	0xFE1
  9910                           indf2	equ	0xFDF
  9911                           postinc2	equ	0xFDE
  9912                           postdec2	equ	0xFDD
  9913                           fsr2h	equ	0xFDA
  9914                           fsr2l	equ	0xFD9
  9915                           status	equ	0xFD8
  9916                           
  9917 ;; *************** function i2_lcdInst *****************
  9918 ;; Defined at:
  9919 ;;		line 26 in file "lcd.c"
  9920 ;; Parameters:    Size  Location     Type
  9921 ;;  data            1    wreg     unsigned char 
  9922 ;; Auto vars:     Size  Location     Type
  9923 ;;  data            1    2[COMRAM] unsigned char 
  9924 ;; Return value:  Size  Location     Type
  9925 ;;                  1    wreg      void 
  9926 ;; Registers used:
  9927 ;;		wreg, status,2, status,0, cstack
  9928 ;; Tracked objects:
  9929 ;;		On entry : 0/0
  9930 ;;		On exit  : 0/0
  9931 ;;		Unchanged: 0/0
  9932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9934 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9936 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9937 ;;Total ram usage:        1 bytes
  9938 ;; Hardware stack levels used:    1
  9939 ;; Hardware stack levels required when called:    1
  9940 ;; This function calls:
  9941 ;;		i2_lcdNibble
  9942 ;; This function is called by:
  9943 ;;		_isr
  9944 ;; This function uses a non-reentrant model
  9945 ;;
  9946                           
  9947                           	psect	text35
  9948  003488                     __ptext35:
  9949                           	opt stack 0
  9950  003488                     i2_lcdInst:
  9951                           	opt stack 24
  9952                           
  9953                           ;incstack = 0
  9954                           ;i2lcdInst@data stored from wreg
  9955  003488  6E03               	movwf	i2lcdInst@data,c
  9956                           
  9957                           ;lcd.c: 27: LATDbits.LATD2 = 0;
  9958  00348A  948C               	bcf	3980,2,c	;volatile
  9959                           
  9960                           ;lcd.c: 28: lcdNibble(data);
  9961  00348C  5003               	movf	i2lcdInst@data,w,c
  9962  00348E  ECC7  F018         	call	i2_lcdNibble
  9963  003492  0012               	return		;funcret
  9964  003494                     __end_ofi2_lcdInst:
  9965                           	opt stack 0
  9966                           pclatu	equ	0xFFB
  9967                           pclath	equ	0xFFA
  9968                           tblptru	equ	0xFF8
  9969                           tblptrh	equ	0xFF7
  9970                           tblptrl	equ	0xFF6
  9971                           tablat	equ	0xFF5
  9972                           prodh	equ	0xFF4
  9973                           prodl	equ	0xFF3
  9974                           intcon	equ	0xFF2
  9975                           intcon2	equ	0xFF1
  9976                           intcon3	equ	0xFF0
  9977                           postinc0	equ	0xFEE
  9978                           fsr0h	equ	0xFEA
  9979                           fsr0l	equ	0xFE9
  9980                           wreg	equ	0xFE8
  9981                           postdec1	equ	0xFE5
  9982                           fsr1h	equ	0xFE2
  9983                           fsr1l	equ	0xFE1
  9984                           indf2	equ	0xFDF
  9985                           postinc2	equ	0xFDE
  9986                           postdec2	equ	0xFDD
  9987                           fsr2h	equ	0xFDA
  9988                           fsr2l	equ	0xFD9
  9989                           status	equ	0xFD8
  9990                           
  9991 ;; *************** function i2_lcdNibble *****************
  9992 ;; Defined at:
  9993 ;;		line 36 in file "lcd.c"
  9994 ;; Parameters:    Size  Location     Type
  9995 ;;  data            1    wreg     unsigned char 
  9996 ;; Auto vars:     Size  Location     Type
  9997 ;;  data            1    1[COMRAM] unsigned char 
  9998 ;;  lcdNibble       1    0[COMRAM] unsigned char 
  9999 ;; Return value:  Size  Location     Type
 10000 ;;                  1    wreg      void 
 10001 ;; Registers used:
 10002 ;;		wreg, status,2, status,0
 10003 ;; Tracked objects:
 10004 ;;		On entry : 0/0
 10005 ;;		On exit  : 0/0
 10006 ;;		Unchanged: 0/0
 10007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10009 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10011 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10012 ;;Total ram usage:        2 bytes
 10013 ;; Hardware stack levels used:    1
 10014 ;; This function calls:
 10015 ;;		Nothing
 10016 ;; This function is called by:
 10017 ;;		i2_lcdInst
 10018 ;;		i2_putch
 10019 ;; This function uses a non-reentrant model
 10020 ;;
 10021                           
 10022                           	psect	text36
 10023  00318E                     __ptext36:
 10024                           	opt stack 0
 10025  00318E                     i2_lcdNibble:
 10026                           	opt stack 23
 10027                           
 10028                           ;incstack = 0
 10029                           ;i2lcdNibble@data stored from wreg
 10030  00318E  6E02               	movwf	i2lcdNibble@data,c
 10031                           
 10032                           ;lcd.c: 38: char temp = data & 0xF0;
 10033  003190  5002               	movf	i2lcdNibble@data,w,c
 10034  003192  0BF0               	andlw	240
 10035  003194  6E01               	movwf	i2lcdNibble@temp,c
 10036                           
 10037                           ;lcd.c: 39: LATD = LATD & 0x0F;
 10038  003196  508C               	movf	3980,w,c	;volatile
 10039  003198  0B0F               	andlw	15
 10040  00319A  6E8C               	movwf	3980,c	;volatile
 10041                           
 10042                           ;lcd.c: 40: LATD = temp | LATD;
 10043  00319C  5001               	movf	i2lcdNibble@temp,w,c
 10044  00319E  108C               	iorwf	3980,w,c	;volatile
 10045  0031A0  6E8C               	movwf	3980,c	;volatile
 10046                           
 10047                           ;lcd.c: 42: LATDbits.LATD3 = 0;
 10048  0031A2  968C               	bcf	3980,3,c	;volatile
 10049                           
 10050                           ;lcd.c: 43: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10051  0031A4  0E19               	movlw	25
 10052  0031A6                     i2u569_47:
 10053  0031A6  2EE8               	decfsz	wreg,f,c
 10054  0031A8  D7FE               	bra	i2u569_47
 10055                           
 10056                           ;lcd.c: 44: LATDbits.LATD3 = 1;
 10057  0031AA  868C               	bsf	3980,3,c	;volatile
 10058                           
 10059                           ;lcd.c: 45: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10060  0031AC  0E19               	movlw	25
 10061  0031AE                     i2u570_47:
 10062  0031AE  2EE8               	decfsz	wreg,f,c
 10063  0031B0  D7FE               	bra	i2u570_47
 10064                           
 10065                           ;lcd.c: 47: data = data << 4;
 10066  0031B2  3802               	swapf	i2lcdNibble@data,w,c
 10067  0031B4  0BF0               	andlw	240
 10068  0031B6  6E02               	movwf	i2lcdNibble@data,c
 10069                           
 10070                           ;lcd.c: 49: temp = data & 0xF0;
 10071  0031B8  5002               	movf	i2lcdNibble@data,w,c
 10072  0031BA  0BF0               	andlw	240
 10073  0031BC  6E01               	movwf	i2lcdNibble@temp,c
 10074                           
 10075                           ;lcd.c: 50: LATD = LATD & 0x0F;
 10076  0031BE  508C               	movf	3980,w,c	;volatile
 10077  0031C0  0B0F               	andlw	15
 10078  0031C2  6E8C               	movwf	3980,c	;volatile
 10079                           
 10080                           ;lcd.c: 51: LATD = temp | LATD;
 10081  0031C4  5001               	movf	i2lcdNibble@temp,w,c
 10082  0031C6  108C               	iorwf	3980,w,c	;volatile
 10083  0031C8  6E8C               	movwf	3980,c	;volatile
 10084                           
 10085                           ;lcd.c: 53: LATDbits.LATD3 = 0;
 10086  0031CA  968C               	bcf	3980,3,c	;volatile
 10087                           
 10088                           ;lcd.c: 54: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10089  0031CC  0E19               	movlw	25
 10090  0031CE                     i2u571_47:
 10091  0031CE  2EE8               	decfsz	wreg,f,c
 10092  0031D0  D7FE               	bra	i2u571_47
 10093                           
 10094                           ;lcd.c: 55: LATDbits.LATD3 = 1;
 10095  0031D2  868C               	bsf	3980,3,c	;volatile
 10096                           
 10097                           ;lcd.c: 56: _delay((unsigned long)((30)*(10000000/4000000.0)));
 10098  0031D4  0E19               	movlw	25
 10099  0031D6                     i2u572_47:
 10100  0031D6  2EE8               	decfsz	wreg,f,c
 10101  0031D8  D7FE               	bra	i2u572_47
 10102  0031DA  0012               	return		;funcret
 10103  0031DC                     __end_ofi2_lcdNibble:
 10104                           	opt stack 0
 10105                           pclatu	equ	0xFFB
 10106                           pclath	equ	0xFFA
 10107                           tblptru	equ	0xFF8
 10108                           tblptrh	equ	0xFF7
 10109                           tblptrl	equ	0xFF6
 10110                           tablat	equ	0xFF5
 10111                           prodh	equ	0xFF4
 10112                           prodl	equ	0xFF3
 10113                           intcon	equ	0xFF2
 10114                           intcon2	equ	0xFF1
 10115                           intcon3	equ	0xFF0
 10116                           postinc0	equ	0xFEE
 10117                           fsr0h	equ	0xFEA
 10118                           fsr0l	equ	0xFE9
 10119                           wreg	equ	0xFE8
 10120                           postdec1	equ	0xFE5
 10121                           fsr1h	equ	0xFE2
 10122                           fsr1l	equ	0xFE1
 10123                           indf2	equ	0xFDF
 10124                           postinc2	equ	0xFDE
 10125                           postdec2	equ	0xFDD
 10126                           fsr2h	equ	0xFDA
 10127                           fsr2l	equ	0xFD9
 10128                           status	equ	0xFD8
 10129                           
 10130 ;; *************** function _servo_rotate2 *****************
 10131 ;; Defined at:
 10132 ;;		line 641 in file "main.c"
 10133 ;; Parameters:    Size  Location     Type
 10134 ;;  degree          2   14[COMRAM] int 
 10135 ;; Auto vars:     Size  Location     Type
 10136 ;;  j               2   22[COMRAM] unsigned int 
 10137 ;;  i               2   20[COMRAM] unsigned int 
 10138 ;;  duty            2   18[COMRAM] int 
 10139 ;; Return value:  Size  Location     Type
 10140 ;;                  1    wreg      void 
 10141 ;; Registers used:
 10142 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10143 ;; Tracked objects:
 10144 ;;		On entry : 0/0
 10145 ;;		On exit  : 0/0
 10146 ;;		Unchanged: 0/0
 10147 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10148 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10149 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10150 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10151 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10152 ;;Total ram usage:       10 bytes
 10153 ;; Hardware stack levels used:    1
 10154 ;; Hardware stack levels required when called:    1
 10155 ;; This function calls:
 10156 ;;		___awdiv
 10157 ;;		i2___wmul
 10158 ;; This function is called by:
 10159 ;;		_isr
 10160 ;; This function uses a non-reentrant model
 10161 ;;
 10162                           
 10163                           	psect	text37
 10164  002800                     __ptext37:
 10165                           	opt stack 0
 10166  002800                     _servo_rotate2:
 10167                           	opt stack 24
 10168                           
 10169                           ;main.c: 642: unsigned int i;
 10170                           ;main.c: 643: unsigned int j;
 10171                           ;main.c: 644: int duty = ((degree+90)*5/90)+10;
 10172                           
 10173                           ;incstack = 0
 10174  002800  0E5A               	movlw	90
 10175  002802  240F               	addwf	servo_rotate2@degree,w,c
 10176  002804  6E01               	movwf	i2___wmul@multiplier,c
 10177  002806  0E00               	movlw	0
 10178  002808  2010               	addwfc	servo_rotate2@degree+1,w,c
 10179  00280A  6E02               	movwf	i2___wmul@multiplier+1,c
 10180  00280C  0E00               	movlw	0
 10181  00280E  6E04               	movwf	i2___wmul@multiplicand+1,c
 10182  002810  0E05               	movlw	5
 10183  002812  6E03               	movwf	i2___wmul@multiplicand,c
 10184  002814  ECC0  F019         	call	i2___wmul	;wreg free
 10185  002818  C001  F007         	movff	?i2___wmul,___awdiv@dividend
 10186  00281C  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
 10187  002820  0E00               	movlw	0
 10188  002822  6E0A               	movwf	___awdiv@divisor+1,c
 10189  002824  0E5A               	movlw	90
 10190  002826  6E09               	movwf	___awdiv@divisor,c
 10191  002828  EC34  F016         	call	___awdiv	;wreg free
 10192  00282C  0E0A               	movlw	10
 10193  00282E  2407               	addwf	?___awdiv,w,c
 10194  002830  6E13               	movwf	servo_rotate2@duty,c
 10195  002832  0E00               	movlw	0
 10196  002834  2008               	addwfc	?___awdiv+1,w,c
 10197  002836  6E14               	movwf	servo_rotate2@duty+1,c
 10198                           
 10199                           ;main.c: 645: for (i=0; i<50; i++) {
 10200  002838  0E00               	movlw	0
 10201  00283A  6E16               	movwf	servo_rotate2@i+1,c
 10202  00283C  0E00               	movlw	0
 10203  00283E  6E15               	movwf	servo_rotate2@i,c
 10204  002840                     i2l4909:
 10205  002840  5016               	movf	servo_rotate2@i+1,w,c
 10206  002842  E137               	bnz	i2l439
 10207  002844  0E32               	movlw	50
 10208  002846  5C15               	subwf	servo_rotate2@i,w,c
 10209  002848  B0D8               	btfsc	status,0,c
 10210  00284A  0012               	return	
 10211                           
 10212                           ;main.c: 646: LATCbits.LATC2 = 1;
 10213  00284C  848B               	bsf	3979,2,c	;volatile
 10214                           
 10215                           ;main.c: 647: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
 10216  00284E  0E00               	movlw	0
 10217  002850  6E18               	movwf	servo_rotate2@j+1,c
 10218  002852  0E00               	movlw	0
 10219  002854  6E17               	movwf	servo_rotate2@j,c
 10220  002856  D006               	goto	i2l433
 10221  002858                     i2l4915:
 10222  002858  0E53               	movlw	83
 10223  00285A                     i2u573_47:
 10224  00285A  2EE8               	decfsz	wreg,f,c
 10225  00285C  D7FE               	bra	i2u573_47
 10226  00285E  F000               	nop	
 10227  002860  4A17               	infsnz	servo_rotate2@j,f,c
 10228  002862  2A18               	incf	servo_rotate2@j+1,f,c
 10229  002864                     i2l433:
 10230  002864  5013               	movf	servo_rotate2@duty,w,c
 10231  002866  5C17               	subwf	servo_rotate2@j,w,c
 10232  002868  5014               	movf	servo_rotate2@duty+1,w,c
 10233  00286A  5818               	subwfb	servo_rotate2@j+1,w,c
 10234  00286C  A0D8               	btfss	status,0,c
 10235  00286E  D7F4               	goto	i2l4915
 10236                           
 10237                           ;main.c: 648: LATCbits.LATC2 = 0;
 10238  002870  948B               	bcf	3979,2,c	;volatile
 10239                           
 10240                           ;main.c: 649: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
 10241  002872  0E00               	movlw	0
 10242  002874  6E18               	movwf	servo_rotate2@j+1,c
 10243  002876  0E00               	movlw	0
 10244  002878  6E17               	movwf	servo_rotate2@j,c
 10245  00287A  D006               	goto	i2l436
 10246  00287C                     i2l4921:
 10247  00287C  0E53               	movlw	83
 10248  00287E                     i2u574_47:
 10249  00287E  2EE8               	decfsz	wreg,f,c
 10250  002880  D7FE               	bra	i2u574_47
 10251  002882  F000               	nop	
 10252  002884  4A17               	infsnz	servo_rotate2@j,f,c
 10253  002886  2A18               	incf	servo_rotate2@j+1,f,c
 10254  002888                     i2l436:
 10255  002888  C013  F011         	movff	servo_rotate2@duty,??_servo_rotate2
 10256  00288C  C014  F012         	movff	servo_rotate2@duty+1,??_servo_rotate2+1
 10257  002890  1E11               	comf	??_servo_rotate2,f,c
 10258  002892  1E12               	comf	??_servo_rotate2+1,f,c
 10259  002894  4A11               	infsnz	??_servo_rotate2,f,c
 10260  002896  2A12               	incf	??_servo_rotate2+1,f,c
 10261  002898  0EC8               	movlw	200
 10262  00289A  2611               	addwf	??_servo_rotate2,f,c
 10263  00289C  0E00               	movlw	0
 10264  00289E  2212               	addwfc	??_servo_rotate2+1,f,c
 10265  0028A0  5011               	movf	??_servo_rotate2,w,c
 10266  0028A2  5C17               	subwf	servo_rotate2@j,w,c
 10267  0028A4  5012               	movf	??_servo_rotate2+1,w,c
 10268  0028A6  5818               	subwfb	servo_rotate2@j+1,w,c
 10269  0028A8  A0D8               	btfss	status,0,c
 10270  0028AA  D7E8               	goto	i2l4921
 10271  0028AC  4A15               	infsnz	servo_rotate2@i,f,c
 10272  0028AE  2A16               	incf	servo_rotate2@i+1,f,c
 10273  0028B0  D7C7               	goto	i2l4909
 10274  0028B2                     i2l439:
 10275  0028B2  0012               	return		;funcret
 10276  0028B4                     __end_of_servo_rotate2:
 10277                           	opt stack 0
 10278                           pclatu	equ	0xFFB
 10279                           pclath	equ	0xFFA
 10280                           tblptru	equ	0xFF8
 10281                           tblptrh	equ	0xFF7
 10282                           tblptrl	equ	0xFF6
 10283                           tablat	equ	0xFF5
 10284                           prodh	equ	0xFF4
 10285                           prodl	equ	0xFF3
 10286                           intcon	equ	0xFF2
 10287                           intcon2	equ	0xFF1
 10288                           intcon3	equ	0xFF0
 10289                           postinc0	equ	0xFEE
 10290                           fsr0h	equ	0xFEA
 10291                           fsr0l	equ	0xFE9
 10292                           wreg	equ	0xFE8
 10293                           postdec1	equ	0xFE5
 10294                           fsr1h	equ	0xFE2
 10295                           fsr1l	equ	0xFE1
 10296                           indf2	equ	0xFDF
 10297                           postinc2	equ	0xFDE
 10298                           postdec2	equ	0xFDD
 10299                           fsr2h	equ	0xFDA
 10300                           fsr2l	equ	0xFD9
 10301                           status	equ	0xFD8
 10302                           
 10303 ;; *************** function _servo_rotate1 *****************
 10304 ;; Defined at:
 10305 ;;		line 628 in file "main.c"
 10306 ;; Parameters:    Size  Location     Type
 10307 ;;  degree          2   14[COMRAM] int 
 10308 ;; Auto vars:     Size  Location     Type
 10309 ;;  j               2   22[COMRAM] unsigned int 
 10310 ;;  i               2   20[COMRAM] unsigned int 
 10311 ;;  duty            2   18[COMRAM] int 
 10312 ;; Return value:  Size  Location     Type
 10313 ;;                  1    wreg      void 
 10314 ;; Registers used:
 10315 ;;		wreg, status,2, status,0, prodl, prodh, cstack
 10316 ;; Tracked objects:
 10317 ;;		On entry : 0/0
 10318 ;;		On exit  : 0/0
 10319 ;;		Unchanged: 0/0
 10320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10321 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10322 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10323 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10324 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10325 ;;Total ram usage:       10 bytes
 10326 ;; Hardware stack levels used:    1
 10327 ;; Hardware stack levels required when called:    1
 10328 ;; This function calls:
 10329 ;;		___awdiv
 10330 ;;		i2___wmul
 10331 ;; This function is called by:
 10332 ;;		_isr
 10333 ;; This function uses a non-reentrant model
 10334 ;;
 10335                           
 10336                           	psect	text38
 10337  0028B4                     __ptext38:
 10338                           	opt stack 0
 10339  0028B4                     _servo_rotate1:
 10340                           	opt stack 24
 10341                           
 10342                           ;main.c: 629: unsigned int i;
 10343                           ;main.c: 630: unsigned int j;
 10344                           ;main.c: 631: int duty = ((degree+90)*5/90)+10;
 10345                           
 10346                           ;incstack = 0
 10347  0028B4  0E5A               	movlw	90
 10348  0028B6  240F               	addwf	servo_rotate1@degree,w,c
 10349  0028B8  6E01               	movwf	i2___wmul@multiplier,c
 10350  0028BA  0E00               	movlw	0
 10351  0028BC  2010               	addwfc	servo_rotate1@degree+1,w,c
 10352  0028BE  6E02               	movwf	i2___wmul@multiplier+1,c
 10353  0028C0  0E00               	movlw	0
 10354  0028C2  6E04               	movwf	i2___wmul@multiplicand+1,c
 10355  0028C4  0E05               	movlw	5
 10356  0028C6  6E03               	movwf	i2___wmul@multiplicand,c
 10357  0028C8  ECC0  F019         	call	i2___wmul	;wreg free
 10358  0028CC  C001  F007         	movff	?i2___wmul,___awdiv@dividend
 10359  0028D0  C002  F008         	movff	?i2___wmul+1,___awdiv@dividend+1
 10360  0028D4  0E00               	movlw	0
 10361  0028D6  6E0A               	movwf	___awdiv@divisor+1,c
 10362  0028D8  0E5A               	movlw	90
 10363  0028DA  6E09               	movwf	___awdiv@divisor,c
 10364  0028DC  EC34  F016         	call	___awdiv	;wreg free
 10365  0028E0  0E0A               	movlw	10
 10366  0028E2  2407               	addwf	?___awdiv,w,c
 10367  0028E4  6E13               	movwf	servo_rotate1@duty,c
 10368  0028E6  0E00               	movlw	0
 10369  0028E8  2008               	addwfc	?___awdiv+1,w,c
 10370  0028EA  6E14               	movwf	servo_rotate1@duty+1,c
 10371                           
 10372                           ;main.c: 632: for (i=0; i<50; i++) {
 10373  0028EC  0E00               	movlw	0
 10374  0028EE  6E16               	movwf	servo_rotate1@i+1,c
 10375  0028F0  0E00               	movlw	0
 10376  0028F2  6E15               	movwf	servo_rotate1@i,c
 10377  0028F4                     i2l4933:
 10378  0028F4  5016               	movf	servo_rotate1@i+1,w,c
 10379  0028F6  E137               	bnz	i2l428
 10380  0028F8  0E32               	movlw	50
 10381  0028FA  5C15               	subwf	servo_rotate1@i,w,c
 10382  0028FC  B0D8               	btfsc	status,0,c
 10383  0028FE  0012               	return	
 10384                           
 10385                           ;main.c: 633: LATCbits.LATC1 = 1;
 10386  002900  828B               	bsf	3979,1,c	;volatile
 10387                           
 10388                           ;main.c: 634: for(j=0; j<duty; j++) _delay((unsigned long)((100)*(10000000/4000000.0)));
 10389  002902  0E00               	movlw	0
 10390  002904  6E18               	movwf	servo_rotate1@j+1,c
 10391  002906  0E00               	movlw	0
 10392  002908  6E17               	movwf	servo_rotate1@j,c
 10393  00290A  D006               	goto	i2l422
 10394  00290C                     i2l4939:
 10395  00290C  0E53               	movlw	83
 10396  00290E                     i2u575_47:
 10397  00290E  2EE8               	decfsz	wreg,f,c
 10398  002910  D7FE               	bra	i2u575_47
 10399  002912  F000               	nop	
 10400  002914  4A17               	infsnz	servo_rotate1@j,f,c
 10401  002916  2A18               	incf	servo_rotate1@j+1,f,c
 10402  002918                     i2l422:
 10403  002918  5013               	movf	servo_rotate1@duty,w,c
 10404  00291A  5C17               	subwf	servo_rotate1@j,w,c
 10405  00291C  5014               	movf	servo_rotate1@duty+1,w,c
 10406  00291E  5818               	subwfb	servo_rotate1@j+1,w,c
 10407  002920  A0D8               	btfss	status,0,c
 10408  002922  D7F4               	goto	i2l4939
 10409                           
 10410                           ;main.c: 635: LATCbits.LATC1 = 0;
 10411  002924  928B               	bcf	3979,1,c	;volatile
 10412                           
 10413                           ;main.c: 636: for(j=0; j<(200 - duty); j++) _delay((unsigned long)((100)*(10000000/40000
      +                          00.0)));
 10414  002926  0E00               	movlw	0
 10415  002928  6E18               	movwf	servo_rotate1@j+1,c
 10416  00292A  0E00               	movlw	0
 10417  00292C  6E17               	movwf	servo_rotate1@j,c
 10418  00292E  D006               	goto	i2l425
 10419  002930                     i2l4945:
 10420  002930  0E53               	movlw	83
 10421  002932                     i2u576_47:
 10422  002932  2EE8               	decfsz	wreg,f,c
 10423  002934  D7FE               	bra	i2u576_47
 10424  002936  F000               	nop	
 10425  002938  4A17               	infsnz	servo_rotate1@j,f,c
 10426  00293A  2A18               	incf	servo_rotate1@j+1,f,c
 10427  00293C                     i2l425:
 10428  00293C  C013  F011         	movff	servo_rotate1@duty,??_servo_rotate1
 10429  002940  C014  F012         	movff	servo_rotate1@duty+1,??_servo_rotate1+1
 10430  002944  1E11               	comf	??_servo_rotate1,f,c
 10431  002946  1E12               	comf	??_servo_rotate1+1,f,c
 10432  002948  4A11               	infsnz	??_servo_rotate1,f,c
 10433  00294A  2A12               	incf	??_servo_rotate1+1,f,c
 10434  00294C  0EC8               	movlw	200
 10435  00294E  2611               	addwf	??_servo_rotate1,f,c
 10436  002950  0E00               	movlw	0
 10437  002952  2212               	addwfc	??_servo_rotate1+1,f,c
 10438  002954  5011               	movf	??_servo_rotate1,w,c
 10439  002956  5C17               	subwf	servo_rotate1@j,w,c
 10440  002958  5012               	movf	??_servo_rotate1+1,w,c
 10441  00295A  5818               	subwfb	servo_rotate1@j+1,w,c
 10442  00295C  A0D8               	btfss	status,0,c
 10443  00295E  D7E8               	goto	i2l4945
 10444  002960  4A15               	infsnz	servo_rotate1@i,f,c
 10445  002962  2A16               	incf	servo_rotate1@i+1,f,c
 10446  002964  D7C7               	goto	i2l4933
 10447  002966                     i2l428:
 10448  002966  0012               	return		;funcret
 10449  002968                     __end_of_servo_rotate1:
 10450                           	opt stack 0
 10451                           pclatu	equ	0xFFB
 10452                           pclath	equ	0xFFA
 10453                           tblptru	equ	0xFF8
 10454                           tblptrh	equ	0xFF7
 10455                           tblptrl	equ	0xFF6
 10456                           tablat	equ	0xFF5
 10457                           prodh	equ	0xFF4
 10458                           prodl	equ	0xFF3
 10459                           intcon	equ	0xFF2
 10460                           intcon2	equ	0xFF1
 10461                           intcon3	equ	0xFF0
 10462                           postinc0	equ	0xFEE
 10463                           fsr0h	equ	0xFEA
 10464                           fsr0l	equ	0xFE9
 10465                           wreg	equ	0xFE8
 10466                           postdec1	equ	0xFE5
 10467                           fsr1h	equ	0xFE2
 10468                           fsr1l	equ	0xFE1
 10469                           indf2	equ	0xFDF
 10470                           postinc2	equ	0xFDE
 10471                           postdec2	equ	0xFDD
 10472                           fsr2h	equ	0xFDA
 10473                           fsr2l	equ	0xFD9
 10474                           status	equ	0xFD8
 10475                           
 10476 ;; *************** function _servo_rotate0 *****************
 10477 ;; Defined at:
 10478 ;;		line 615 in file "main.c"
 10479 ;; Parameters:    Size  Location     Type
 10480 ;;  degree          2    0[COMRAM] int 
 10481 ;; Auto vars:     Size  Location     Type
 10482 ;;  j               2    8[COMRAM] unsigned int 
 10483 ;;  i               2    6[COMRAM] unsigned int 
 10484 ;;  duty            2    4[COMRAM] int 
 10485 ;; Return value:  Size  Location     Type
 10486 ;;                  1    wreg      void 
 10487 ;; Registers used:
 10488 ;;		wreg, status,2, status,0
 10489 ;; Tracked objects:
 10490 ;;		On entry : 0/0
 10491 ;;		On exit  : 0/0
 10492 ;;		Unchanged: 0/0
 10493 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10494 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10495 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10496 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10497 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10498 ;;Total ram usage:       10 bytes
 10499 ;; Hardware stack levels used:    1
 10500 ;; This function calls:
 10501 ;;		Nothing
 10502 ;; This function is called by:
 10503 ;;		_isr
 10504 ;; This function uses a non-reentrant model
 10505 ;;
 10506                           
 10507                           	psect	text39
 10508  002AB8                     __ptext39:
 10509                           	opt stack 0
 10510  002AB8                     _servo_rotate0:
 10511                           	opt stack 25
 10512                           
 10513                           ;main.c: 616: unsigned int i;
 10514                           ;main.c: 617: unsigned int j;
 10515                           ;main.c: 618: int duty = degree;
 10516                           
 10517                           ;incstack = 0
 10518  002AB8  C001  F005         	movff	servo_rotate0@degree,servo_rotate0@duty
 10519  002ABC  C002  F006         	movff	servo_rotate0@degree+1,servo_rotate0@duty+1
 10520                           
 10521                           ;main.c: 619: for (i=0; i<50; i++) {
 10522  002AC0  0E00               	movlw	0
 10523  002AC2  6E08               	movwf	servo_rotate0@i+1,c
 10524  002AC4  0E00               	movlw	0
 10525  002AC6  6E07               	movwf	servo_rotate0@i,c
 10526  002AC8                     i2l4885:
 10527  002AC8  5008               	movf	servo_rotate0@i+1,w,c
 10528  002ACA  E13D               	bnz	i2l417
 10529  002ACC  0E32               	movlw	50
 10530  002ACE  5C07               	subwf	servo_rotate0@i,w,c
 10531  002AD0  B0D8               	btfsc	status,0,c
 10532  002AD2  0012               	return	
 10533                           
 10534                           ;main.c: 620: LATCbits.LATC0 = 1;
 10535  002AD4  808B               	bsf	3979,0,c	;volatile
 10536                           
 10537                           ;main.c: 621: for(j=0; j<duty; j++) _delay((unsigned long)((1)*(10000000/4000.0)));
 10538  002AD6  0E00               	movlw	0
 10539  002AD8  6E0A               	movwf	servo_rotate0@j+1,c
 10540  002ADA  0E00               	movlw	0
 10541  002ADC  6E09               	movwf	servo_rotate0@j,c
 10542  002ADE  D009               	goto	i2l411
 10543  002AE0                     i2l4891:
 10544  002AE0  0E04               	movlw	4
 10545  002AE2  6E03               	movwf	??_servo_rotate0& (0+255),c
 10546  002AE4  0E3E               	movlw	62
 10547  002AE6                     i2u577_47:
 10548  002AE6  2EE8               	decfsz	wreg,f,c
 10549  002AE8  D7FE               	bra	i2u577_47
 10550  002AEA  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
 10551  002AEC  D7FC               	bra	i2u577_47
 10552  002AEE  4A09               	infsnz	servo_rotate0@j,f,c
 10553  002AF0  2A0A               	incf	servo_rotate0@j+1,f,c
 10554  002AF2                     i2l411:
 10555  002AF2  5005               	movf	servo_rotate0@duty,w,c
 10556  002AF4  5C09               	subwf	servo_rotate0@j,w,c
 10557  002AF6  5006               	movf	servo_rotate0@duty+1,w,c
 10558  002AF8  580A               	subwfb	servo_rotate0@j+1,w,c
 10559  002AFA  A0D8               	btfss	status,0,c
 10560  002AFC  D7F1               	goto	i2l4891
 10561                           
 10562                           ;main.c: 622: LATCbits.LATC0 = 0;
 10563  002AFE  908B               	bcf	3979,0,c	;volatile
 10564                           
 10565                           ;main.c: 623: for(j=0; j<(20 - duty); j++) _delay((unsigned long)((1)*(10000000/4000.0))
      +                          );
 10566  002B00  0E00               	movlw	0
 10567  002B02  6E0A               	movwf	servo_rotate0@j+1,c
 10568  002B04  0E00               	movlw	0
 10569  002B06  6E09               	movwf	servo_rotate0@j,c
 10570  002B08  D009               	goto	i2l414
 10571  002B0A                     i2l4897:
 10572  002B0A  0E04               	movlw	4
 10573  002B0C  6E03               	movwf	??_servo_rotate0& (0+255),c
 10574  002B0E  0E3E               	movlw	62
 10575  002B10                     i2u578_47:
 10576  002B10  2EE8               	decfsz	wreg,f,c
 10577  002B12  D7FE               	bra	i2u578_47
 10578  002B14  2E03               	decfsz	??_servo_rotate0& (0+255),f,c
 10579  002B16  D7FC               	bra	i2u578_47
 10580  002B18  4A09               	infsnz	servo_rotate0@j,f,c
 10581  002B1A  2A0A               	incf	servo_rotate0@j+1,f,c
 10582  002B1C                     i2l414:
 10583  002B1C  C005  F003         	movff	servo_rotate0@duty,??_servo_rotate0
 10584  002B20  C006  F004         	movff	servo_rotate0@duty+1,??_servo_rotate0+1
 10585  002B24  1E03               	comf	??_servo_rotate0,f,c
 10586  002B26  1E04               	comf	??_servo_rotate0+1,f,c
 10587  002B28  4A03               	infsnz	??_servo_rotate0,f,c
 10588  002B2A  2A04               	incf	??_servo_rotate0+1,f,c
 10589  002B2C  0E14               	movlw	20
 10590  002B2E  2603               	addwf	??_servo_rotate0,f,c
 10591  002B30  0E00               	movlw	0
 10592  002B32  2204               	addwfc	??_servo_rotate0+1,f,c
 10593  002B34  5003               	movf	??_servo_rotate0,w,c
 10594  002B36  5C09               	subwf	servo_rotate0@j,w,c
 10595  002B38  5004               	movf	??_servo_rotate0+1,w,c
 10596  002B3A  580A               	subwfb	servo_rotate0@j+1,w,c
 10597  002B3C  A0D8               	btfss	status,0,c
 10598  002B3E  D7E5               	goto	i2l4897
 10599  002B40  4A07               	infsnz	servo_rotate0@i,f,c
 10600  002B42  2A08               	incf	servo_rotate0@i+1,f,c
 10601  002B44  D7C1               	goto	i2l4885
 10602  002B46                     i2l417:
 10603  002B46  0012               	return		;funcret
 10604  002B48                     __end_of_servo_rotate0:
 10605                           	opt stack 0
 10606                           pclatu	equ	0xFFB
 10607                           pclath	equ	0xFFA
 10608                           tblptru	equ	0xFF8
 10609                           tblptrh	equ	0xFF7
 10610                           tblptrl	equ	0xFF6
 10611                           tablat	equ	0xFF5
 10612                           prodh	equ	0xFF4
 10613                           prodl	equ	0xFF3
 10614                           intcon	equ	0xFF2
 10615                           intcon2	equ	0xFF1
 10616                           intcon3	equ	0xFF0
 10617                           postinc0	equ	0xFEE
 10618                           fsr0h	equ	0xFEA
 10619                           fsr0l	equ	0xFE9
 10620                           wreg	equ	0xFE8
 10621                           postdec1	equ	0xFE5
 10622                           fsr1h	equ	0xFE2
 10623                           fsr1l	equ	0xFE1
 10624                           indf2	equ	0xFDF
 10625                           postinc2	equ	0xFDE
 10626                           postdec2	equ	0xFDD
 10627                           fsr2h	equ	0xFDA
 10628                           fsr2l	equ	0xFD9
 10629                           status	equ	0xFD8
 10630                           
 10631 ;; *************** function _read_time *****************
 10632 ;; Defined at:
 10633 ;;		line 427 in file "main.c"
 10634 ;; Parameters:    Size  Location     Type
 10635 ;;		None
 10636 ;; Auto vars:     Size  Location     Type
 10637 ;;  i               1    3[COMRAM] unsigned char 
 10638 ;; Return value:  Size  Location     Type
 10639 ;;                  1    wreg      void 
 10640 ;; Registers used:
 10641 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10642 ;; Tracked objects:
 10643 ;;		On entry : 0/0
 10644 ;;		On exit  : 0/0
 10645 ;;		Unchanged: 0/0
 10646 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10647 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10648 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10649 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10650 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10651 ;;Total ram usage:        1 bytes
 10652 ;; Hardware stack levels used:    1
 10653 ;; Hardware stack levels required when called:    2
 10654 ;; This function calls:
 10655 ;;		i2_I2C_Master_Read
 10656 ;;		i2_I2C_Master_Start
 10657 ;;		i2_I2C_Master_Stop
 10658 ;;		i2_I2C_Master_Write
 10659 ;; This function is called by:
 10660 ;;		_isr
 10661 ;; This function uses a non-reentrant model
 10662 ;;
 10663                           
 10664                           	psect	text40
 10665  002E52                     __ptext40:
 10666                           	opt stack 0
 10667  002E52                     _read_time:
 10668                           	opt stack 23
 10669                           
 10670                           ;main.c: 429: I2C_Master_Start();
 10671                           
 10672                           ;incstack = 0
 10673  002E52  EC60  F01A         	call	i2_I2C_Master_Start	;wreg free
 10674                           
 10675                           ;main.c: 430: I2C_Master_Write(0b11010000);
 10676  002E56  0E00               	movlw	0
 10677  002E58  6E03               	movwf	i2I2C_Master_Write@d+1,c
 10678  002E5A  0ED0               	movlw	208
 10679  002E5C  6E02               	movwf	i2I2C_Master_Write@d,c
 10680  002E5E  EC4F  F01A         	call	i2_I2C_Master_Write	;wreg free
 10681                           
 10682                           ;main.c: 431: I2C_Master_Write(0x00);
 10683  002E62  0E00               	movlw	0
 10684  002E64  6E03               	movwf	i2I2C_Master_Write@d+1,c
 10685  002E66  0E00               	movlw	0
 10686  002E68  6E02               	movwf	i2I2C_Master_Write@d,c
 10687  002E6A  EC4F  F01A         	call	i2_I2C_Master_Write	;wreg free
 10688                           
 10689                           ;main.c: 432: I2C_Master_Stop();
 10690  002E6E  EC5C  F01A         	call	i2_I2C_Master_Stop	;wreg free
 10691                           
 10692                           ;main.c: 435: I2C_Master_Start();
 10693  002E72  EC60  F01A         	call	i2_I2C_Master_Start	;wreg free
 10694                           
 10695                           ;main.c: 436: I2C_Master_Write(0b11010001);
 10696  002E76  0E00               	movlw	0
 10697  002E78  6E03               	movwf	i2I2C_Master_Write@d+1,c
 10698  002E7A  0ED1               	movlw	209
 10699  002E7C  6E02               	movwf	i2I2C_Master_Write@d,c
 10700  002E7E  EC4F  F01A         	call	i2_I2C_Master_Write	;wreg free
 10701                           
 10702                           ;main.c: 437: for(unsigned char i=0;i<0x06;i++){
 10703  002E82  0E00               	movlw	0
 10704  002E84  6E04               	movwf	read_time@i,c
 10705  002E86                     i2l4849:
 10706  002E86  0E05               	movlw	5
 10707  002E88  6404               	cpfsgt	read_time@i,c
 10708  002E8A  D001               	goto	i2l4853
 10709  002E8C  D00E               	goto	i2l4859
 10710  002E8E                     i2l4853:
 10711                           
 10712                           ;main.c: 438: time[i] = I2C_Master_Read(1);
 10713  002E8E  5004               	movf	read_time@i,w,c
 10714  002E90  0D01               	mullw	1
 10715  002E92  0EC3               	movlw	low _time
 10716  002E94  24F3               	addwf	prodl,w,c
 10717  002E96  6ED9               	movwf	fsr2l,c
 10718  002E98  0E00               	movlw	high _time
 10719  002E9A  20F4               	addwfc	prodh,w,c
 10720  002E9C  6EDA               	movwf	fsr2h,c
 10721  002E9E  0E01               	movlw	1
 10722  002EA0  ECAD  F019         	call	i2_I2C_Master_Read
 10723  002EA4  6EDF               	movwf	indf2,c
 10724  002EA6  2A04               	incf	read_time@i,f,c
 10725  002EA8  D7EE               	goto	i2l4849
 10726  002EAA                     i2l4859:
 10727                           
 10728                           ;main.c: 439: }
 10729                           ;main.c: 440: time[6] = I2C_Master_Read(0);
 10730  002EAA  0E00               	movlw	0
 10731  002EAC  ECAD  F019         	call	i2_I2C_Master_Read
 10732  002EB0  0100               	movlb	0	; () banked
 10733  002EB2  6FC9               	movwf	(_time+6)& (0+255),b
 10734                           
 10735                           ;main.c: 441: I2C_Master_Stop();
 10736  002EB4  EC5C  F01A         	call	i2_I2C_Master_Stop	;wreg free
 10737  002EB8  0012               	return	
 10738  002EBA                     __end_of_read_time:
 10739                           	opt stack 0
 10740                           pclatu	equ	0xFFB
 10741                           pclath	equ	0xFFA
 10742                           tblptru	equ	0xFF8
 10743                           tblptrh	equ	0xFF7
 10744                           tblptrl	equ	0xFF6
 10745                           tablat	equ	0xFF5
 10746                           prodh	equ	0xFF4
 10747                           prodl	equ	0xFF3
 10748                           intcon	equ	0xFF2
 10749                           intcon2	equ	0xFF1
 10750                           intcon3	equ	0xFF0
 10751                           postinc0	equ	0xFEE
 10752                           fsr0h	equ	0xFEA
 10753                           fsr0l	equ	0xFE9
 10754                           wreg	equ	0xFE8
 10755                           postdec1	equ	0xFE5
 10756                           fsr1h	equ	0xFE2
 10757                           fsr1l	equ	0xFE1
 10758                           indf2	equ	0xFDF
 10759                           postinc2	equ	0xFDE
 10760                           postdec2	equ	0xFDD
 10761                           fsr2h	equ	0xFDA
 10762                           fsr2l	equ	0xFD9
 10763                           status	equ	0xFD8
 10764                           
 10765 ;; *************** function i2_I2C_Master_Write *****************
 10766 ;; Defined at:
 10767 ;;		line 47 in file "I2C.c"
 10768 ;; Parameters:    Size  Location     Type
 10769 ;;  d               2    1[COMRAM] unsigned int 
 10770 ;; Auto vars:     Size  Location     Type
 10771 ;;		None
 10772 ;; Return value:  Size  Location     Type
 10773 ;;                  1    wreg      void 
 10774 ;; Registers used:
 10775 ;;		wreg, status,2, status,0, cstack
 10776 ;; Tracked objects:
 10777 ;;		On entry : 0/0
 10778 ;;		On exit  : 0/0
 10779 ;;		Unchanged: 0/0
 10780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10781 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10784 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10785 ;;Total ram usage:        2 bytes
 10786 ;; Hardware stack levels used:    1
 10787 ;; Hardware stack levels required when called:    1
 10788 ;; This function calls:
 10789 ;;		i2_I2C_Master_Wait
 10790 ;; This function is called by:
 10791 ;;		_read_time
 10792 ;; This function uses a non-reentrant model
 10793 ;;
 10794                           
 10795                           	psect	text41
 10796  00349E                     __ptext41:
 10797                           	opt stack 0
 10798  00349E                     i2_I2C_Master_Write:
 10799                           	opt stack 23
 10800                           
 10801                           ;I2C.c: 49: I2C_Master_Wait();
 10802                           
 10803                           ;incstack = 0
 10804  00349E  EC25  F01A         	call	i2_I2C_Master_Wait	;wreg free
 10805                           
 10806                           ;I2C.c: 50: SSPBUF = d;
 10807  0034A2  C002  FFC9         	movff	i2I2C_Master_Write@d,4041	;volatile
 10808  0034A6  0012               	return		;funcret
 10809  0034A8                     __end_ofi2_I2C_Master_Write:
 10810                           	opt stack 0
 10811                           pclatu	equ	0xFFB
 10812                           pclath	equ	0xFFA
 10813                           tblptru	equ	0xFF8
 10814                           tblptrh	equ	0xFF7
 10815                           tblptrl	equ	0xFF6
 10816                           tablat	equ	0xFF5
 10817                           prodh	equ	0xFF4
 10818                           prodl	equ	0xFF3
 10819                           intcon	equ	0xFF2
 10820                           intcon2	equ	0xFF1
 10821                           intcon3	equ	0xFF0
 10822                           postinc0	equ	0xFEE
 10823                           fsr0h	equ	0xFEA
 10824                           fsr0l	equ	0xFE9
 10825                           wreg	equ	0xFE8
 10826                           postdec1	equ	0xFE5
 10827                           fsr1h	equ	0xFE2
 10828                           fsr1l	equ	0xFE1
 10829                           indf2	equ	0xFDF
 10830                           postinc2	equ	0xFDE
 10831                           postdec2	equ	0xFDD
 10832                           fsr2h	equ	0xFDA
 10833                           fsr2l	equ	0xFD9
 10834                           status	equ	0xFD8
 10835                           
 10836 ;; *************** function i2_I2C_Master_Stop *****************
 10837 ;; Defined at:
 10838 ;;		line 41 in file "I2C.c"
 10839 ;; Parameters:    Size  Location     Type
 10840 ;;		None
 10841 ;; Auto vars:     Size  Location     Type
 10842 ;;		None
 10843 ;; Return value:  Size  Location     Type
 10844 ;;                  1    wreg      void 
 10845 ;; Registers used:
 10846 ;;		wreg, status,2, status,0, cstack
 10847 ;; Tracked objects:
 10848 ;;		On entry : 0/0
 10849 ;;		On exit  : 0/0
 10850 ;;		Unchanged: 0/0
 10851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10856 ;;Total ram usage:        0 bytes
 10857 ;; Hardware stack levels used:    1
 10858 ;; Hardware stack levels required when called:    1
 10859 ;; This function calls:
 10860 ;;		i2_I2C_Master_Wait
 10861 ;; This function is called by:
 10862 ;;		_read_time
 10863 ;; This function uses a non-reentrant model
 10864 ;;
 10865                           
 10866                           	psect	text42
 10867  0034B8                     __ptext42:
 10868                           	opt stack 0
 10869  0034B8                     i2_I2C_Master_Stop:
 10870                           	opt stack 23
 10871                           
 10872                           ;I2C.c: 43: I2C_Master_Wait();
 10873                           
 10874                           ;incstack = 0
 10875  0034B8  EC25  F01A         	call	i2_I2C_Master_Wait	;wreg free
 10876                           
 10877                           ;I2C.c: 44: PEN = 1;
 10878  0034BC  84C5               	bsf	4037,2,c	;volatile
 10879  0034BE  0012               	return		;funcret
 10880  0034C0                     __end_ofi2_I2C_Master_Stop:
 10881                           	opt stack 0
 10882                           pclatu	equ	0xFFB
 10883                           pclath	equ	0xFFA
 10884                           tblptru	equ	0xFF8
 10885                           tblptrh	equ	0xFF7
 10886                           tblptrl	equ	0xFF6
 10887                           tablat	equ	0xFF5
 10888                           prodh	equ	0xFF4
 10889                           prodl	equ	0xFF3
 10890                           intcon	equ	0xFF2
 10891                           intcon2	equ	0xFF1
 10892                           intcon3	equ	0xFF0
 10893                           postinc0	equ	0xFEE
 10894                           fsr0h	equ	0xFEA
 10895                           fsr0l	equ	0xFE9
 10896                           wreg	equ	0xFE8
 10897                           postdec1	equ	0xFE5
 10898                           fsr1h	equ	0xFE2
 10899                           fsr1l	equ	0xFE1
 10900                           indf2	equ	0xFDF
 10901                           postinc2	equ	0xFDE
 10902                           postdec2	equ	0xFDD
 10903                           fsr2h	equ	0xFDA
 10904                           fsr2l	equ	0xFD9
 10905                           status	equ	0xFD8
 10906                           
 10907 ;; *************** function i2_I2C_Master_Start *****************
 10908 ;; Defined at:
 10909 ;;		line 29 in file "I2C.c"
 10910 ;; Parameters:    Size  Location     Type
 10911 ;;		None
 10912 ;; Auto vars:     Size  Location     Type
 10913 ;;		None
 10914 ;; Return value:  Size  Location     Type
 10915 ;;                  1    wreg      void 
 10916 ;; Registers used:
 10917 ;;		wreg, status,2, status,0, cstack
 10918 ;; Tracked objects:
 10919 ;;		On entry : 0/0
 10920 ;;		On exit  : 0/0
 10921 ;;		Unchanged: 0/0
 10922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10923 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10924 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10926 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10927 ;;Total ram usage:        0 bytes
 10928 ;; Hardware stack levels used:    1
 10929 ;; Hardware stack levels required when called:    1
 10930 ;; This function calls:
 10931 ;;		i2_I2C_Master_Wait
 10932 ;; This function is called by:
 10933 ;;		_read_time
 10934 ;; This function uses a non-reentrant model
 10935 ;;
 10936                           
 10937                           	psect	text43
 10938  0034C0                     __ptext43:
 10939                           	opt stack 0
 10940  0034C0                     i2_I2C_Master_Start:
 10941                           	opt stack 23
 10942                           
 10943                           ;I2C.c: 31: I2C_Master_Wait();
 10944                           
 10945                           ;incstack = 0
 10946  0034C0  EC25  F01A         	call	i2_I2C_Master_Wait	;wreg free
 10947                           
 10948                           ;I2C.c: 32: SEN = 1;
 10949  0034C4  80C5               	bsf	4037,0,c	;volatile
 10950  0034C6  0012               	return		;funcret
 10951  0034C8                     __end_ofi2_I2C_Master_Start:
 10952                           	opt stack 0
 10953                           pclatu	equ	0xFFB
 10954                           pclath	equ	0xFFA
 10955                           tblptru	equ	0xFF8
 10956                           tblptrh	equ	0xFF7
 10957                           tblptrl	equ	0xFF6
 10958                           tablat	equ	0xFF5
 10959                           prodh	equ	0xFF4
 10960                           prodl	equ	0xFF3
 10961                           intcon	equ	0xFF2
 10962                           intcon2	equ	0xFF1
 10963                           intcon3	equ	0xFF0
 10964                           postinc0	equ	0xFEE
 10965                           fsr0h	equ	0xFEA
 10966                           fsr0l	equ	0xFE9
 10967                           wreg	equ	0xFE8
 10968                           postdec1	equ	0xFE5
 10969                           fsr1h	equ	0xFE2
 10970                           fsr1l	equ	0xFE1
 10971                           indf2	equ	0xFDF
 10972                           postinc2	equ	0xFDE
 10973                           postdec2	equ	0xFDD
 10974                           fsr2h	equ	0xFDA
 10975                           fsr2l	equ	0xFD9
 10976                           status	equ	0xFD8
 10977                           
 10978 ;; *************** function i2_I2C_Master_Read *****************
 10979 ;; Defined at:
 10980 ;;		line 61 in file "I2C.c"
 10981 ;; Parameters:    Size  Location     Type
 10982 ;;  a               1    wreg     unsigned char 
 10983 ;; Auto vars:     Size  Location     Type
 10984 ;;  a               1    1[COMRAM] unsigned char 
 10985 ;;  I2C_Master_R    1    2[COMRAM] unsigned char 
 10986 ;; Return value:  Size  Location     Type
 10987 ;;                  1    wreg      unsigned char 
 10988 ;; Registers used:
 10989 ;;		wreg, status,2, status,0, cstack
 10990 ;; Tracked objects:
 10991 ;;		On entry : 0/0
 10992 ;;		On exit  : 0/0
 10993 ;;		Unchanged: 0/0
 10994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10996 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10998 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10999 ;;Total ram usage:        2 bytes
 11000 ;; Hardware stack levels used:    1
 11001 ;; Hardware stack levels required when called:    1
 11002 ;; This function calls:
 11003 ;;		i2_I2C_Master_Wait
 11004 ;; This function is called by:
 11005 ;;		_read_time
 11006 ;; This function uses a non-reentrant model
 11007 ;;
 11008                           
 11009                           	psect	text44
 11010  00335A                     __ptext44:
 11011                           	opt stack 0
 11012  00335A                     i2_I2C_Master_Read:
 11013                           	opt stack 23
 11014                           
 11015                           ;incstack = 0
 11016                           ;i2I2C_Master_Read@a stored from wreg
 11017  00335A  6E02               	movwf	i2I2C_Master_Read@a,c
 11018                           
 11019                           ;I2C.c: 63: unsigned char temp;
 11020                           ;I2C.c: 64: I2C_Master_Wait();
 11021  00335C  EC25  F01A         	call	i2_I2C_Master_Wait	;wreg free
 11022                           
 11023                           ;I2C.c: 65: RCEN = 1;
 11024  003360  86C5               	bsf	4037,3,c	;volatile
 11025                           
 11026                           ;I2C.c: 66: I2C_Master_Wait();
 11027  003362  EC25  F01A         	call	i2_I2C_Master_Wait	;wreg free
 11028                           
 11029                           ;I2C.c: 67: temp = SSPBUF;
 11030  003366  CFC9 F003          	movff	4041,i2I2C_Master_Read@temp	;volatile
 11031                           
 11032                           ;I2C.c: 68: I2C_Master_Wait();
 11033  00336A  EC25  F01A         	call	i2_I2C_Master_Wait	;wreg free
 11034                           
 11035                           ;I2C.c: 69: ACKDT = (a)?0:1;
 11036  00336E  5002               	movf	i2I2C_Master_Read@a,w,c
 11037  003370  A4D8               	btfss	status,2,c
 11038  003372  D002               	goto	i2u460_40
 11039  003374  8AC5               	bsf	4037,5,c	;volatile
 11040  003376  D001               	goto	i2l4573
 11041  003378                     i2u460_40:
 11042  003378  9AC5               	bcf	4037,5,c	;volatile
 11043  00337A                     i2l4573:
 11044                           
 11045                           ;I2C.c: 70: ACKEN = 1;
 11046  00337A  88C5               	bsf	4037,4,c	;volatile
 11047                           
 11048                           ;I2C.c: 71: return temp;
 11049  00337C  5003               	movf	i2I2C_Master_Read@temp,w,c
 11050  00337E  0012               	return	
 11051  003380                     __end_ofi2_I2C_Master_Read:
 11052                           	opt stack 0
 11053                           pclatu	equ	0xFFB
 11054                           pclath	equ	0xFFA
 11055                           tblptru	equ	0xFF8
 11056                           tblptrh	equ	0xFF7
 11057                           tblptrl	equ	0xFF6
 11058                           tablat	equ	0xFF5
 11059                           prodh	equ	0xFF4
 11060                           prodl	equ	0xFF3
 11061                           intcon	equ	0xFF2
 11062                           intcon2	equ	0xFF1
 11063                           intcon3	equ	0xFF0
 11064                           postinc0	equ	0xFEE
 11065                           fsr0h	equ	0xFEA
 11066                           fsr0l	equ	0xFE9
 11067                           wreg	equ	0xFE8
 11068                           postdec1	equ	0xFE5
 11069                           fsr1h	equ	0xFE2
 11070                           fsr1l	equ	0xFE1
 11071                           indf2	equ	0xFDF
 11072                           postinc2	equ	0xFDE
 11073                           postdec2	equ	0xFDD
 11074                           fsr2h	equ	0xFDA
 11075                           fsr2l	equ	0xFD9
 11076                           status	equ	0xFD8
 11077                           
 11078 ;; *************** function i2_I2C_Master_Wait *****************
 11079 ;; Defined at:
 11080 ;;		line 24 in file "I2C.c"
 11081 ;; Parameters:    Size  Location     Type
 11082 ;;		None
 11083 ;; Auto vars:     Size  Location     Type
 11084 ;;		None
 11085 ;; Return value:  Size  Location     Type
 11086 ;;                  1    wreg      void 
 11087 ;; Registers used:
 11088 ;;		wreg, status,2, status,0
 11089 ;; Tracked objects:
 11090 ;;		On entry : 0/0
 11091 ;;		On exit  : 0/0
 11092 ;;		Unchanged: 0/0
 11093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11096 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11097 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11098 ;;Total ram usage:        1 bytes
 11099 ;; Hardware stack levels used:    1
 11100 ;; This function calls:
 11101 ;;		Nothing
 11102 ;; This function is called by:
 11103 ;;		i2_I2C_Master_Start
 11104 ;;		i2_I2C_Master_Stop
 11105 ;;		i2_I2C_Master_Write
 11106 ;;		i2_I2C_Master_Read
 11107 ;; This function uses a non-reentrant model
 11108 ;;
 11109                           
 11110                           	psect	text45
 11111  00344A                     __ptext45:
 11112                           	opt stack 0
 11113  00344A                     i2_I2C_Master_Wait:
 11114                           	opt stack 23
 11115  00344A                     i2l34:
 11116  00344A  B4C7               	btfsc	4039,2,c	;volatile
 11117  00344C  D7FE               	goto	i2l34
 11118  00344E  CFC5 F001          	movff	4037,??i2_I2C_Master_Wait	;volatile
 11119  003452  0E1F               	movlw	31
 11120  003454  1601               	andwf	??i2_I2C_Master_Wait,f,c
 11121  003456  B4D8               	btfsc	status,2,c
 11122  003458  0012               	return	
 11123  00345A  D7F7               	goto	i2l34
 11124  00345C                     __end_ofi2_I2C_Master_Wait:
 11125                           	opt stack 0
 11126                           pclatu	equ	0xFFB
 11127                           pclath	equ	0xFFA
 11128                           tblptru	equ	0xFF8
 11129                           tblptrh	equ	0xFF7
 11130                           tblptrl	equ	0xFF6
 11131                           tablat	equ	0xFF5
 11132                           prodh	equ	0xFF4
 11133                           prodl	equ	0xFF3
 11134                           intcon	equ	0xFF2
 11135                           intcon2	equ	0xFF1
 11136                           intcon3	equ	0xFF0
 11137                           postinc0	equ	0xFEE
 11138                           fsr0h	equ	0xFEA
 11139                           fsr0l	equ	0xFE9
 11140                           wreg	equ	0xFE8
 11141                           postdec1	equ	0xFE5
 11142                           fsr1h	equ	0xFE2
 11143                           fsr1l	equ	0xFE1
 11144                           indf2	equ	0xFDF
 11145                           postinc2	equ	0xFDE
 11146                           postdec2	equ	0xFDD
 11147                           fsr2h	equ	0xFDA
 11148                           fsr2l	equ	0xFD9
 11149                           status	equ	0xFD8
 11150                           
 11151 ;; *************** function _dec_to_hex *****************
 11152 ;; Defined at:
 11153 ;;		line 388 in file "main.c"
 11154 ;; Parameters:    Size  Location     Type
 11155 ;;  num             2   98[COMRAM] int 
 11156 ;; Auto vars:     Size  Location     Type
 11157 ;;  quotient        2  112[COMRAM] int 
 11158 ;;  hexnum          2  110[COMRAM] int 
 11159 ;;  i               2  108[COMRAM] int 
 11160 ;;  temp            2  106[COMRAM] int 
 11161 ;; Return value:  Size  Location     Type
 11162 ;;                  2   98[COMRAM] int 
 11163 ;; Registers used:
 11164 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11165 ;; Tracked objects:
 11166 ;;		On entry : 0/0
 11167 ;;		On exit  : 0/0
 11168 ;;		Unchanged: 0/0
 11169 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11170 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11171 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11172 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11173 ;;      Totals:        16       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11174 ;;Total ram usage:       16 bytes
 11175 ;; Hardware stack levels used:    1
 11176 ;; Hardware stack levels required when called:    5
 11177 ;; This function calls:
 11178 ;;		___awdiv
 11179 ;;		___awtoft
 11180 ;;		___ftadd
 11181 ;;		___ftmul
 11182 ;;		___fttol
 11183 ;;		_pow
 11184 ;; This function is called by:
 11185 ;;		_isr
 11186 ;; This function uses a non-reentrant model
 11187 ;;
 11188                           
 11189                           	psect	text46
 11190  001F2A                     __ptext46:
 11191                           	opt stack 0
 11192  001F2A                     _dec_to_hex:
 11193                           	opt stack 20
 11194                           
 11195                           ;main.c: 389: int i = 0, quotient = num, temp, hexnum = 0;
 11196                           
 11197                           ;incstack = 0
 11198  001F2A  0E00               	movlw	0
 11199  001F2C  6E6E               	movwf	dec_to_hex@i+1,c
 11200  001F2E  0E00               	movlw	0
 11201  001F30  6E6D               	movwf	dec_to_hex@i,c
 11202  001F32  C063  F071         	movff	dec_to_hex@num,dec_to_hex@quotient
 11203  001F36  C064  F072         	movff	dec_to_hex@num+1,dec_to_hex@quotient+1
 11204  001F3A  0E00               	movlw	0
 11205  001F3C  6E70               	movwf	dec_to_hex@hexnum+1,c
 11206  001F3E  0E00               	movlw	0
 11207  001F40  6E6F               	movwf	dec_to_hex@hexnum,c
 11208                           
 11209                           ;main.c: 391: while (quotient != 0) {
 11210  001F42  D068               	goto	i2l4879
 11211  001F44                     i2l4867:
 11212                           
 11213                           ;main.c: 392: temp = quotient % 16;
 11214  001F44  0E0F               	movlw	15
 11215  001F46  1471               	andwf	dec_to_hex@quotient,w,c
 11216  001F48  6E6B               	movwf	dec_to_hex@temp,c
 11217  001F4A  6A6C               	clrf	dec_to_hex@temp+1,c
 11218                           
 11219                           ;main.c: 394: hexnum += temp*pow(10,i);
 11220  001F4C  C06D  F009         	movff	dec_to_hex@i,___awtoft@c
 11221  001F50  C06E  F00A         	movff	dec_to_hex@i+1,___awtoft@c+1
 11222  001F54  EC2F  F019         	call	___awtoft	;wreg free
 11223  001F58  C009  F065         	movff	?___awtoft,_dec_to_hex$1406
 11224  001F5C  C00A  F066         	movff	?___awtoft+1,_dec_to_hex$1406+1
 11225  001F60  C00B  F067         	movff	?___awtoft+2,_dec_to_hex$1406+2
 11226                           
 11227                           ;main.c: 394: hexnum += temp*pow(10,i);
 11228  001F64  C065  F055         	movff	_dec_to_hex$1406,pow@y
 11229  001F68  C066  F056         	movff	_dec_to_hex$1406+1,pow@y+1
 11230  001F6C  C067  F057         	movff	_dec_to_hex$1406+2,pow@y+2
 11231  001F70  0E00               	movlw	0
 11232  001F72  6E52               	movwf	pow@x,c
 11233  001F74  0E20               	movlw	32
 11234  001F76  6E53               	movwf	pow@x+1,c
 11235  001F78  0E41               	movlw	65
 11236  001F7A  6E54               	movwf	pow@x+2,c
 11237  001F7C  ECC5  F00D         	call	_pow	;wreg free
 11238  001F80  C052  F068         	movff	?_pow,_dec_to_hex$1407
 11239  001F84  C053  F069         	movff	?_pow+1,_dec_to_hex$1407+1
 11240  001F88  C054  F06A         	movff	?_pow+2,_dec_to_hex$1407+2
 11241                           
 11242                           ;main.c: 394: hexnum += temp*pow(10,i);
 11243  001F8C  C068  F010         	movff	_dec_to_hex$1407,___ftmul@f2
 11244  001F90  C069  F011         	movff	_dec_to_hex$1407+1,___ftmul@f2+1
 11245  001F94  C06A  F012         	movff	_dec_to_hex$1407+2,___ftmul@f2+2
 11246  001F98  C06B  F009         	movff	dec_to_hex@temp,___awtoft@c
 11247  001F9C  C06C  F00A         	movff	dec_to_hex@temp+1,___awtoft@c+1
 11248  001FA0  EC2F  F019         	call	___awtoft	;wreg free
 11249  001FA4  C009  F00D         	movff	?___awtoft,___ftmul@f1
 11250  001FA8  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
 11251  001FAC  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
 11252  001FB0  EC07  F011         	call	___ftmul	;wreg free
 11253  001FB4  C00D  F01F         	movff	?___ftmul,___ftadd@f2
 11254  001FB8  C00E  F020         	movff	?___ftmul+1,___ftadd@f2+1
 11255  001FBC  C00F  F021         	movff	?___ftmul+2,___ftadd@f2+2
 11256  001FC0  C06F  F009         	movff	dec_to_hex@hexnum,___awtoft@c
 11257  001FC4  C070  F00A         	movff	dec_to_hex@hexnum+1,___awtoft@c+1
 11258  001FC8  EC2F  F019         	call	___awtoft	;wreg free
 11259  001FCC  C009  F01C         	movff	?___awtoft,___ftadd@f1
 11260  001FD0  C00A  F01D         	movff	?___awtoft+1,___ftadd@f1+1
 11261  001FD4  C00B  F01E         	movff	?___awtoft+2,___ftadd@f1+2
 11262  001FD8  ECEF  F00C         	call	___ftadd	;wreg free
 11263  001FDC  C01C  F028         	movff	?___ftadd,___fttol@f1
 11264  001FE0  C01D  F029         	movff	?___ftadd+1,___fttol@f1+1
 11265  001FE4  C01E  F02A         	movff	?___ftadd+2,___fttol@f1+2
 11266  001FE8  EC8D  F010         	call	___fttol	;wreg free
 11267  001FEC  C028  F06F         	movff	?___fttol,dec_to_hex@hexnum
 11268  001FF0  C029  F070         	movff	?___fttol+1,dec_to_hex@hexnum+1
 11269                           
 11270                           ;main.c: 396: quotient = quotient / 16;
 11271  001FF4  C071  F007         	movff	dec_to_hex@quotient,___awdiv@dividend
 11272  001FF8  C072  F008         	movff	dec_to_hex@quotient+1,___awdiv@dividend+1
 11273  001FFC  0E00               	movlw	0
 11274  001FFE  6E0A               	movwf	___awdiv@divisor+1,c
 11275  002000  0E10               	movlw	16
 11276  002002  6E09               	movwf	___awdiv@divisor,c
 11277  002004  EC34  F016         	call	___awdiv	;wreg free
 11278  002008  C007  F071         	movff	?___awdiv,dec_to_hex@quotient
 11279  00200C  C008  F072         	movff	?___awdiv+1,dec_to_hex@quotient+1
 11280                           
 11281                           ;main.c: 397: i += 1;
 11282  002010  4A6D               	infsnz	dec_to_hex@i,f,c
 11283  002012  2A6E               	incf	dec_to_hex@i+1,f,c
 11284  002014                     i2l4879:
 11285  002014  5071               	movf	dec_to_hex@quotient,w,c
 11286  002016  1072               	iorwf	dec_to_hex@quotient+1,w,c
 11287  002018  A4D8               	btfss	status,2,c
 11288  00201A  D794               	goto	i2l4867
 11289                           
 11290                           ;main.c: 398: }
 11291                           ;main.c: 399: return hexnum;
 11292  00201C  C06F  F063         	movff	dec_to_hex@hexnum,?_dec_to_hex
 11293  002020  C070  F064         	movff	dec_to_hex@hexnum+1,?_dec_to_hex+1
 11294  002024  0012               	return		;funcret
 11295  002026                     __end_of_dec_to_hex:
 11296                           	opt stack 0
 11297                           pclatu	equ	0xFFB
 11298                           pclath	equ	0xFFA
 11299                           tblptru	equ	0xFF8
 11300                           tblptrh	equ	0xFF7
 11301                           tblptrl	equ	0xFF6
 11302                           tablat	equ	0xFF5
 11303                           prodh	equ	0xFF4
 11304                           prodl	equ	0xFF3
 11305                           intcon	equ	0xFF2
 11306                           intcon2	equ	0xFF1
 11307                           intcon3	equ	0xFF0
 11308                           postinc0	equ	0xFEE
 11309                           fsr0h	equ	0xFEA
 11310                           fsr0l	equ	0xFE9
 11311                           wreg	equ	0xFE8
 11312                           postdec1	equ	0xFE5
 11313                           fsr1h	equ	0xFE2
 11314                           fsr1l	equ	0xFE1
 11315                           indf2	equ	0xFDF
 11316                           postinc2	equ	0xFDE
 11317                           postdec2	equ	0xFDD
 11318                           fsr2h	equ	0xFDA
 11319                           fsr2l	equ	0xFD9
 11320                           status	equ	0xFD8
 11321                           
 11322 ;; *************** function _pow *****************
 11323 ;; Defined at:
 11324 ;;		line 5 in file "/Applications/microchip/xc8/v1.40/sources/common/pow.c"
 11325 ;; Parameters:    Size  Location     Type
 11326 ;;  x               3   81[COMRAM] int 
 11327 ;;  y               3   84[COMRAM] int 
 11328 ;; Auto vars:     Size  Location     Type
 11329 ;;  yi              4   94[COMRAM] unsigned long 
 11330 ;;  sign            1   93[COMRAM] unsigned char 
 11331 ;; Return value:  Size  Location     Type
 11332 ;;                  3   81[COMRAM] unsigned char 
 11333 ;; Registers used:
 11334 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11335 ;; Tracked objects:
 11336 ;;		On entry : 0/0
 11337 ;;		On exit  : 0/0
 11338 ;;		Unchanged: 0/0
 11339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11340 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11341 ;;      Locals:        11       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11342 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11343 ;;      Totals:        17       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11344 ;;Total ram usage:       17 bytes
 11345 ;; Hardware stack levels used:    1
 11346 ;; Hardware stack levels required when called:    4
 11347 ;; This function calls:
 11348 ;;		___ftge
 11349 ;;		___ftmul
 11350 ;;		___ftneg
 11351 ;;		___fttol
 11352 ;;		___lltoft
 11353 ;;		_exp
 11354 ;;		_log
 11355 ;; This function is called by:
 11356 ;;		_dec_to_hex
 11357 ;; This function uses a non-reentrant model
 11358 ;;
 11359                           
 11360                           	psect	text47
 11361  001B8A                     __ptext47:
 11362                           	opt stack 0
 11363  001B8A                     _pow:
 11364                           	opt stack 20
 11365                           
 11366                           ;incstack = 0
 11367  001B8A  0E00               	movlw	0
 11368  001B8C  6E5E               	movwf	pow@sign,c
 11369  001B8E  5052               	movf	pow@x,w,c
 11370  001B90  1053               	iorwf	pow@x+1,w,c
 11371  001B92  1054               	iorwf	pow@x+2,w,c
 11372  001B94  A4D8               	btfss	status,2,c
 11373  001B96  D01C               	goto	i2l4417
 11374  001B98  0E00               	movlw	0
 11375  001B9A  6E01               	movwf	___ftge@ff1,c
 11376  001B9C  0E00               	movlw	0
 11377  001B9E  6E02               	movwf	___ftge@ff1+1,c
 11378  001BA0  0E00               	movlw	0
 11379  001BA2  6E03               	movwf	___ftge@ff1+2,c
 11380  001BA4  C055  F004         	movff	pow@y,___ftge@ff2
 11381  001BA8  C056  F005         	movff	pow@y+1,___ftge@ff2+1
 11382  001BAC  C057  F006         	movff	pow@y+2,___ftge@ff2+2
 11383  001BB0  ECEC  F015         	call	___ftge	;wreg free
 11384  001BB4  A0D8               	btfss	status,0,c
 11385  001BB6  D005               	goto	i2l1029
 11386  001BB8  0E00               	movlw	0
 11387  001BBA  0100               	movlb	0	; () banked
 11388  001BBC  6FD9               	movwf	(_errno+1)& (0+255),b
 11389  001BBE  0E21               	movlw	33
 11390  001BC0  6FD8               	movwf	_errno& (0+255),b
 11391  001BC2                     i2l1029:
 11392  001BC2  0E00               	movlw	0
 11393  001BC4  6E52               	movwf	?_pow,c
 11394  001BC6  0E00               	movlw	0
 11395  001BC8  6E53               	movwf	?_pow+1,c
 11396  001BCA  0E00               	movlw	0
 11397  001BCC  6E54               	movwf	?_pow+2,c
 11398  001BCE  0012               	return	
 11399  001BD0                     i2l4417:
 11400  001BD0  5055               	movf	pow@y,w,c
 11401  001BD2  1056               	iorwf	pow@y+1,w,c
 11402  001BD4  1057               	iorwf	pow@y+2,w,c
 11403  001BD6  A4D8               	btfss	status,2,c
 11404  001BD8  D007               	goto	i2l4423
 11405  001BDA  0E00               	movlw	0
 11406  001BDC  6E52               	movwf	?_pow,c
 11407  001BDE  0E80               	movlw	128
 11408  001BE0  6E53               	movwf	?_pow+1,c
 11409  001BE2  0E3F               	movlw	63
 11410  001BE4  6E54               	movwf	?_pow+2,c
 11411  001BE6  0012               	return	
 11412  001BE8                     i2l4423:
 11413  001BE8  AE54               	btfss	pow@x+2,7,c
 11414  001BEA  D041               	goto	i2l4435
 11415  001BEC  C055  F028         	movff	pow@y,___fttol@f1
 11416  001BF0  C056  F029         	movff	pow@y+1,___fttol@f1+1
 11417  001BF4  C057  F02A         	movff	pow@y+2,___fttol@f1+2
 11418  001BF8  EC8D  F010         	call	___fttol	;wreg free
 11419  001BFC  C028  F05F         	movff	?___fttol,pow@yi
 11420  001C00  C029  F060         	movff	?___fttol+1,pow@yi+1
 11421  001C04  C02A  F061         	movff	?___fttol+2,pow@yi+2
 11422  001C08  C02B  F062         	movff	?___fttol+3,pow@yi+3
 11423  001C0C  C05F  F009         	movff	pow@yi,___lltoft@c
 11424  001C10  C060  F00A         	movff	pow@yi+1,___lltoft@c+1
 11425  001C14  C061  F00B         	movff	pow@yi+2,___lltoft@c+2
 11426  001C18  C062  F00C         	movff	pow@yi+3,___lltoft@c+3
 11427  001C1C  EC1F  F018         	call	___lltoft	;wreg free
 11428  001C20  5055               	movf	pow@y,w,c
 11429  001C22  1809               	xorwf	?___lltoft,w,c
 11430  001C24  E107               	bnz	i2u441_40
 11431  001C26  5056               	movf	pow@y+1,w,c
 11432  001C28  180A               	xorwf	?___lltoft+1,w,c
 11433  001C2A  E104               	bnz	i2u441_40
 11434  001C2C  5057               	movf	pow@y+2,w,c
 11435  001C2E  180B               	xorwf	?___lltoft+2,w,c
 11436  001C30  B4D8               	btfsc	status,2,c
 11437  001C32  D00C               	goto	i2l4431
 11438  001C34                     i2u441_40:
 11439  001C34  0E00               	movlw	0
 11440  001C36  0100               	movlb	0	; () banked
 11441  001C38  6FD9               	movwf	(_errno+1)& (0+255),b
 11442  001C3A  0E21               	movlw	33
 11443  001C3C  6FD8               	movwf	_errno& (0+255),b
 11444  001C3E  0E00               	movlw	0
 11445  001C40  6E52               	movwf	?_pow,c
 11446  001C42  0E00               	movlw	0
 11447  001C44  6E53               	movwf	?_pow+1,c
 11448  001C46  0E00               	movlw	0
 11449  001C48  6E54               	movwf	?_pow+2,c
 11450                           
 11451                           ; BSR set to: 0
 11452  001C4A  0012               	return	
 11453  001C4C                     i2l4431:
 11454  001C4C  505F               	movf	pow@yi,w,c
 11455  001C4E  0B01               	andlw	1
 11456  001C50  6E5E               	movwf	pow@sign,c
 11457  001C52  C052  F001         	movff	pow@x,___ftneg@f1
 11458  001C56  C053  F002         	movff	pow@x+1,___ftneg@f1+1
 11459  001C5A  C054  F003         	movff	pow@x+2,___ftneg@f1+2
 11460  001C5E  ECD3  F019         	call	___ftneg	;wreg free
 11461  001C62  C001  F052         	movff	?___ftneg,pow@x
 11462  001C66  C002  F053         	movff	?___ftneg+1,pow@x+1
 11463  001C6A  C003  F054         	movff	?___ftneg+2,pow@x+2
 11464  001C6E                     i2l4435:
 11465  001C6E  C052  F034         	movff	pow@x,log@x
 11466  001C72  C053  F035         	movff	pow@x+1,log@x+1
 11467  001C76  C054  F036         	movff	pow@x+2,log@x+2
 11468  001C7A  EC80  F00E         	call	_log	;wreg free
 11469  001C7E  C034  F058         	movff	?_log,_pow$1408
 11470  001C82  C035  F059         	movff	?_log+1,_pow$1408+1
 11471  001C86  C036  F05A         	movff	?_log+2,_pow$1408+2
 11472  001C8A  C058  F00D         	movff	_pow$1408,___ftmul@f1
 11473  001C8E  C059  F00E         	movff	_pow$1408+1,___ftmul@f1+1
 11474  001C92  C05A  F00F         	movff	_pow$1408+2,___ftmul@f1+2
 11475  001C96  C055  F010         	movff	pow@y,___ftmul@f2
 11476  001C9A  C056  F011         	movff	pow@y+1,___ftmul@f2+1
 11477  001C9E  C057  F012         	movff	pow@y+2,___ftmul@f2+2
 11478  001CA2  EC07  F011         	call	___ftmul	;wreg free
 11479  001CA6  C00D  F05B         	movff	?___ftmul,_pow$1409
 11480  001CAA  C00E  F05C         	movff	?___ftmul+1,_pow$1409+1
 11481  001CAE  C00F  F05D         	movff	?___ftmul+2,_pow$1409+2
 11482  001CB2  C05B  F049         	movff	_pow$1409,exp@x
 11483  001CB6  C05C  F04A         	movff	_pow$1409+1,exp@x+1
 11484  001CBA  C05D  F04B         	movff	_pow$1409+2,exp@x+2
 11485  001CBE  ECFB  F00B         	call	_exp	;wreg free
 11486  001CC2  C049  F052         	movff	?_exp,pow@x
 11487  001CC6  C04A  F053         	movff	?_exp+1,pow@x+1
 11488  001CCA  C04B  F054         	movff	?_exp+2,pow@x+2
 11489  001CCE  505E               	movf	pow@sign,w,c
 11490  001CD0  B4D8               	btfsc	status,2,c
 11491  001CD2  D00F               	goto	i2l1034
 11492  001CD4  C052  F001         	movff	pow@x,___ftneg@f1
 11493  001CD8  C053  F002         	movff	pow@x+1,___ftneg@f1+1
 11494  001CDC  C054  F003         	movff	pow@x+2,___ftneg@f1+2
 11495  001CE0  ECD3  F019         	call	___ftneg	;wreg free
 11496  001CE4  C001  F052         	movff	?___ftneg,?_pow
 11497  001CE8  C002  F053         	movff	?___ftneg+1,?_pow+1
 11498  001CEC  C003  F054         	movff	?___ftneg+2,?_pow+2
 11499  001CF0  0012               	return	
 11500  001CF2                     i2l1034:
 11501  001CF2  C052  F052         	movff	pow@x,?_pow
 11502  001CF6  C053  F053         	movff	pow@x+1,?_pow+1
 11503  001CFA  C054  F054         	movff	pow@x+2,?_pow+2
 11504  001CFE  0012               	return		;funcret
 11505  001D00                     __end_of_pow:
 11506                           	opt stack 0
 11507                           pclatu	equ	0xFFB
 11508                           pclath	equ	0xFFA
 11509                           tblptru	equ	0xFF8
 11510                           tblptrh	equ	0xFF7
 11511                           tblptrl	equ	0xFF6
 11512                           tablat	equ	0xFF5
 11513                           prodh	equ	0xFF4
 11514                           prodl	equ	0xFF3
 11515                           intcon	equ	0xFF2
 11516                           intcon2	equ	0xFF1
 11517                           intcon3	equ	0xFF0
 11518                           postinc0	equ	0xFEE
 11519                           fsr0h	equ	0xFEA
 11520                           fsr0l	equ	0xFE9
 11521                           wreg	equ	0xFE8
 11522                           postdec1	equ	0xFE5
 11523                           fsr1h	equ	0xFE2
 11524                           fsr1l	equ	0xFE1
 11525                           indf2	equ	0xFDF
 11526                           postinc2	equ	0xFDE
 11527                           postdec2	equ	0xFDD
 11528                           fsr2h	equ	0xFDA
 11529                           fsr2l	equ	0xFD9
 11530                           status	equ	0xFD8
 11531                           
 11532 ;; *************** function _log *****************
 11533 ;; Defined at:
 11534 ;;		line 5 in file "/Applications/microchip/xc8/v1.40/sources/common/log.c"
 11535 ;; Parameters:    Size  Location     Type
 11536 ;;  x               3   51[COMRAM] unsigned char 
 11537 ;; Auto vars:     Size  Location     Type
 11538 ;;  exponent        2   54[COMRAM] int 
 11539 ;; Return value:  Size  Location     Type
 11540 ;;                  3   51[COMRAM] int 
 11541 ;; Registers used:
 11542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11543 ;; Tracked objects:
 11544 ;;		On entry : 0/0
 11545 ;;		On exit  : 0/0
 11546 ;;		Unchanged: 0/0
 11547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11548 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11549 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11551 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11552 ;;Total ram usage:        5 bytes
 11553 ;; Hardware stack levels used:    1
 11554 ;; Hardware stack levels required when called:    3
 11555 ;; This function calls:
 11556 ;;		___awtoft
 11557 ;;		___ftadd
 11558 ;;		___ftmul
 11559 ;;		_eval_poly
 11560 ;;		_frexp
 11561 ;; This function is called by:
 11562 ;;		_pow
 11563 ;; This function uses a non-reentrant model
 11564 ;;
 11565                           
 11566                           	psect	text48
 11567  001D00                     __ptext48:
 11568                           	opt stack 0
 11569  001D00                     _log:
 11570                           	opt stack 20
 11571                           
 11572                           ;incstack = 0
 11573  001D00  AE36               	btfss	log@x+2,7,c
 11574  001D02  D00C               	goto	i2l3993
 11575  001D04  0E00               	movlw	0
 11576  001D06  0100               	movlb	0	; () banked
 11577  001D08  6FD9               	movwf	(_errno+1)& (0+255),b
 11578  001D0A  0E21               	movlw	33
 11579  001D0C  6FD8               	movwf	_errno& (0+255),b
 11580  001D0E  0E00               	movlw	0
 11581  001D10  6E34               	movwf	?_log,c
 11582  001D12  0E00               	movlw	0
 11583  001D14  6E35               	movwf	?_log+1,c
 11584  001D16  0E00               	movlw	0
 11585  001D18  6E36               	movwf	?_log+2,c
 11586                           
 11587                           ; BSR set to: 0
 11588  001D1A  0012               	return	
 11589  001D1C                     i2l3993:
 11590  001D1C  5034               	movf	log@x,w,c
 11591  001D1E  1035               	iorwf	log@x+1,w,c
 11592  001D20  1036               	iorwf	log@x+2,w,c
 11593  001D22  A4D8               	btfss	status,2,c
 11594  001D24  D00C               	goto	i2l3999
 11595  001D26  0E00               	movlw	0
 11596  001D28  0100               	movlb	0	; () banked
 11597  001D2A  6FD9               	movwf	(_errno+1)& (0+255),b
 11598  001D2C  0E22               	movlw	34
 11599  001D2E  6FD8               	movwf	_errno& (0+255),b
 11600  001D30  0E00               	movlw	0
 11601  001D32  6E34               	movwf	?_log,c
 11602  001D34  0E00               	movlw	0
 11603  001D36  6E35               	movwf	?_log+1,c
 11604  001D38  0E00               	movlw	0
 11605  001D3A  6E36               	movwf	?_log+2,c
 11606                           
 11607                           ; BSR set to: 0
 11608  001D3C  0012               	return	
 11609  001D3E                     i2l3999:
 11610  001D3E  0E00               	movlw	0
 11611  001D40  6E10               	movwf	___ftmul@f2,c
 11612  001D42  0E00               	movlw	0
 11613  001D44  6E11               	movwf	___ftmul@f2+1,c
 11614  001D46  0E40               	movlw	64
 11615  001D48  6E12               	movwf	___ftmul@f2+2,c
 11616  001D4A  0E37               	movlw	low log@exponent
 11617  001D4C  6E04               	movwf	frexp@eptr,c
 11618  001D4E  0E00               	movlw	high log@exponent
 11619  001D50  6E05               	movwf	frexp@eptr+1,c
 11620  001D52  C034  F001         	movff	log@x,frexp@value
 11621  001D56  C035  F002         	movff	log@x+1,frexp@value+1
 11622  001D5A  C036  F003         	movff	log@x+2,frexp@value+2
 11623  001D5E  ECA4  F015         	call	_frexp	;wreg free
 11624  001D62  C001  F00D         	movff	?_frexp,___ftmul@f1
 11625  001D66  C002  F00E         	movff	?_frexp+1,___ftmul@f1+1
 11626  001D6A  C003  F00F         	movff	?_frexp+2,___ftmul@f1+2
 11627  001D6E  EC07  F011         	call	___ftmul	;wreg free
 11628  001D72  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 11629  001D76  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 11630  001D7A  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 11631  001D7E  0E00               	movlw	0
 11632  001D80  6E1F               	movwf	___ftadd@f2,c
 11633  001D82  0E80               	movlw	128
 11634  001D84  6E20               	movwf	___ftadd@f2+1,c
 11635  001D86  0EBF               	movlw	191
 11636  001D88  6E21               	movwf	___ftadd@f2+2,c
 11637  001D8A  ECEF  F00C         	call	___ftadd	;wreg free
 11638  001D8E  C01C  F034         	movff	?___ftadd,log@x
 11639  001D92  C01D  F035         	movff	?___ftadd+1,log@x+1
 11640  001D96  C01E  F036         	movff	?___ftadd+2,log@x+2
 11641  001D9A  0637               	decf	log@exponent,f,c
 11642  001D9C  A0D8               	btfss	status,0,c
 11643  001D9E  0638               	decf	log@exponent+1,f,c
 11644  001DA0  C034  F028         	movff	log@x,eval_poly@x
 11645  001DA4  C035  F029         	movff	log@x+1,eval_poly@x+1
 11646  001DA8  C036  F02A         	movff	log@x+2,eval_poly@x+2
 11647  001DAC  0EDB               	movlw	low log@coeff
 11648  001DAE  6E2B               	movwf	eval_poly@d,c
 11649  001DB0  0EFD               	movlw	high log@coeff
 11650  001DB2  6E2C               	movwf	eval_poly@d+1,c
 11651  001DB4  0E00               	movlw	0
 11652  001DB6  6E2E               	movwf	eval_poly@n+1,c
 11653  001DB8  0E08               	movlw	8
 11654  001DBA  6E2D               	movwf	eval_poly@n,c
 11655  001DBC  ECD6  F012         	call	_eval_poly	;wreg free
 11656  001DC0  C028  F034         	movff	?_eval_poly,log@x
 11657  001DC4  C029  F035         	movff	?_eval_poly+1,log@x+1
 11658  001DC8  C02A  F036         	movff	?_eval_poly+2,log@x+2
 11659  001DCC  0E72               	movlw	114
 11660  001DCE  6E10               	movwf	___ftmul@f2,c
 11661  001DD0  0E31               	movlw	49
 11662  001DD2  6E11               	movwf	___ftmul@f2+1,c
 11663  001DD4  0E3F               	movlw	63
 11664  001DD6  6E12               	movwf	___ftmul@f2+2,c
 11665  001DD8  C037  F009         	movff	log@exponent,___awtoft@c
 11666  001DDC  C038  F00A         	movff	log@exponent+1,___awtoft@c+1
 11667  001DE0  EC2F  F019         	call	___awtoft	;wreg free
 11668  001DE4  C009  F00D         	movff	?___awtoft,___ftmul@f1
 11669  001DE8  C00A  F00E         	movff	?___awtoft+1,___ftmul@f1+1
 11670  001DEC  C00B  F00F         	movff	?___awtoft+2,___ftmul@f1+2
 11671  001DF0  EC07  F011         	call	___ftmul	;wreg free
 11672  001DF4  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 11673  001DF8  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 11674  001DFC  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 11675  001E00  C034  F01F         	movff	log@x,___ftadd@f2
 11676  001E04  C035  F020         	movff	log@x+1,___ftadd@f2+1
 11677  001E08  C036  F021         	movff	log@x+2,___ftadd@f2+2
 11678  001E0C  ECEF  F00C         	call	___ftadd	;wreg free
 11679  001E10  C01C  F034         	movff	?___ftadd,?_log
 11680  001E14  C01D  F035         	movff	?___ftadd+1,?_log+1
 11681  001E18  C01E  F036         	movff	?___ftadd+2,?_log+2
 11682  001E1C  0012               	return	
 11683  001E1E                     __end_of_log:
 11684                           	opt stack 0
 11685                           pclatu	equ	0xFFB
 11686                           pclath	equ	0xFFA
 11687                           tblptru	equ	0xFF8
 11688                           tblptrh	equ	0xFF7
 11689                           tblptrl	equ	0xFF6
 11690                           tablat	equ	0xFF5
 11691                           prodh	equ	0xFF4
 11692                           prodl	equ	0xFF3
 11693                           intcon	equ	0xFF2
 11694                           intcon2	equ	0xFF1
 11695                           intcon3	equ	0xFF0
 11696                           postinc0	equ	0xFEE
 11697                           fsr0h	equ	0xFEA
 11698                           fsr0l	equ	0xFE9
 11699                           wreg	equ	0xFE8
 11700                           postdec1	equ	0xFE5
 11701                           fsr1h	equ	0xFE2
 11702                           fsr1l	equ	0xFE1
 11703                           indf2	equ	0xFDF
 11704                           postinc2	equ	0xFDE
 11705                           postdec2	equ	0xFDD
 11706                           fsr2h	equ	0xFDA
 11707                           fsr2l	equ	0xFD9
 11708                           status	equ	0xFD8
 11709                           
 11710 ;; *************** function _exp *****************
 11711 ;; Defined at:
 11712 ;;		line 12 in file "/Applications/microchip/xc8/v1.40/sources/common/exp.c"
 11713 ;; Parameters:    Size  Location     Type
 11714 ;;  x               3   72[COMRAM] int 
 11715 ;; Auto vars:     Size  Location     Type
 11716 ;;  exponent        2   78[COMRAM] int 
 11717 ;;  sign            1   80[COMRAM] unsigned char 
 11718 ;; Return value:  Size  Location     Type
 11719 ;;                  3   72[COMRAM] unsigned char 
 11720 ;; Registers used:
 11721 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11722 ;; Tracked objects:
 11723 ;;		On entry : 0/0
 11724 ;;		On exit  : 0/0
 11725 ;;		Unchanged: 0/0
 11726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11727 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11728 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11730 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11731 ;;Total ram usage:        9 bytes
 11732 ;; Hardware stack levels used:    1
 11733 ;; Hardware stack levels required when called:    3
 11734 ;; This function calls:
 11735 ;;		___awtoft
 11736 ;;		___ftdiv
 11737 ;;		___ftge
 11738 ;;		___ftmul
 11739 ;;		___ftneg
 11740 ;;		___ftsub
 11741 ;;		___fttol
 11742 ;;		_eval_poly
 11743 ;;		_floor
 11744 ;;		_ldexp
 11745 ;; This function is called by:
 11746 ;;		_pow
 11747 ;; This function uses a non-reentrant model
 11748 ;;
 11749                           
 11750                           	psect	text49
 11751  0017F6                     __ptext49:
 11752                           	opt stack 0
 11753  0017F6                     _exp:
 11754                           	opt stack 20
 11755                           
 11756                           ;incstack = 0
 11757  0017F6  5049               	movf	exp@x,w,c
 11758  0017F8  104A               	iorwf	exp@x+1,w,c
 11759  0017FA  104B               	iorwf	exp@x+2,w,c
 11760  0017FC  A4D8               	btfss	status,2,c
 11761  0017FE  D007               	goto	i2l4015
 11762  001800  0E00               	movlw	0
 11763  001802  6E49               	movwf	?_exp,c
 11764  001804  0E80               	movlw	128
 11765  001806  6E4A               	movwf	?_exp+1,c
 11766  001808  0E3F               	movlw	63
 11767  00180A  6E4B               	movwf	?_exp+2,c
 11768  00180C  0012               	return	
 11769  00180E                     i2l4015:
 11770  00180E  0E72               	movlw	114
 11771  001810  6E01               	movwf	___ftge@ff1,c
 11772  001812  0E31               	movlw	49
 11773  001814  6E02               	movwf	___ftge@ff1+1,c
 11774  001816  0E44               	movlw	68
 11775  001818  6E03               	movwf	___ftge@ff1+2,c
 11776  00181A  C049  F004         	movff	exp@x,___ftge@ff2
 11777  00181E  C04A  F005         	movff	exp@x+1,___ftge@ff2+1
 11778  001822  C04B  F006         	movff	exp@x+2,___ftge@ff2+2
 11779  001826  ECEC  F015         	call	___ftge	;wreg free
 11780  00182A  B0D8               	btfsc	status,0,c
 11781  00182C  D00C               	goto	i2l4021
 11782  00182E  0E00               	movlw	0
 11783  001830  0100               	movlb	0	; () banked
 11784  001832  6FD9               	movwf	(_errno+1)& (0+255),b
 11785  001834  0E22               	movlw	34
 11786  001836  6FD8               	movwf	_errno& (0+255),b
 11787  001838  0EFF               	movlw	255
 11788  00183A  6E49               	movwf	?_exp,c
 11789  00183C  0E7F               	movlw	127
 11790  00183E  6E4A               	movwf	?_exp+1,c
 11791  001840  0E7F               	movlw	127
 11792  001842  6E4B               	movwf	?_exp+2,c
 11793                           
 11794                           ; BSR set to: 0
 11795  001844  0012               	return	
 11796  001846                     i2l4021:
 11797  001846  C049  F001         	movff	exp@x,___ftge@ff1
 11798  00184A  C04A  F002         	movff	exp@x+1,___ftge@ff1+1
 11799  00184E  C04B  F003         	movff	exp@x+2,___ftge@ff1+2
 11800  001852  0E49               	movlw	73
 11801  001854  6E04               	movwf	___ftge@ff2,c
 11802  001856  0E3A               	movlw	58
 11803  001858  6E05               	movwf	___ftge@ff2+1,c
 11804  00185A  0EC4               	movlw	196
 11805  00185C  6E06               	movwf	___ftge@ff2+2,c
 11806  00185E  ECEC  F015         	call	___ftge	;wreg free
 11807  001862  B0D8               	btfsc	status,0,c
 11808  001864  D00C               	goto	i2l4027
 11809  001866  0E00               	movlw	0
 11810  001868  0100               	movlb	0	; () banked
 11811  00186A  6FD9               	movwf	(_errno+1)& (0+255),b
 11812  00186C  0E22               	movlw	34
 11813  00186E  6FD8               	movwf	_errno& (0+255),b
 11814  001870  0E00               	movlw	0
 11815  001872  6E49               	movwf	?_exp,c
 11816  001874  0E00               	movlw	0
 11817  001876  6E4A               	movwf	?_exp+1,c
 11818  001878  0E00               	movlw	0
 11819  00187A  6E4B               	movwf	?_exp+2,c
 11820                           
 11821                           ; BSR set to: 0
 11822  00187C  0012               	return	
 11823  00187E                     i2l4027:
 11824  00187E  AE4B               	btfss	exp@x+2,7,c
 11825  001880  D002               	goto	i2u367_40
 11826  001882  0E01               	movlw	1
 11827  001884  D001               	goto	i2u368_40
 11828  001886                     i2u367_40:
 11829  001886  0E00               	movlw	0
 11830  001888                     i2u368_40:
 11831  001888  6E51               	movwf	exp@sign,c
 11832  00188A  5051               	movf	exp@sign,w,c
 11833  00188C  B4D8               	btfsc	status,2,c
 11834  00188E  D00E               	goto	i2l1192
 11835  001890  C049  F001         	movff	exp@x,___ftneg@f1
 11836  001894  C04A  F002         	movff	exp@x+1,___ftneg@f1+1
 11837  001898  C04B  F003         	movff	exp@x+2,___ftneg@f1+2
 11838  00189C  ECD3  F019         	call	___ftneg	;wreg free
 11839  0018A0  C001  F049         	movff	?___ftneg,exp@x
 11840  0018A4  C002  F04A         	movff	?___ftneg+1,exp@x+1
 11841  0018A8  C003  F04B         	movff	?___ftneg+2,exp@x+2
 11842  0018AC                     i2l1192:
 11843  0018AC  C049  F00D         	movff	exp@x,___ftmul@f1
 11844  0018B0  C04A  F00E         	movff	exp@x+1,___ftmul@f1+1
 11845  0018B4  C04B  F00F         	movff	exp@x+2,___ftmul@f1+2
 11846  0018B8  0EAA               	movlw	170
 11847  0018BA  6E10               	movwf	___ftmul@f2,c
 11848  0018BC  0EB8               	movlw	184
 11849  0018BE  6E11               	movwf	___ftmul@f2+1,c
 11850  0018C0  0E3F               	movlw	63
 11851  0018C2  6E12               	movwf	___ftmul@f2+2,c
 11852  0018C4  EC07  F011         	call	___ftmul	;wreg free
 11853  0018C8  C00D  F049         	movff	?___ftmul,exp@x
 11854  0018CC  C00E  F04A         	movff	?___ftmul+1,exp@x+1
 11855  0018D0  C00F  F04B         	movff	?___ftmul+2,exp@x+2
 11856  0018D4  C049  F041         	movff	exp@x,floor@x
 11857  0018D8  C04A  F042         	movff	exp@x+1,floor@x+1
 11858  0018DC  C04B  F043         	movff	exp@x+2,floor@x+2
 11859  0018E0  EC67  F012         	call	_floor	;wreg free
 11860  0018E4  C041  F04C         	movff	?_floor,_exp$1410
 11861  0018E8  C042  F04D         	movff	?_floor+1,_exp$1410+1
 11862  0018EC  C043  F04E         	movff	?_floor+2,_exp$1410+2
 11863  0018F0  C04C  F028         	movff	_exp$1410,___fttol@f1
 11864  0018F4  C04D  F029         	movff	_exp$1410+1,___fttol@f1+1
 11865  0018F8  C04E  F02A         	movff	_exp$1410+2,___fttol@f1+2
 11866  0018FC  EC8D  F010         	call	___fttol	;wreg free
 11867  001900  C028  F04F         	movff	?___fttol,exp@exponent
 11868  001904  C029  F050         	movff	?___fttol+1,exp@exponent+1
 11869  001908  C049  F028         	movff	exp@x,___ftsub@f1
 11870  00190C  C04A  F029         	movff	exp@x+1,___ftsub@f1+1
 11871  001910  C04B  F02A         	movff	exp@x+2,___ftsub@f1+2
 11872  001914  C04F  F009         	movff	exp@exponent,___awtoft@c
 11873  001918  C050  F00A         	movff	exp@exponent+1,___awtoft@c+1
 11874  00191C  EC2F  F019         	call	___awtoft	;wreg free
 11875  001920  C009  F02B         	movff	?___awtoft,___ftsub@f2
 11876  001924  C00A  F02C         	movff	?___awtoft+1,___ftsub@f2+1
 11877  001928  C00B  F02D         	movff	?___awtoft+2,___ftsub@f2+2
 11878  00192C  EC0F  F019         	call	___ftsub	;wreg free
 11879  001930  C028  F049         	movff	?___ftsub,exp@x
 11880  001934  C029  F04A         	movff	?___ftsub+1,exp@x+1
 11881  001938  C02A  F04B         	movff	?___ftsub+2,exp@x+2
 11882  00193C  C049  F028         	movff	exp@x,eval_poly@x
 11883  001940  C04A  F029         	movff	exp@x+1,eval_poly@x+1
 11884  001944  C04B  F02A         	movff	exp@x+2,eval_poly@x+2
 11885  001948  0EBD               	movlw	low exp@coeff
 11886  00194A  6E2B               	movwf	eval_poly@d,c
 11887  00194C  0EFD               	movlw	high exp@coeff
 11888  00194E  6E2C               	movwf	eval_poly@d+1,c
 11889  001950  0E00               	movlw	0
 11890  001952  6E2E               	movwf	eval_poly@n+1,c
 11891  001954  0E09               	movlw	9
 11892  001956  6E2D               	movwf	eval_poly@n,c
 11893  001958  ECD6  F012         	call	_eval_poly	;wreg free
 11894  00195C  C028  F034         	movff	?_eval_poly,ldexp@value
 11895  001960  C029  F035         	movff	?_eval_poly+1,ldexp@value+1
 11896  001964  C02A  F036         	movff	?_eval_poly+2,ldexp@value+2
 11897  001968  C04F  F037         	movff	exp@exponent,ldexp@newexp
 11898  00196C  C050  F038         	movff	exp@exponent+1,ldexp@newexp+1
 11899  001970  EC3F  F013         	call	_ldexp	;wreg free
 11900  001974  C034  F049         	movff	?_ldexp,exp@x
 11901  001978  C035  F04A         	movff	?_ldexp+1,exp@x+1
 11902  00197C  C036  F04B         	movff	?_ldexp+2,exp@x+2
 11903  001980  5051               	movf	exp@sign,w,c
 11904  001982  B4D8               	btfsc	status,2,c
 11905  001984  D025               	goto	i2l1193
 11906  001986  2849               	incf	exp@x,w,c
 11907  001988  E10E               	bnz	i2l4049
 11908  00198A  0E7F               	movlw	127
 11909  00198C  184A               	xorwf	exp@x+1,w,c
 11910  00198E  E10B               	bnz	i2l4049
 11911  001990  0E7F               	movlw	127
 11912  001992  184B               	xorwf	exp@x+2,w,c
 11913  001994  A4D8               	btfss	status,2,c
 11914  001996  D007               	goto	i2l4049
 11915  001998  0E00               	movlw	0
 11916  00199A  6E49               	movwf	?_exp,c
 11917  00199C  0E00               	movlw	0
 11918  00199E  6E4A               	movwf	?_exp+1,c
 11919  0019A0  0E00               	movlw	0
 11920  0019A2  6E4B               	movwf	?_exp+2,c
 11921  0019A4  0012               	return	
 11922  0019A6                     i2l4049:
 11923  0019A6  0E00               	movlw	0
 11924  0019A8  6E09               	movwf	___ftdiv@f1,c
 11925  0019AA  0E80               	movlw	128
 11926  0019AC  6E0A               	movwf	___ftdiv@f1+1,c
 11927  0019AE  0E3F               	movlw	63
 11928  0019B0  6E0B               	movwf	___ftdiv@f1+2,c
 11929  0019B2  C049  F00C         	movff	exp@x,___ftdiv@f2
 11930  0019B6  C04A  F00D         	movff	exp@x+1,___ftdiv@f2+1
 11931  0019BA  C04B  F00E         	movff	exp@x+2,___ftdiv@f2+2
 11932  0019BE  ECF4  F011         	call	___ftdiv	;wreg free
 11933  0019C2  C009  F049         	movff	?___ftdiv,?_exp
 11934  0019C6  C00A  F04A         	movff	?___ftdiv+1,?_exp+1
 11935  0019CA  C00B  F04B         	movff	?___ftdiv+2,?_exp+2
 11936  0019CE  0012               	return	
 11937  0019D0                     i2l1193:
 11938  0019D0  C049  F049         	movff	exp@x,?_exp
 11939  0019D4  C04A  F04A         	movff	exp@x+1,?_exp+1
 11940  0019D8  C04B  F04B         	movff	exp@x+2,?_exp+2
 11941  0019DC  0012               	return		;funcret
 11942  0019DE                     __end_of_exp:
 11943                           	opt stack 0
 11944                           pclatu	equ	0xFFB
 11945                           pclath	equ	0xFFA
 11946                           tblptru	equ	0xFF8
 11947                           tblptrh	equ	0xFF7
 11948                           tblptrl	equ	0xFF6
 11949                           tablat	equ	0xFF5
 11950                           prodh	equ	0xFF4
 11951                           prodl	equ	0xFF3
 11952                           intcon	equ	0xFF2
 11953                           intcon2	equ	0xFF1
 11954                           intcon3	equ	0xFF0
 11955                           postinc0	equ	0xFEE
 11956                           fsr0h	equ	0xFEA
 11957                           fsr0l	equ	0xFE9
 11958                           wreg	equ	0xFE8
 11959                           postdec1	equ	0xFE5
 11960                           fsr1h	equ	0xFE2
 11961                           fsr1l	equ	0xFE1
 11962                           indf2	equ	0xFDF
 11963                           postinc2	equ	0xFDE
 11964                           postdec2	equ	0xFDD
 11965                           fsr2h	equ	0xFDA
 11966                           fsr2l	equ	0xFD9
 11967                           status	equ	0xFD8
 11968                           
 11969 ;; *************** function _ldexp *****************
 11970 ;; Defined at:
 11971 ;;		line 277 in file "/Applications/microchip/xc8/v1.40/sources/common/frexp.c"
 11972 ;; Parameters:    Size  Location     Type
 11973 ;;  value           3   51[COMRAM] unsigned char 
 11974 ;;  newexp          2   54[COMRAM] int 
 11975 ;; Auto vars:     Size  Location     Type
 11976 ;;		None
 11977 ;; Return value:  Size  Location     Type
 11978 ;;                  3   51[COMRAM] int 
 11979 ;; Registers used:
 11980 ;;		wreg, status,2, status,0
 11981 ;; Tracked objects:
 11982 ;;		On entry : 0/0
 11983 ;;		On exit  : 0/0
 11984 ;;		Unchanged: 0/0
 11985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11986 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11987 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11988 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11989 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11990 ;;Total ram usage:        7 bytes
 11991 ;; Hardware stack levels used:    1
 11992 ;; This function calls:
 11993 ;;		Nothing
 11994 ;; This function is called by:
 11995 ;;		_exp
 11996 ;; This function uses a non-reentrant model
 11997 ;;
 11998                           
 11999                           	psect	text50
 12000  00267E                     __ptext50:
 12001                           	opt stack 0
 12002  00267E                     _ldexp:
 12003                           	opt stack 22
 12004                           
 12005                           ;incstack = 0
 12006  00267E  5034               	movf	ldexp@value,w,c
 12007  002680  1035               	iorwf	ldexp@value+1,w,c
 12008  002682  1036               	iorwf	ldexp@value+2,w,c
 12009  002684  A4D8               	btfss	status,2,c
 12010  002686  D007               	goto	i2l3861
 12011  002688  0E00               	movlw	0
 12012  00268A  6E34               	movwf	?_ldexp,c
 12013  00268C  0E00               	movlw	0
 12014  00268E  6E35               	movwf	?_ldexp+1,c
 12015  002690  0E00               	movlw	0
 12016  002692  6E36               	movwf	?_ldexp+2,c
 12017  002694  0012               	return	
 12018  002696                     i2l3861:
 12019  002696  5036               	movf	ldexp@value+2,w,c
 12020  002698  0B7F               	andlw	127
 12021  00269A  6E39               	movwf	??_ldexp& (0+255),c
 12022  00269C  6A3A               	clrf	(??_ldexp+1)& (0+255),c
 12023  00269E  90D8               	bcf	status,0,c
 12024  0026A0  3639               	rlcf	??_ldexp,f,c
 12025  0026A2  363A               	rlcf	??_ldexp+1,f,c
 12026  0026A4  5039               	movf	??_ldexp,w,c
 12027  0026A6  2637               	addwf	ldexp@newexp,f,c
 12028  0026A8  503A               	movf	??_ldexp+1,w,c
 12029  0026AA  2238               	addwfc	ldexp@newexp+1,f,c
 12030  0026AC  AE35               	btfss	ldexp@value+1,7,c
 12031  0026AE  D003               	goto	i2u347_40
 12032  0026B0  6A39               	clrf	??_ldexp& (0+255),c
 12033  0026B2  2A39               	incf	??_ldexp& (0+255),f,c
 12034  0026B4  D001               	goto	i2u347_48
 12035  0026B6                     i2u347_40:
 12036  0026B6  6A39               	clrf	??_ldexp& (0+255),c
 12037  0026B8                     i2u347_48:
 12038  0026B8  5039               	movf	??_ldexp,w,c
 12039  0026BA  2637               	addwf	ldexp@newexp,f,c
 12040  0026BC  0E00               	movlw	0
 12041  0026BE  2238               	addwfc	ldexp@newexp+1,f,c
 12042  0026C0  AE38               	btfss	ldexp@newexp+1,7,c
 12043  0026C2  D00C               	goto	i2l3869
 12044  0026C4  0E00               	movlw	0
 12045  0026C6  0100               	movlb	0	; () banked
 12046  0026C8  6FD9               	movwf	(_errno+1)& (0+255),b
 12047  0026CA  0E22               	movlw	34
 12048  0026CC  6FD8               	movwf	_errno& (0+255),b
 12049  0026CE  0E00               	movlw	0
 12050  0026D0  6E34               	movwf	?_ldexp,c
 12051  0026D2  0E00               	movlw	0
 12052  0026D4  6E35               	movwf	?_ldexp+1,c
 12053  0026D6  0E00               	movlw	0
 12054  0026D8                     L22:
 12055  0026D8  6E36               	movwf	?_ldexp+2,c
 12056                           
 12057                           ; BSR set to: 0
 12058  0026DA  0012               	return	
 12059  0026DC                     i2l3869:
 12060  0026DC  BE38               	btfsc	ldexp@newexp+1,7,c
 12061  0026DE  D016               	goto	i2l3885
 12062  0026E0  0438               	decf	ldexp@newexp+1,w,c
 12063  0026E2  A0D8               	btfss	status,0,c
 12064  0026E4  D013               	goto	i2l3885
 12065  0026E6  0E00               	movlw	0
 12066  0026E8  0100               	movlb	0	; () banked
 12067  0026EA  6FD9               	movwf	(_errno+1)& (0+255),b
 12068  0026EC  0E22               	movlw	34
 12069  0026EE  6FD8               	movwf	_errno& (0+255),b
 12070                           
 12071                           ; BSR set to: 0
 12072  0026F0  AE36               	btfss	ldexp@value+2,7,c
 12073  0026F2  D006               	goto	i2l3881
 12074                           
 12075                           ; BSR set to: 0
 12076  0026F4  0EFF               	movlw	255
 12077  0026F6  6E34               	movwf	?_ldexp,c
 12078  0026F8  0E7F               	movlw	127
 12079  0026FA  6E35               	movwf	?_ldexp+1,c
 12080  0026FC  0EFF               	movlw	255
 12081  0026FE  D7EC               	goto	L22
 12082  002700                     i2l3881:
 12083                           
 12084                           ; BSR set to: 0
 12085  002700  0EFF               	movlw	255
 12086  002702  6E34               	movwf	?_ldexp,c
 12087  002704  0E7F               	movlw	127
 12088  002706  6E35               	movwf	?_ldexp+1,c
 12089  002708  0E7F               	movlw	127
 12090  00270A  D7E6               	goto	L22
 12091  00270C                     i2l3885:
 12092  00270C  3438               	rlcf	ldexp@newexp+1,w,c
 12093  00270E  3038               	rrcf	ldexp@newexp+1,w,c
 12094  002710  6E3A               	movwf	(??_ldexp+1)& (0+255),c
 12095  002712  3037               	rrcf	ldexp@newexp,w,c
 12096  002714  6E39               	movwf	??_ldexp& (0+255),c
 12097  002716  5036               	movf	ldexp@value+2,w,c
 12098  002718  1839               	xorwf	??_ldexp,w,c
 12099  00271A  0B80               	andlw	-128
 12100  00271C  1839               	xorwf	??_ldexp,w,c
 12101  00271E  6E36               	movwf	ldexp@value+2,c
 12102  002720  C037  F039         	movff	ldexp@newexp,??_ldexp
 12103  002724  0E01               	movlw	1
 12104  002726  1639               	andwf	??_ldexp,f,c
 12105  002728  3239               	rrcf	??_ldexp,f,c
 12106  00272A  3239               	rrcf	??_ldexp,f,c
 12107  00272C  5035               	movf	ldexp@value+1,w,c
 12108  00272E  1839               	xorwf	??_ldexp,w,c
 12109  002730  0B7F               	andlw	-129
 12110  002732  1839               	xorwf	??_ldexp,w,c
 12111  002734  6E35               	movwf	ldexp@value+1,c
 12112  002736  C034  F034         	movff	ldexp@value,?_ldexp
 12113  00273A  C035  F035         	movff	ldexp@value+1,?_ldexp+1
 12114  00273E  C036  F036         	movff	ldexp@value+2,?_ldexp+2
 12115  002742  0012               	return	
 12116  002744                     __end_of_ldexp:
 12117                           	opt stack 0
 12118                           pclatu	equ	0xFFB
 12119                           pclath	equ	0xFFA
 12120                           tblptru	equ	0xFF8
 12121                           tblptrh	equ	0xFF7
 12122                           tblptrl	equ	0xFF6
 12123                           tablat	equ	0xFF5
 12124                           prodh	equ	0xFF4
 12125                           prodl	equ	0xFF3
 12126                           intcon	equ	0xFF2
 12127                           intcon2	equ	0xFF1
 12128                           intcon3	equ	0xFF0
 12129                           postinc0	equ	0xFEE
 12130                           fsr0h	equ	0xFEA
 12131                           fsr0l	equ	0xFE9
 12132                           wreg	equ	0xFE8
 12133                           postdec1	equ	0xFE5
 12134                           fsr1h	equ	0xFE2
 12135                           fsr1l	equ	0xFE1
 12136                           indf2	equ	0xFDF
 12137                           postinc2	equ	0xFDE
 12138                           postdec2	equ	0xFDD
 12139                           fsr2h	equ	0xFDA
 12140                           fsr2l	equ	0xFD9
 12141                           status	equ	0xFD8
 12142                           
 12143 ;; *************** function _floor *****************
 12144 ;; Defined at:
 12145 ;;		line 13 in file "/Applications/microchip/xc8/v1.40/sources/common/floor.c"
 12146 ;; Parameters:    Size  Location     Type
 12147 ;;  x               3   64[COMRAM] int 
 12148 ;; Auto vars:     Size  Location     Type
 12149 ;;  i               3   67[COMRAM] int 
 12150 ;;  expon           2   70[COMRAM] int 
 12151 ;; Return value:  Size  Location     Type
 12152 ;;                  3   64[COMRAM] int 
 12153 ;; Registers used:
 12154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 12155 ;; Tracked objects:
 12156 ;;		On entry : 0/0
 12157 ;;		On exit  : 0/0
 12158 ;;		Unchanged: 0/0
 12159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12160 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12161 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12162 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12163 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12164 ;;Total ram usage:        8 bytes
 12165 ;; Hardware stack levels used:    1
 12166 ;; Hardware stack levels required when called:    2
 12167 ;; This function calls:
 12168 ;;		___altoft
 12169 ;;		___ftadd
 12170 ;;		___ftge
 12171 ;;		___fttol
 12172 ;;		_frexp
 12173 ;; This function is called by:
 12174 ;;		_exp
 12175 ;; This function uses a non-reentrant model
 12176 ;;
 12177                           
 12178                           	psect	text51
 12179  0024CE                     __ptext51:
 12180                           	opt stack 0
 12181  0024CE                     _floor:
 12182                           	opt stack 20
 12183                           
 12184                           ;incstack = 0
 12185  0024CE  C041  F001         	movff	floor@x,frexp@value
 12186  0024D2  C042  F002         	movff	floor@x+1,frexp@value+1
 12187  0024D6  C043  F003         	movff	floor@x+2,frexp@value+2
 12188  0024DA  0E47               	movlw	low floor@expon
 12189  0024DC  6E04               	movwf	frexp@eptr,c
 12190  0024DE  0E00               	movlw	high floor@expon
 12191  0024E0  6E05               	movwf	frexp@eptr+1,c
 12192  0024E2  ECA4  F015         	call	_frexp	;wreg free
 12193  0024E6  AE48               	btfss	floor@expon+1,7,c
 12194  0024E8  D010               	goto	i2l3839
 12195  0024EA  AE43               	btfss	floor@x+2,7,c
 12196  0024EC  D007               	goto	i2l3835
 12197  0024EE  0E00               	movlw	0
 12198  0024F0  6E41               	movwf	?_floor,c
 12199  0024F2  0E80               	movlw	128
 12200  0024F4  6E42               	movwf	?_floor+1,c
 12201  0024F6  0EBF               	movlw	191
 12202  0024F8  6E43               	movwf	?_floor+2,c
 12203  0024FA  0012               	return	
 12204  0024FC                     i2l3835:
 12205  0024FC  0E00               	movlw	0
 12206  0024FE  6E41               	movwf	?_floor,c
 12207  002500  0E00               	movlw	0
 12208  002502  6E42               	movwf	?_floor+1,c
 12209  002504  0E00               	movlw	0
 12210  002506  6E43               	movwf	?_floor+2,c
 12211  002508  0012               	return	
 12212  00250A                     i2l3839:
 12213  00250A  5048               	movf	floor@expon+1,w,c
 12214  00250C  E104               	bnz	i2u343_40
 12215  00250E  0E15               	movlw	21
 12216  002510  5C47               	subwf	floor@expon,w,c
 12217  002512  A0D8               	btfss	status,0,c
 12218  002514  D007               	goto	i2l3843
 12219  002516                     i2u343_40:
 12220  002516  C041  F041         	movff	floor@x,?_floor
 12221  00251A  C042  F042         	movff	floor@x+1,?_floor+1
 12222  00251E  C043  F043         	movff	floor@x+2,?_floor+2
 12223  002522  0012               	return	
 12224  002524                     i2l3843:
 12225  002524  C041  F028         	movff	floor@x,___fttol@f1
 12226  002528  C042  F029         	movff	floor@x+1,___fttol@f1+1
 12227  00252C  C043  F02A         	movff	floor@x+2,___fttol@f1+2
 12228  002530  EC8D  F010         	call	___fttol	;wreg free
 12229  002534  C028  F037         	movff	?___fttol,___altoft@c
 12230  002538  C029  F038         	movff	?___fttol+1,___altoft@c+1
 12231  00253C  C02A  F039         	movff	?___fttol+2,___altoft@c+2
 12232  002540  C02B  F03A         	movff	?___fttol+3,___altoft@c+3
 12233  002544  ECB2  F016         	call	___altoft	;wreg free
 12234  002548  C037  F044         	movff	?___altoft,floor@i
 12235  00254C  C038  F045         	movff	?___altoft+1,floor@i+1
 12236  002550  C039  F046         	movff	?___altoft+2,floor@i+2
 12237  002554  C041  F001         	movff	floor@x,___ftge@ff1
 12238  002558  C042  F002         	movff	floor@x+1,___ftge@ff1+1
 12239  00255C  C043  F003         	movff	floor@x+2,___ftge@ff1+2
 12240  002560  C044  F004         	movff	floor@i,___ftge@ff2
 12241  002564  C045  F005         	movff	floor@i+1,___ftge@ff2+1
 12242  002568  C046  F006         	movff	floor@i+2,___ftge@ff2+2
 12243  00256C  ECEC  F015         	call	___ftge	;wreg free
 12244  002570  B0D8               	btfsc	status,0,c
 12245  002572  D015               	goto	i2l1203
 12246  002574  C044  F01C         	movff	floor@i,___ftadd@f1
 12247  002578  C045  F01D         	movff	floor@i+1,___ftadd@f1+1
 12248  00257C  C046  F01E         	movff	floor@i+2,___ftadd@f1+2
 12249  002580  0E00               	movlw	0
 12250  002582  6E1F               	movwf	___ftadd@f2,c
 12251  002584  0E80               	movlw	128
 12252  002586  6E20               	movwf	___ftadd@f2+1,c
 12253  002588  0EBF               	movlw	191
 12254  00258A  6E21               	movwf	___ftadd@f2+2,c
 12255  00258C  ECEF  F00C         	call	___ftadd	;wreg free
 12256  002590  C01C  F041         	movff	?___ftadd,?_floor
 12257  002594  C01D  F042         	movff	?___ftadd+1,?_floor+1
 12258  002598  C01E  F043         	movff	?___ftadd+2,?_floor+2
 12259  00259C  0012               	return	
 12260  00259E                     i2l1203:
 12261  00259E  C044  F041         	movff	floor@i,?_floor
 12262  0025A2  C045  F042         	movff	floor@i+1,?_floor+1
 12263  0025A6  C046  F043         	movff	floor@i+2,?_floor+2
 12264  0025AA  0012               	return		;funcret
 12265  0025AC                     __end_of_floor:
 12266                           	opt stack 0
 12267                           pclatu	equ	0xFFB
 12268                           pclath	equ	0xFFA
 12269                           tblptru	equ	0xFF8
 12270                           tblptrh	equ	0xFF7
 12271                           tblptrl	equ	0xFF6
 12272                           tablat	equ	0xFF5
 12273                           prodh	equ	0xFF4
 12274                           prodl	equ	0xFF3
 12275                           intcon	equ	0xFF2
 12276                           intcon2	equ	0xFF1
 12277                           intcon3	equ	0xFF0
 12278                           postinc0	equ	0xFEE
 12279                           fsr0h	equ	0xFEA
 12280                           fsr0l	equ	0xFE9
 12281                           wreg	equ	0xFE8
 12282                           postdec1	equ	0xFE5
 12283                           fsr1h	equ	0xFE2
 12284                           fsr1l	equ	0xFE1
 12285                           indf2	equ	0xFDF
 12286                           postinc2	equ	0xFDE
 12287                           postdec2	equ	0xFDD
 12288                           fsr2h	equ	0xFDA
 12289                           fsr2l	equ	0xFD9
 12290                           status	equ	0xFD8
 12291                           
 12292 ;; *************** function _frexp *****************
 12293 ;; Defined at:
 12294 ;;		line 254 in file "/Applications/microchip/xc8/v1.40/sources/common/frexp.c"
 12295 ;; Parameters:    Size  Location     Type
 12296 ;;  value           3    0[COMRAM] int 
 12297 ;;  eptr            2    3[COMRAM] PTR int 
 12298 ;;		 -> log@exponent(2), floor@expon(2), 
 12299 ;; Auto vars:     Size  Location     Type
 12300 ;;		None
 12301 ;; Return value:  Size  Location     Type
 12302 ;;                  3    0[COMRAM] PTR int 
 12303 ;; Registers used:
 12304 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12305 ;; Tracked objects:
 12306 ;;		On entry : 0/0
 12307 ;;		On exit  : 0/0
 12308 ;;		Unchanged: 0/0
 12309 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12310 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12311 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12312 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12313 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12314 ;;Total ram usage:        7 bytes
 12315 ;; Hardware stack levels used:    1
 12316 ;; This function calls:
 12317 ;;		Nothing
 12318 ;; This function is called by:
 12319 ;;		_floor
 12320 ;;		_log
 12321 ;; This function uses a non-reentrant model
 12322 ;;
 12323                           
 12324                           	psect	text52
 12325  002B48                     __ptext52:
 12326                           	opt stack 0
 12327  002B48                     _frexp:
 12328                           	opt stack 22
 12329                           
 12330                           ;incstack = 0
 12331  002B48  5001               	movf	frexp@value,w,c
 12332  002B4A  1002               	iorwf	frexp@value+1,w,c
 12333  002B4C  1003               	iorwf	frexp@value+2,w,c
 12334  002B4E  A4D8               	btfss	status,2,c
 12335  002B50  D00F               	goto	i2l3715
 12336  002B52  C004  FFD9         	movff	frexp@eptr,fsr2l
 12337  002B56  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 12338  002B5A  0E00               	movlw	0
 12339  002B5C  6EDE               	movwf	postinc2,c
 12340  002B5E  0E00               	movlw	0
 12341  002B60  6EDD               	movwf	postdec2,c
 12342  002B62  0E00               	movlw	0
 12343  002B64  6E01               	movwf	?_frexp,c
 12344  002B66  0E00               	movlw	0
 12345  002B68  6E02               	movwf	?_frexp+1,c
 12346  002B6A  0E00               	movlw	0
 12347  002B6C  6E03               	movwf	?_frexp+2,c
 12348  002B6E  0012               	return	
 12349  002B70                     i2l3715:
 12350  002B70  5003               	movf	frexp@value+2,w,c
 12351  002B72  0B7F               	andlw	127
 12352  002B74  6E06               	movwf	??_frexp& (0+255),c
 12353  002B76  6A07               	clrf	(??_frexp+1)& (0+255),c
 12354  002B78  90D8               	bcf	status,0,c
 12355  002B7A  3606               	rlcf	??_frexp,f,c
 12356  002B7C  3607               	rlcf	??_frexp+1,f,c
 12357  002B7E  C004  FFD9         	movff	frexp@eptr,fsr2l
 12358  002B82  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 12359  002B86  C006  FFDE         	movff	??_frexp,postinc2
 12360  002B8A  C007  FFDD         	movff	??_frexp+1,postdec2
 12361  002B8E  AE02               	btfss	frexp@value+1,7,c
 12362  002B90  D003               	goto	i2u330_40
 12363  002B92  6A06               	clrf	??_frexp& (0+255),c
 12364  002B94  2A06               	incf	??_frexp& (0+255),f,c
 12365  002B96  D001               	goto	i2u330_48
 12366  002B98                     i2u330_40:
 12367  002B98  6A06               	clrf	??_frexp& (0+255),c
 12368  002B9A                     i2u330_48:
 12369  002B9A  5006               	movf	??_frexp,w,c
 12370  002B9C  C004  FFD9         	movff	frexp@eptr,fsr2l
 12371  002BA0  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 12372  002BA4  12DE               	iorwf	postinc2,f,c
 12373  002BA6  0E00               	movlw	0
 12374  002BA8  12DD               	iorwf	postdec2,f,c
 12375  002BAA  C004  FFD9         	movff	frexp@eptr,fsr2l
 12376  002BAE  C005  FFDA         	movff	frexp@eptr+1,fsr2h
 12377  002BB2  0E82               	movlw	130
 12378  002BB4  26DE               	addwf	postinc2,f,c
 12379  002BB6  0EFF               	movlw	255
 12380  002BB8  22DD               	addwfc	postdec2,f,c
 12381  002BBA  8003               	bsf	frexp@value+2,0,c
 12382  002BBC  8203               	bsf	frexp@value+2,1,c
 12383  002BBE  8403               	bsf	frexp@value+2,2,c
 12384  002BC0  8603               	bsf	frexp@value+2,3,c
 12385  002BC2  8803               	bsf	frexp@value+2,4,c
 12386  002BC4  8A03               	bsf	frexp@value+2,5,c
 12387  002BC6  9C03               	bcf	frexp@value+2,6,c
 12388  002BC8  9E02               	bcf	frexp@value+1,7,c
 12389  002BCA  C001  F001         	movff	frexp@value,?_frexp
 12390  002BCE  C002  F002         	movff	frexp@value+1,?_frexp+1
 12391  002BD2  C003  F003         	movff	frexp@value+2,?_frexp+2
 12392  002BD6  0012               	return	
 12393  002BD8                     __end_of_frexp:
 12394                           	opt stack 0
 12395                           pclatu	equ	0xFFB
 12396                           pclath	equ	0xFFA
 12397                           tblptru	equ	0xFF8
 12398                           tblptrh	equ	0xFF7
 12399                           tblptrl	equ	0xFF6
 12400                           tablat	equ	0xFF5
 12401                           prodh	equ	0xFF4
 12402                           prodl	equ	0xFF3
 12403                           intcon	equ	0xFF2
 12404                           intcon2	equ	0xFF1
 12405                           intcon3	equ	0xFF0
 12406                           postinc0	equ	0xFEE
 12407                           fsr0h	equ	0xFEA
 12408                           fsr0l	equ	0xFE9
 12409                           wreg	equ	0xFE8
 12410                           postdec1	equ	0xFE5
 12411                           fsr1h	equ	0xFE2
 12412                           fsr1l	equ	0xFE1
 12413                           indf2	equ	0xFDF
 12414                           postinc2	equ	0xFDE
 12415                           postdec2	equ	0xFDD
 12416                           fsr2h	equ	0xFDA
 12417                           fsr2l	equ	0xFD9
 12418                           status	equ	0xFD8
 12419                           
 12420 ;; *************** function ___fttol *****************
 12421 ;; Defined at:
 12422 ;;		line 44 in file "/Applications/microchip/xc8/v1.40/sources/common/fttol.c"
 12423 ;; Parameters:    Size  Location     Type
 12424 ;;  f1              3   39[COMRAM] float 
 12425 ;; Auto vars:     Size  Location     Type
 12426 ;;  lval            4   49[COMRAM] unsigned long 
 12427 ;;  exp1            1   53[COMRAM] unsigned char 
 12428 ;;  sign1           1   48[COMRAM] unsigned char 
 12429 ;; Return value:  Size  Location     Type
 12430 ;;                  4   39[COMRAM] long 
 12431 ;; Registers used:
 12432 ;;		wreg, status,2, status,0
 12433 ;; Tracked objects:
 12434 ;;		On entry : 0/0
 12435 ;;		On exit  : 0/0
 12436 ;;		Unchanged: 0/0
 12437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12438 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12439 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12440 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12441 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12442 ;;Total ram usage:       15 bytes
 12443 ;; Hardware stack levels used:    1
 12444 ;; This function calls:
 12445 ;;		Nothing
 12446 ;; This function is called by:
 12447 ;;		_dec_to_hex
 12448 ;;		_pow
 12449 ;;		_exp
 12450 ;;		_floor
 12451 ;; This function uses a non-reentrant model
 12452 ;;
 12453                           
 12454                           	psect	text53
 12455  00211A                     __ptext53:
 12456                           	opt stack 0
 12457  00211A                     ___fttol:
 12458                           	opt stack 21
 12459                           
 12460                           ;incstack = 0
 12461  00211A  C02A  F02C         	movff	___fttol@f1+2,??___fttol
 12462  00211E  6A2D               	clrf	(??___fttol+1)& (0+255),c
 12463  002120  6A2E               	clrf	(??___fttol+2)& (0+255),c
 12464  002122  3429               	rlcf	___fttol@f1+1,w,c
 12465  002124  362C               	rlcf	??___fttol& (0+255),f,c
 12466  002126  E301               	bnc	u321_41
 12467  002128  802D               	bsf	(??___fttol+1)& (0+255),0,c
 12468  00212A                     u321_41:
 12469  00212A  502C               	movf	??___fttol,w,c
 12470  00212C  6E36               	movwf	___fttol@exp1,c
 12471  00212E  5036               	movf	___fttol@exp1,w,c
 12472  002130  A4D8               	btfss	status,2,c
 12473  002132  D009               	goto	i2l3667
 12474  002134  0E00               	movlw	0
 12475  002136  6E28               	movwf	?___fttol,c
 12476  002138  0E00               	movlw	0
 12477  00213A  6E29               	movwf	?___fttol+1,c
 12478  00213C  0E00               	movlw	0
 12479  00213E  6E2A               	movwf	?___fttol+2,c
 12480  002140  0E00               	movlw	0
 12481  002142  6E2B               	movwf	?___fttol+3,c
 12482  002144  0012               	return	
 12483  002146                     i2l3667:
 12484  002146  0E17               	movlw	23
 12485  002148  6E2C               	movwf	??___fttol& (0+255),c
 12486  00214A  C028  F02D         	movff	___fttol@f1,??___fttol+1
 12487  00214E  C029  F02E         	movff	___fttol@f1+1,??___fttol+2
 12488  002152  C02A  F02F         	movff	___fttol@f1+2,??___fttol+3
 12489  002156  282C               	incf	??___fttol,w,c
 12490  002158  6E30               	movwf	(??___fttol+4)& (0+255),c
 12491  00215A  D004               	goto	i2u323_40
 12492  00215C                     i2u323_45:
 12493  00215C  90D8               	bcf	status,0,c
 12494  00215E  322F               	rrcf	??___fttol+3,f,c
 12495  002160  322E               	rrcf	??___fttol+2,f,c
 12496  002162  322D               	rrcf	??___fttol+1,f,c
 12497  002164                     i2u323_40:
 12498  002164  2E30               	decfsz	(??___fttol+4)& (0+255),f,c
 12499  002166  D7FA               	goto	i2u323_45
 12500  002168  502D               	movf	??___fttol+1,w,c
 12501  00216A  6E31               	movwf	___fttol@sign1,c
 12502  00216C  8E29               	bsf	___fttol@f1+1,7,c
 12503  00216E  0EFF               	movlw	255
 12504  002170  1628               	andwf	___fttol@f1,f,c
 12505  002172  0EFF               	movlw	255
 12506  002174  1629               	andwf	___fttol@f1+1,f,c
 12507  002176  0E00               	movlw	0
 12508  002178  162A               	andwf	___fttol@f1+2,f,c
 12509  00217A  5028               	movf	___fttol@f1,w,c
 12510  00217C  6E32               	movwf	___fttol@lval,c
 12511  00217E  5029               	movf	___fttol@f1+1,w,c
 12512  002180  6E33               	movwf	___fttol@lval+1,c
 12513  002182  502A               	movf	___fttol@f1+2,w,c
 12514  002184  6E34               	movwf	___fttol@lval+2,c
 12515  002186  6A35               	clrf	___fttol@lval+3,c
 12516  002188  0E8E               	movlw	142
 12517  00218A  5E36               	subwf	___fttol@exp1,f,c
 12518  00218C  AE36               	btfss	___fttol@exp1,7,c
 12519  00218E  D016               	goto	i2l3689
 12520  002190  5036               	movf	___fttol@exp1,w,c
 12521  002192  0A80               	xorlw	128
 12522  002194  0F8F               	addlw	143
 12523  002196  B0D8               	btfsc	status,0,c
 12524  002198  D009               	goto	i2l3685
 12525  00219A  0E00               	movlw	0
 12526  00219C  6E28               	movwf	?___fttol,c
 12527  00219E  0E00               	movlw	0
 12528  0021A0  6E29               	movwf	?___fttol+1,c
 12529  0021A2  0E00               	movlw	0
 12530  0021A4  6E2A               	movwf	?___fttol+2,c
 12531  0021A6  0E00               	movlw	0
 12532  0021A8  6E2B               	movwf	?___fttol+3,c
 12533  0021AA  0012               	return	
 12534  0021AC                     i2l3685:
 12535  0021AC  90D8               	bcf	status,0,c
 12536  0021AE  3235               	rrcf	___fttol@lval+3,f,c
 12537  0021B0  3234               	rrcf	___fttol@lval+2,f,c
 12538  0021B2  3233               	rrcf	___fttol@lval+1,f,c
 12539  0021B4  3232               	rrcf	___fttol@lval,f,c
 12540  0021B6  3E36               	incfsz	___fttol@exp1,f,c
 12541  0021B8  D7F9               	goto	i2l3685
 12542  0021BA  D015               	goto	i2l3699
 12543  0021BC                     i2l3689:
 12544  0021BC  0E17               	movlw	23
 12545  0021BE  6436               	cpfsgt	___fttol@exp1,c
 12546  0021C0  D00F               	goto	i2l3697
 12547  0021C2  0E00               	movlw	0
 12548  0021C4  6E28               	movwf	?___fttol,c
 12549  0021C6  0E00               	movlw	0
 12550  0021C8  6E29               	movwf	?___fttol+1,c
 12551  0021CA  0E00               	movlw	0
 12552  0021CC  6E2A               	movwf	?___fttol+2,c
 12553  0021CE  0E00               	movlw	0
 12554  0021D0  6E2B               	movwf	?___fttol+3,c
 12555  0021D2  0012               	return	
 12556  0021D4                     i2l3695:
 12557  0021D4  90D8               	bcf	status,0,c
 12558  0021D6  3632               	rlcf	___fttol@lval,f,c
 12559  0021D8  3633               	rlcf	___fttol@lval+1,f,c
 12560  0021DA  3634               	rlcf	___fttol@lval+2,f,c
 12561  0021DC  3635               	rlcf	___fttol@lval+3,f,c
 12562  0021DE  0636               	decf	___fttol@exp1,f,c
 12563  0021E0                     i2l3697:
 12564  0021E0  5036               	movf	___fttol@exp1,w,c
 12565  0021E2  A4D8               	btfss	status,2,c
 12566  0021E4  D7F7               	goto	i2l3695
 12567  0021E6                     i2l3699:
 12568  0021E6  5031               	movf	___fttol@sign1,w,c
 12569  0021E8  B4D8               	btfsc	status,2,c
 12570  0021EA  D008               	goto	i2l3703
 12571  0021EC  1E35               	comf	___fttol@lval+3,f,c
 12572  0021EE  1E34               	comf	___fttol@lval+2,f,c
 12573  0021F0  1E33               	comf	___fttol@lval+1,f,c
 12574  0021F2  6C32               	negf	___fttol@lval,c
 12575  0021F4  0E00               	movlw	0
 12576  0021F6  2233               	addwfc	___fttol@lval+1,f,c
 12577  0021F8  2234               	addwfc	___fttol@lval+2,f,c
 12578  0021FA  2235               	addwfc	___fttol@lval+3,f,c
 12579  0021FC                     i2l3703:
 12580  0021FC  C032  F028         	movff	___fttol@lval,?___fttol
 12581  002200  C033  F029         	movff	___fttol@lval+1,?___fttol+1
 12582  002204  C034  F02A         	movff	___fttol@lval+2,?___fttol+2
 12583  002208  C035  F02B         	movff	___fttol@lval+3,?___fttol+3
 12584  00220C  0012               	return	
 12585  00220E                     __end_of___fttol:
 12586                           	opt stack 0
 12587                           pclatu	equ	0xFFB
 12588                           pclath	equ	0xFFA
 12589                           tblptru	equ	0xFF8
 12590                           tblptrh	equ	0xFF7
 12591                           tblptrl	equ	0xFF6
 12592                           tablat	equ	0xFF5
 12593                           prodh	equ	0xFF4
 12594                           prodl	equ	0xFF3
 12595                           intcon	equ	0xFF2
 12596                           intcon2	equ	0xFF1
 12597                           intcon3	equ	0xFF0
 12598                           postinc0	equ	0xFEE
 12599                           fsr0h	equ	0xFEA
 12600                           fsr0l	equ	0xFE9
 12601                           wreg	equ	0xFE8
 12602                           postdec1	equ	0xFE5
 12603                           fsr1h	equ	0xFE2
 12604                           fsr1l	equ	0xFE1
 12605                           indf2	equ	0xFDF
 12606                           postinc2	equ	0xFDE
 12607                           postdec2	equ	0xFDD
 12608                           fsr2h	equ	0xFDA
 12609                           fsr2l	equ	0xFD9
 12610                           status	equ	0xFD8
 12611                           
 12612 ;; *************** function ___ftge *****************
 12613 ;; Defined at:
 12614 ;;		line 4 in file "/Applications/microchip/xc8/v1.40/sources/common/ftge.c"
 12615 ;; Parameters:    Size  Location     Type
 12616 ;;  ff1             3    0[COMRAM] float 
 12617 ;;  ff2             3    3[COMRAM] float 
 12618 ;; Auto vars:     Size  Location     Type
 12619 ;;		None
 12620 ;; Return value:  Size  Location     Type
 12621 ;;		None               void
 12622 ;; Registers used:
 12623 ;;		wreg, status,2, status,0
 12624 ;; Tracked objects:
 12625 ;;		On entry : 0/0
 12626 ;;		On exit  : 0/0
 12627 ;;		Unchanged: 0/0
 12628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12629 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12630 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12631 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12632 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12633 ;;Total ram usage:        9 bytes
 12634 ;; Hardware stack levels used:    1
 12635 ;; This function calls:
 12636 ;;		Nothing
 12637 ;; This function is called by:
 12638 ;;		_pow
 12639 ;;		_exp
 12640 ;;		_floor
 12641 ;; This function uses a non-reentrant model
 12642 ;;
 12643                           
 12644                           	psect	text54
 12645  002BD8                     __ptext54:
 12646                           	opt stack 0
 12647  002BD8                     ___ftge:
 12648                           	opt stack 21
 12649                           
 12650                           ;incstack = 0
 12651  002BD8  AE03               	btfss	___ftge@ff1+2,7,c
 12652  002BDA  D016               	goto	i2l3647
 12653  002BDC  C001  F007         	movff	___ftge@ff1,??___ftge
 12654  002BE0  C002  F008         	movff	___ftge@ff1+1,??___ftge+1
 12655  002BE4  C003  F009         	movff	___ftge@ff1+2,??___ftge+2
 12656  002BE8  1E07               	comf	??___ftge,f,c
 12657  002BEA  1E08               	comf	??___ftge+1,f,c
 12658  002BEC  1E09               	comf	??___ftge+2,f,c
 12659  002BEE  2A07               	incf	??___ftge,f,c
 12660  002BF0  0E00               	movlw	0
 12661  002BF2  2208               	addwfc	??___ftge+1,f,c
 12662  002BF4  2209               	addwfc	??___ftge+2,f,c
 12663  002BF6  0E00               	movlw	0
 12664  002BF8  2407               	addwf	??___ftge,w,c
 12665  002BFA  6E01               	movwf	___ftge@ff1,c
 12666  002BFC  0E00               	movlw	0
 12667  002BFE  2008               	addwfc	??___ftge+1,w,c
 12668  002C00  6E02               	movwf	___ftge@ff1+1,c
 12669  002C02  0E80               	movlw	128
 12670  002C04  2009               	addwfc	??___ftge+2,w,c
 12671  002C06  6E03               	movwf	___ftge@ff1+2,c
 12672  002C08                     i2l3647:
 12673  002C08  AE06               	btfss	___ftge@ff2+2,7,c
 12674  002C0A  D016               	goto	i2l3651
 12675  002C0C  C004  F007         	movff	___ftge@ff2,??___ftge
 12676  002C10  C005  F008         	movff	___ftge@ff2+1,??___ftge+1
 12677  002C14  C006  F009         	movff	___ftge@ff2+2,??___ftge+2
 12678  002C18  1E07               	comf	??___ftge,f,c
 12679  002C1A  1E08               	comf	??___ftge+1,f,c
 12680  002C1C  1E09               	comf	??___ftge+2,f,c
 12681  002C1E  2A07               	incf	??___ftge,f,c
 12682  002C20  0E00               	movlw	0
 12683  002C22  2208               	addwfc	??___ftge+1,f,c
 12684  002C24  2209               	addwfc	??___ftge+2,f,c
 12685  002C26  0E00               	movlw	0
 12686  002C28  2407               	addwf	??___ftge,w,c
 12687  002C2A  6E04               	movwf	___ftge@ff2,c
 12688  002C2C  0E00               	movlw	0
 12689  002C2E  2008               	addwfc	??___ftge+1,w,c
 12690  002C30  6E05               	movwf	___ftge@ff2+1,c
 12691  002C32  0E80               	movlw	128
 12692  002C34  2009               	addwfc	??___ftge+2,w,c
 12693  002C36  6E06               	movwf	___ftge@ff2+2,c
 12694  002C38                     i2l3651:
 12695  002C38  0E00               	movlw	0
 12696  002C3A  1A01               	xorwf	___ftge@ff1,f,c
 12697  002C3C  0E00               	movlw	0
 12698  002C3E  1A02               	xorwf	___ftge@ff1+1,f,c
 12699  002C40  0E80               	movlw	128
 12700  002C42  1A03               	xorwf	___ftge@ff1+2,f,c
 12701  002C44  0E00               	movlw	0
 12702  002C46  1A04               	xorwf	___ftge@ff2,f,c
 12703  002C48  0E00               	movlw	0
 12704  002C4A  1A05               	xorwf	___ftge@ff2+1,f,c
 12705  002C4C  0E80               	movlw	128
 12706  002C4E  1A06               	xorwf	___ftge@ff2+2,f,c
 12707  002C50  5004               	movf	___ftge@ff2,w,c
 12708  002C52  5C01               	subwf	___ftge@ff1,w,c
 12709  002C54  5005               	movf	___ftge@ff2+1,w,c
 12710  002C56  5802               	subwfb	___ftge@ff1+1,w,c
 12711  002C58  5006               	movf	___ftge@ff2+2,w,c
 12712  002C5A  5803               	subwfb	___ftge@ff1+2,w,c
 12713  002C5C  B0D8               	btfsc	status,0,c
 12714  002C5E  D002               	goto	i2l3657
 12715  002C60  90D8               	bcf	status,0,c
 12716  002C62  0012               	return	
 12717  002C64                     i2l3657:
 12718  002C64  80D8               	bsf	status,0,c
 12719  002C66  0012               	return	
 12720  002C68                     __end_of___ftge:
 12721                           	opt stack 0
 12722                           pclatu	equ	0xFFB
 12723                           pclath	equ	0xFFA
 12724                           tblptru	equ	0xFF8
 12725                           tblptrh	equ	0xFF7
 12726                           tblptrl	equ	0xFF6
 12727                           tablat	equ	0xFF5
 12728                           prodh	equ	0xFF4
 12729                           prodl	equ	0xFF3
 12730                           intcon	equ	0xFF2
 12731                           intcon2	equ	0xFF1
 12732                           intcon3	equ	0xFF0
 12733                           postinc0	equ	0xFEE
 12734                           fsr0h	equ	0xFEA
 12735                           fsr0l	equ	0xFE9
 12736                           wreg	equ	0xFE8
 12737                           postdec1	equ	0xFE5
 12738                           fsr1h	equ	0xFE2
 12739                           fsr1l	equ	0xFE1
 12740                           indf2	equ	0xFDF
 12741                           postinc2	equ	0xFDE
 12742                           postdec2	equ	0xFDD
 12743                           fsr2h	equ	0xFDA
 12744                           fsr2l	equ	0xFD9
 12745                           status	equ	0xFD8
 12746                           
 12747 ;; *************** function ___altoft *****************
 12748 ;; Defined at:
 12749 ;;		line 42 in file "/Applications/microchip/xc8/v1.40/sources/common/altoft.c"
 12750 ;; Parameters:    Size  Location     Type
 12751 ;;  c               4   54[COMRAM] long 
 12752 ;; Auto vars:     Size  Location     Type
 12753 ;;  sign            1   63[COMRAM] unsigned char 
 12754 ;;  exp             1   62[COMRAM] unsigned char 
 12755 ;; Return value:  Size  Location     Type
 12756 ;;                  3   54[COMRAM] float 
 12757 ;; Registers used:
 12758 ;;		wreg, status,2, status,0, cstack
 12759 ;; Tracked objects:
 12760 ;;		On entry : 0/0
 12761 ;;		On exit  : 0/0
 12762 ;;		Unchanged: 0/0
 12763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12764 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12765 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12766 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12767 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12768 ;;Total ram usage:       10 bytes
 12769 ;; Hardware stack levels used:    1
 12770 ;; Hardware stack levels required when called:    1
 12771 ;; This function calls:
 12772 ;;		___ftpack
 12773 ;; This function is called by:
 12774 ;;		_floor
 12775 ;; This function uses a non-reentrant model
 12776 ;;
 12777                           
 12778                           	psect	text55
 12779  002D64                     __ptext55:
 12780                           	opt stack 0
 12781  002D64                     ___altoft:
 12782                           	opt stack 20
 12783                           
 12784                           ;incstack = 0
 12785  002D64  0E00               	movlw	0
 12786  002D66  6E40               	movwf	___altoft@sign,c
 12787  002D68  0E8E               	movlw	142
 12788  002D6A  6E3F               	movwf	___altoft@exp,c
 12789  002D6C  AE3A               	btfss	___altoft@c+3,7,c
 12790  002D6E  D011               	goto	i2l3519
 12791  002D70  1E3A               	comf	___altoft@c+3,f,c
 12792  002D72  1E39               	comf	___altoft@c+2,f,c
 12793  002D74  1E38               	comf	___altoft@c+1,f,c
 12794  002D76  6C37               	negf	___altoft@c,c
 12795  002D78  0E00               	movlw	0
 12796  002D7A  2238               	addwfc	___altoft@c+1,f,c
 12797  002D7C  2239               	addwfc	___altoft@c+2,f,c
 12798  002D7E  223A               	addwfc	___altoft@c+3,f,c
 12799  002D80  0E01               	movlw	1
 12800  002D82  6E40               	movwf	___altoft@sign,c
 12801  002D84  D006               	goto	i2l3519
 12802  002D86                     i2l3517:
 12803  002D86  90D8               	bcf	status,0,c
 12804  002D88  323A               	rrcf	___altoft@c+3,f,c
 12805  002D8A  3239               	rrcf	___altoft@c+2,f,c
 12806  002D8C  3238               	rrcf	___altoft@c+1,f,c
 12807  002D8E  3237               	rrcf	___altoft@c,f,c
 12808  002D90  2A3F               	incf	___altoft@exp,f,c
 12809  002D92                     i2l3519:
 12810  002D92  0E00               	movlw	0
 12811  002D94  1437               	andwf	___altoft@c,w,c
 12812  002D96  6E3B               	movwf	??___altoft& (0+255),c
 12813  002D98  0E00               	movlw	0
 12814  002D9A  1438               	andwf	___altoft@c+1,w,c
 12815  002D9C  6E3C               	movwf	(??___altoft+1)& (0+255),c
 12816  002D9E  0E00               	movlw	0
 12817  002DA0  1439               	andwf	___altoft@c+2,w,c
 12818  002DA2  6E3D               	movwf	(??___altoft+2)& (0+255),c
 12819  002DA4  0EFF               	movlw	255
 12820  002DA6  143A               	andwf	___altoft@c+3,w,c
 12821  002DA8  6E3E               	movwf	(??___altoft+3)& (0+255),c
 12822  002DAA  503B               	movf	??___altoft,w,c
 12823  002DAC  103C               	iorwf	??___altoft+1,w,c
 12824  002DAE  103D               	iorwf	??___altoft+2,w,c
 12825  002DB0  103E               	iorwf	??___altoft+3,w,c
 12826  002DB2  A4D8               	btfss	status,2,c
 12827  002DB4  D7E8               	goto	i2l3517
 12828  002DB6  C037  F001         	movff	___altoft@c,___ftpack@arg
 12829  002DBA  C038  F002         	movff	___altoft@c+1,___ftpack@arg+1
 12830  002DBE  C039  F003         	movff	___altoft@c+2,___ftpack@arg+2
 12831  002DC2  C03F  F004         	movff	___altoft@exp,___ftpack@exp
 12832  002DC6  C040  F005         	movff	___altoft@sign,___ftpack@sign
 12833  002DCA  ECB4  F014         	call	___ftpack	;wreg free
 12834  002DCE  C001  F037         	movff	?___ftpack,?___altoft
 12835  002DD2  C002  F038         	movff	?___ftpack+1,?___altoft+1
 12836  002DD6  C003  F039         	movff	?___ftpack+2,?___altoft+2
 12837  002DDA  0012               	return	
 12838  002DDC                     __end_of___altoft:
 12839                           	opt stack 0
 12840                           pclatu	equ	0xFFB
 12841                           pclath	equ	0xFFA
 12842                           tblptru	equ	0xFF8
 12843                           tblptrh	equ	0xFF7
 12844                           tblptrl	equ	0xFF6
 12845                           tablat	equ	0xFF5
 12846                           prodh	equ	0xFF4
 12847                           prodl	equ	0xFF3
 12848                           intcon	equ	0xFF2
 12849                           intcon2	equ	0xFF1
 12850                           intcon3	equ	0xFF0
 12851                           postinc0	equ	0xFEE
 12852                           fsr0h	equ	0xFEA
 12853                           fsr0l	equ	0xFE9
 12854                           wreg	equ	0xFE8
 12855                           postdec1	equ	0xFE5
 12856                           fsr1h	equ	0xFE2
 12857                           fsr1l	equ	0xFE1
 12858                           indf2	equ	0xFDF
 12859                           postinc2	equ	0xFDE
 12860                           postdec2	equ	0xFDD
 12861                           fsr2h	equ	0xFDA
 12862                           fsr2l	equ	0xFD9
 12863                           status	equ	0xFD8
 12864                           
 12865 ;; *************** function _eval_poly *****************
 12866 ;; Defined at:
 12867 ;;		line 4 in file "/Applications/microchip/xc8/v1.40/sources/common/evalpoly.c"
 12868 ;; Parameters:    Size  Location     Type
 12869 ;;  x               3   39[COMRAM] float 
 12870 ;;  d               2   42[COMRAM] PTR const 
 12871 ;;		 -> log@coeff(27), exp@coeff(30), 
 12872 ;;  n               2   44[COMRAM] int 
 12873 ;; Auto vars:     Size  Location     Type
 12874 ;;  res             3   48[COMRAM] int 
 12875 ;; Return value:  Size  Location     Type
 12876 ;;                  3   39[COMRAM] int 
 12877 ;; Registers used:
 12878 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12879 ;; Tracked objects:
 12880 ;;		On entry : 0/0
 12881 ;;		On exit  : 0/0
 12882 ;;		Unchanged: 0/0
 12883 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12884 ;;      Params:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12885 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12886 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12887 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12888 ;;Total ram usage:       12 bytes
 12889 ;; Hardware stack levels used:    1
 12890 ;; Hardware stack levels required when called:    2
 12891 ;; This function calls:
 12892 ;;		___ftadd
 12893 ;;		___ftmul
 12894 ;;		i2___wmul
 12895 ;; This function is called by:
 12896 ;;		_exp
 12897 ;;		_log
 12898 ;; This function uses a non-reentrant model
 12899 ;;
 12900                           
 12901                           	psect	text56
 12902  0025AC                     __ptext56:
 12903                           	opt stack 0
 12904  0025AC                     _eval_poly:
 12905                           	opt stack 20
 12906                           
 12907                           ;incstack = 0
 12908  0025AC  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 12909  0025B0  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 12910  0025B4  0E00               	movlw	0
 12911  0025B6  6E04               	movwf	i2___wmul@multiplicand+1,c
 12912  0025B8  0E03               	movlw	3
 12913  0025BA  6E03               	movwf	i2___wmul@multiplicand,c
 12914  0025BC  ECC0  F019         	call	i2___wmul	;wreg free
 12915  0025C0  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 12916  0025C4  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 12917  0025C8  5001               	movf	?i2___wmul,w,c
 12918  0025CA  262F               	addwf	??_eval_poly,f,c
 12919  0025CC  5002               	movf	?i2___wmul+1,w,c
 12920  0025CE  2230               	addwfc	??_eval_poly+1,f,c
 12921  0025D0  C02F  FFF6         	movff	??_eval_poly,tblptrl
 12922  0025D4  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 12923  0025D8                     	if	0	;tblptru may be non-zero
 12924  0025D8                     	endif
 12925  0025D8                     	if	0	;tblptru may be non-zero
 12926  0025D8                     	endif
 12927  0025D8  0009               	tblrd		*+
 12928  0025DA  CFF5 F031          	movff	tablat,eval_poly@res
 12929  0025DE  0009               	tblrd		*+
 12930  0025E0  CFF5 F032          	movff	tablat,eval_poly@res+1
 12931  0025E4  000A               	tblrd		*-
 12932  0025E6  CFF5 F033          	movff	tablat,eval_poly@res+2
 12933  0025EA  D03E               	goto	i2l3853
 12934  0025EC                     i2l3851:
 12935  0025EC  C031  F010         	movff	eval_poly@res,___ftmul@f2
 12936  0025F0  C032  F011         	movff	eval_poly@res+1,___ftmul@f2+1
 12937  0025F4  C033  F012         	movff	eval_poly@res+2,___ftmul@f2+2
 12938  0025F8  C028  F00D         	movff	eval_poly@x,___ftmul@f1
 12939  0025FC  C029  F00E         	movff	eval_poly@x+1,___ftmul@f1+1
 12940  002600  C02A  F00F         	movff	eval_poly@x+2,___ftmul@f1+2
 12941  002604  EC07  F011         	call	___ftmul	;wreg free
 12942  002608  C00D  F01C         	movff	?___ftmul,___ftadd@f1
 12943  00260C  C00E  F01D         	movff	?___ftmul+1,___ftadd@f1+1
 12944  002610  C00F  F01E         	movff	?___ftmul+2,___ftadd@f1+2
 12945  002614  0E00               	movlw	0
 12946  002616  6E04               	movwf	i2___wmul@multiplicand+1,c
 12947  002618  0E03               	movlw	3
 12948  00261A  6E03               	movwf	i2___wmul@multiplicand,c
 12949  00261C  062D               	decf	eval_poly@n,f,c
 12950  00261E  A0D8               	btfss	status,0,c
 12951  002620  062E               	decf	eval_poly@n+1,f,c
 12952  002622  C02D  F001         	movff	eval_poly@n,i2___wmul@multiplier
 12953  002626  C02E  F002         	movff	eval_poly@n+1,i2___wmul@multiplier+1
 12954  00262A  ECC0  F019         	call	i2___wmul	;wreg free
 12955  00262E  C02B  F02F         	movff	eval_poly@d,??_eval_poly
 12956  002632  C02C  F030         	movff	eval_poly@d+1,??_eval_poly+1
 12957  002636  5001               	movf	?i2___wmul,w,c
 12958  002638  262F               	addwf	??_eval_poly,f,c
 12959  00263A  5002               	movf	?i2___wmul+1,w,c
 12960  00263C  2230               	addwfc	??_eval_poly+1,f,c
 12961  00263E  C02F  FFF6         	movff	??_eval_poly,tblptrl
 12962  002642  C030  FFF7         	movff	??_eval_poly+1,tblptrh
 12963  002646                     	if	0	;tblptru may be non-zero
 12964  002646                     	endif
 12965  002646                     	if	0	;tblptru may be non-zero
 12966  002646                     	endif
 12967  002646  0009               	tblrd		*+
 12968  002648  CFF5 F01F          	movff	tablat,___ftadd@f2
 12969  00264C  0009               	tblrd		*+
 12970  00264E  CFF5 F020          	movff	tablat,___ftadd@f2+1
 12971  002652  000A               	tblrd		*-
 12972  002654  CFF5 F021          	movff	tablat,___ftadd@f2+2
 12973  002658  ECEF  F00C         	call	___ftadd	;wreg free
 12974  00265C  C01C  F031         	movff	?___ftadd,eval_poly@res
 12975  002660  C01D  F032         	movff	?___ftadd+1,eval_poly@res+1
 12976  002664  C01E  F033         	movff	?___ftadd+2,eval_poly@res+2
 12977  002668                     i2l3853:
 12978  002668  502D               	movf	eval_poly@n,w,c
 12979  00266A  102E               	iorwf	eval_poly@n+1,w,c
 12980  00266C  A4D8               	btfss	status,2,c
 12981  00266E  D7BE               	goto	i2l3851
 12982  002670  C031  F028         	movff	eval_poly@res,?_eval_poly
 12983  002674  C032  F029         	movff	eval_poly@res+1,?_eval_poly+1
 12984  002678  C033  F02A         	movff	eval_poly@res+2,?_eval_poly+2
 12985  00267C  0012               	return		;funcret
 12986  00267E                     __end_of_eval_poly:
 12987                           	opt stack 0
 12988                           pclatu	equ	0xFFB
 12989                           pclath	equ	0xFFA
 12990                           tblptru	equ	0xFF8
 12991                           tblptrh	equ	0xFF7
 12992                           tblptrl	equ	0xFF6
 12993                           tablat	equ	0xFF5
 12994                           prodh	equ	0xFF4
 12995                           prodl	equ	0xFF3
 12996                           intcon	equ	0xFF2
 12997                           intcon2	equ	0xFF1
 12998                           intcon3	equ	0xFF0
 12999                           postinc0	equ	0xFEE
 13000                           fsr0h	equ	0xFEA
 13001                           fsr0l	equ	0xFE9
 13002                           wreg	equ	0xFE8
 13003                           postdec1	equ	0xFE5
 13004                           fsr1h	equ	0xFE2
 13005                           fsr1l	equ	0xFE1
 13006                           indf2	equ	0xFDF
 13007                           postinc2	equ	0xFDE
 13008                           postdec2	equ	0xFDD
 13009                           fsr2h	equ	0xFDA
 13010                           fsr2l	equ	0xFD9
 13011                           status	equ	0xFD8
 13012                           
 13013 ;; *************** function i2___wmul *****************
 13014 ;; Defined at:
 13015 ;;		line 15 in file "/Applications/microchip/xc8/v1.40/sources/common/Umul16.c"
 13016 ;; Parameters:    Size  Location     Type
 13017 ;;  multiplier      2    0[COMRAM] unsigned int 
 13018 ;;  multiplicand    2    2[COMRAM] unsigned int 
 13019 ;; Auto vars:     Size  Location     Type
 13020 ;;  __wmul          2    4[COMRAM] unsigned int 
 13021 ;; Return value:  Size  Location     Type
 13022 ;;                  2    0[COMRAM] unsigned int 
 13023 ;; Registers used:
 13024 ;;		wreg, status,2, status,0, prodl, prodh
 13025 ;; Tracked objects:
 13026 ;;		On entry : 0/0
 13027 ;;		On exit  : 0/0
 13028 ;;		Unchanged: 0/0
 13029 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13030 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13031 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13032 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13033 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13034 ;;Total ram usage:        6 bytes
 13035 ;; Hardware stack levels used:    1
 13036 ;; This function calls:
 13037 ;;		Nothing
 13038 ;; This function is called by:
 13039 ;;		_isr
 13040 ;;		_servo_rotate1
 13041 ;;		_servo_rotate2
 13042 ;;		_eval_poly
 13043 ;;		i2_printf
 13044 ;; This function uses a non-reentrant model
 13045 ;;
 13046                           
 13047                           	psect	text57
 13048  003380                     __ptext57:
 13049                           	opt stack 0
 13050  003380                     i2___wmul:
 13051                           	opt stack 24
 13052                           
 13053                           ;incstack = 0
 13054  003380  5001               	movf	i2___wmul@multiplier,w,c
 13055  003382  0203               	mulwf	i2___wmul@multiplicand,c
 13056  003384  CFF3 F005          	movff	prodl,i2___wmul@product
 13057  003388  CFF4 F006          	movff	prodh,i2___wmul@product+1
 13058  00338C  5001               	movf	i2___wmul@multiplier,w,c
 13059  00338E  0204               	mulwf	i2___wmul@multiplicand+1,c
 13060  003390  50F3               	movf	prodl,w,c
 13061  003392  2606               	addwf	i2___wmul@product+1,f,c
 13062  003394  5002               	movf	i2___wmul@multiplier+1,w,c
 13063  003396  0203               	mulwf	i2___wmul@multiplicand,c
 13064  003398  50F3               	movf	prodl,w,c
 13065  00339A  2606               	addwf	i2___wmul@product+1,f,c
 13066  00339C  C005  F001         	movff	i2___wmul@product,?i2___wmul
 13067  0033A0  C006  F002         	movff	i2___wmul@product+1,?i2___wmul+1
 13068  0033A4  0012               	return	
 13069  0033A6                     __end_ofi2___wmul:
 13070                           	opt stack 0
 13071                           pclatu	equ	0xFFB
 13072                           pclath	equ	0xFFA
 13073                           tblptru	equ	0xFF8
 13074                           tblptrh	equ	0xFF7
 13075                           tblptrl	equ	0xFF6
 13076                           tablat	equ	0xFF5
 13077                           prodh	equ	0xFF4
 13078                           prodl	equ	0xFF3
 13079                           intcon	equ	0xFF2
 13080                           intcon2	equ	0xFF1
 13081                           intcon3	equ	0xFF0
 13082                           postinc0	equ	0xFEE
 13083                           fsr0h	equ	0xFEA
 13084                           fsr0l	equ	0xFE9
 13085                           wreg	equ	0xFE8
 13086                           postdec1	equ	0xFE5
 13087                           fsr1h	equ	0xFE2
 13088                           fsr1l	equ	0xFE1
 13089                           indf2	equ	0xFDF
 13090                           postinc2	equ	0xFDE
 13091                           postdec2	equ	0xFDD
 13092                           fsr2h	equ	0xFDA
 13093                           fsr2l	equ	0xFD9
 13094                           status	equ	0xFD8
 13095                           
 13096 ;; *************** function ___ftmul *****************
 13097 ;; Defined at:
 13098 ;;		line 62 in file "/Applications/microchip/xc8/v1.40/sources/common/ftmul.c"
 13099 ;; Parameters:    Size  Location     Type
 13100 ;;  f1              3   12[COMRAM] float 
 13101 ;;  f2              3   15[COMRAM] float 
 13102 ;; Auto vars:     Size  Location     Type
 13103 ;;  f3_as_produc    3   22[COMRAM] unsigned um
 13104 ;;  sign            1   26[COMRAM] unsigned char 
 13105 ;;  cntr            1   25[COMRAM] unsigned char 
 13106 ;;  exp             1   21[COMRAM] unsigned char 
 13107 ;; Return value:  Size  Location     Type
 13108 ;;                  3   12[COMRAM] float 
 13109 ;; Registers used:
 13110 ;;		wreg, status,2, status,0, cstack
 13111 ;; Tracked objects:
 13112 ;;		On entry : 0/0
 13113 ;;		On exit  : 0/0
 13114 ;;		Unchanged: 0/0
 13115 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13116 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13117 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13118 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13119 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13120 ;;Total ram usage:       15 bytes
 13121 ;; Hardware stack levels used:    1
 13122 ;; Hardware stack levels required when called:    1
 13123 ;; This function calls:
 13124 ;;		___ftpack
 13125 ;; This function is called by:
 13126 ;;		_dec_to_hex
 13127 ;;		_pow
 13128 ;;		_exp
 13129 ;;		_log
 13130 ;;		_eval_poly
 13131 ;; This function uses a non-reentrant model
 13132 ;;
 13133                           
 13134                           	psect	text58
 13135  00220E                     __ptext58:
 13136                           	opt stack 0
 13137  00220E                     ___ftmul:
 13138                           	opt stack 20
 13139                           
 13140                           ;incstack = 0
 13141  00220E  C00F  F013         	movff	___ftmul@f1+2,??___ftmul
 13142  002212  6A14               	clrf	(??___ftmul+1)& (0+255),c
 13143  002214  6A15               	clrf	(??___ftmul+2)& (0+255),c
 13144  002216  340E               	rlcf	___ftmul@f1+1,w,c
 13145  002218  3613               	rlcf	??___ftmul& (0+255),f,c
 13146  00221A  E301               	bnc	u312_41
 13147  00221C  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 13148  00221E                     u312_41:
 13149  00221E  5013               	movf	??___ftmul,w,c
 13150  002220  6E16               	movwf	___ftmul@exp,c
 13151  002222  5016               	movf	___ftmul@exp,w,c
 13152  002224  A4D8               	btfss	status,2,c
 13153  002226  D007               	goto	i2l3601
 13154  002228  0E00               	movlw	0
 13155  00222A  6E0D               	movwf	?___ftmul,c
 13156  00222C  0E00               	movlw	0
 13157  00222E  6E0E               	movwf	?___ftmul+1,c
 13158  002230  0E00               	movlw	0
 13159  002232  6E0F               	movwf	?___ftmul+2,c
 13160  002234  0012               	return	
 13161  002236                     i2l3601:
 13162  002236  C012  F013         	movff	___ftmul@f2+2,??___ftmul
 13163  00223A  6A14               	clrf	(??___ftmul+1)& (0+255),c
 13164  00223C  6A15               	clrf	(??___ftmul+2)& (0+255),c
 13165  00223E  3411               	rlcf	___ftmul@f2+1,w,c
 13166  002240  3613               	rlcf	??___ftmul& (0+255),f,c
 13167  002242  E301               	bnc	u314_41
 13168  002244  8014               	bsf	(??___ftmul+1)& (0+255),0,c
 13169  002246                     u314_41:
 13170  002246  5013               	movf	??___ftmul,w,c
 13171  002248  6E1B               	movwf	___ftmul@sign,c
 13172  00224A  501B               	movf	___ftmul@sign,w,c
 13173  00224C  A4D8               	btfss	status,2,c
 13174  00224E  D007               	goto	i2l3607
 13175  002250  0E00               	movlw	0
 13176  002252  6E0D               	movwf	?___ftmul,c
 13177  002254  0E00               	movlw	0
 13178  002256  6E0E               	movwf	?___ftmul+1,c
 13179  002258  0E00               	movlw	0
 13180  00225A  6E0F               	movwf	?___ftmul+2,c
 13181  00225C  0012               	return	
 13182  00225E                     i2l3607:
 13183  00225E  501B               	movf	___ftmul@sign,w,c
 13184  002260  0F7B               	addlw	123
 13185  002262  2616               	addwf	___ftmul@exp,f,c
 13186  002264  C00F  F01B         	movff	___ftmul@f1+2,___ftmul@sign
 13187  002268  5012               	movf	___ftmul@f2+2,w,c
 13188  00226A  1A1B               	xorwf	___ftmul@sign,f,c
 13189  00226C  0E80               	movlw	128
 13190  00226E  161B               	andwf	___ftmul@sign,f,c
 13191  002270  8E0E               	bsf	___ftmul@f1+1,7,c
 13192  002272  8E11               	bsf	___ftmul@f2+1,7,c
 13193  002274  0EFF               	movlw	255
 13194  002276  1610               	andwf	___ftmul@f2,f,c
 13195  002278  0EFF               	movlw	255
 13196  00227A  1611               	andwf	___ftmul@f2+1,f,c
 13197  00227C  0E00               	movlw	0
 13198  00227E  1612               	andwf	___ftmul@f2+2,f,c
 13199  002280  0E00               	movlw	0
 13200  002282  6E17               	movwf	___ftmul@f3_as_product,c
 13201  002284  0E00               	movlw	0
 13202  002286  6E18               	movwf	___ftmul@f3_as_product+1,c
 13203  002288  0E00               	movlw	0
 13204  00228A  6E19               	movwf	___ftmul@f3_as_product+2,c
 13205  00228C  0E07               	movlw	7
 13206  00228E  6E1A               	movwf	___ftmul@cntr,c
 13207  002290                     i2l3621:
 13208  002290  A00D               	btfss	___ftmul@f1,0,c
 13209  002292  D006               	goto	i2l3625
 13210  002294  5010               	movf	___ftmul@f2,w,c
 13211  002296  2617               	addwf	___ftmul@f3_as_product,f,c
 13212  002298  5011               	movf	___ftmul@f2+1,w,c
 13213  00229A  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 13214  00229C  5012               	movf	___ftmul@f2+2,w,c
 13215  00229E  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 13216  0022A0                     i2l3625:
 13217  0022A0  90D8               	bcf	status,0,c
 13218  0022A2  320F               	rrcf	___ftmul@f1+2,f,c
 13219  0022A4  320E               	rrcf	___ftmul@f1+1,f,c
 13220  0022A6  320D               	rrcf	___ftmul@f1,f,c
 13221  0022A8  90D8               	bcf	status,0,c
 13222  0022AA  3610               	rlcf	___ftmul@f2,f,c
 13223  0022AC  3611               	rlcf	___ftmul@f2+1,f,c
 13224  0022AE  3612               	rlcf	___ftmul@f2+2,f,c
 13225  0022B0  2E1A               	decfsz	___ftmul@cntr,f,c
 13226  0022B2  D7EE               	goto	i2l3621
 13227  0022B4  0E09               	movlw	9
 13228  0022B6  6E1A               	movwf	___ftmul@cntr,c
 13229  0022B8                     i2l3631:
 13230  0022B8  A00D               	btfss	___ftmul@f1,0,c
 13231  0022BA  D006               	goto	i2l3635
 13232  0022BC  5010               	movf	___ftmul@f2,w,c
 13233  0022BE  2617               	addwf	___ftmul@f3_as_product,f,c
 13234  0022C0  5011               	movf	___ftmul@f2+1,w,c
 13235  0022C2  2218               	addwfc	___ftmul@f3_as_product+1,f,c
 13236  0022C4  5012               	movf	___ftmul@f2+2,w,c
 13237  0022C6  2219               	addwfc	___ftmul@f3_as_product+2,f,c
 13238  0022C8                     i2l3635:
 13239  0022C8  90D8               	bcf	status,0,c
 13240  0022CA  320F               	rrcf	___ftmul@f1+2,f,c
 13241  0022CC  320E               	rrcf	___ftmul@f1+1,f,c
 13242  0022CE  320D               	rrcf	___ftmul@f1,f,c
 13243  0022D0  90D8               	bcf	status,0,c
 13244  0022D2  3219               	rrcf	___ftmul@f3_as_product+2,f,c
 13245  0022D4  3218               	rrcf	___ftmul@f3_as_product+1,f,c
 13246  0022D6  3217               	rrcf	___ftmul@f3_as_product,f,c
 13247  0022D8  2E1A               	decfsz	___ftmul@cntr,f,c
 13248  0022DA  D7EE               	goto	i2l3631
 13249  0022DC  C017  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
 13250  0022E0  C018  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
 13251  0022E4  C019  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
 13252  0022E8  C016  F004         	movff	___ftmul@exp,___ftpack@exp
 13253  0022EC  C01B  F005         	movff	___ftmul@sign,___ftpack@sign
 13254  0022F0  ECB4  F014         	call	___ftpack	;wreg free
 13255  0022F4  C001  F00D         	movff	?___ftpack,?___ftmul
 13256  0022F8  C002  F00E         	movff	?___ftpack+1,?___ftmul+1
 13257  0022FC  C003  F00F         	movff	?___ftpack+2,?___ftmul+2
 13258  002300  0012               	return	
 13259  002302                     __end_of___ftmul:
 13260                           	opt stack 0
 13261                           pclatu	equ	0xFFB
 13262                           pclath	equ	0xFFA
 13263                           tblptru	equ	0xFF8
 13264                           tblptrh	equ	0xFF7
 13265                           tblptrl	equ	0xFF6
 13266                           tablat	equ	0xFF5
 13267                           prodh	equ	0xFF4
 13268                           prodl	equ	0xFF3
 13269                           intcon	equ	0xFF2
 13270                           intcon2	equ	0xFF1
 13271                           intcon3	equ	0xFF0
 13272                           postinc0	equ	0xFEE
 13273                           fsr0h	equ	0xFEA
 13274                           fsr0l	equ	0xFE9
 13275                           wreg	equ	0xFE8
 13276                           postdec1	equ	0xFE5
 13277                           fsr1h	equ	0xFE2
 13278                           fsr1l	equ	0xFE1
 13279                           indf2	equ	0xFDF
 13280                           postinc2	equ	0xFDE
 13281                           postdec2	equ	0xFDD
 13282                           fsr2h	equ	0xFDA
 13283                           fsr2l	equ	0xFD9
 13284                           status	equ	0xFD8
 13285                           
 13286 ;; *************** function ___ftsub *****************
 13287 ;; Defined at:
 13288 ;;		line 20 in file "/Applications/microchip/xc8/v1.40/sources/common/ftsub.c"
 13289 ;; Parameters:    Size  Location     Type
 13290 ;;  f1              3   39[COMRAM] float 
 13291 ;;  f2              3   42[COMRAM] float 
 13292 ;; Auto vars:     Size  Location     Type
 13293 ;;		None
 13294 ;; Return value:  Size  Location     Type
 13295 ;;                  3   39[COMRAM] float 
 13296 ;; Registers used:
 13297 ;;		wreg, status,2, status,0, cstack
 13298 ;; Tracked objects:
 13299 ;;		On entry : 0/0
 13300 ;;		On exit  : 0/0
 13301 ;;		Unchanged: 0/0
 13302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13303 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13306 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13307 ;;Total ram usage:        6 bytes
 13308 ;; Hardware stack levels used:    1
 13309 ;; Hardware stack levels required when called:    2
 13310 ;; This function calls:
 13311 ;;		___ftadd
 13312 ;; This function is called by:
 13313 ;;		_exp
 13314 ;; This function uses a non-reentrant model
 13315 ;;
 13316                           
 13317                           	psect	text59
 13318  00321E                     __ptext59:
 13319                           	opt stack 0
 13320  00321E                     ___ftsub:
 13321                           	opt stack 20
 13322                           
 13323                           ;incstack = 0
 13324  00321E  502B               	movf	___ftsub@f2,w,c
 13325  003220  102C               	iorwf	___ftsub@f2+1,w,c
 13326  003222  102D               	iorwf	___ftsub@f2+2,w,c
 13327  003224  B4D8               	btfsc	status,2,c
 13328  003226  D006               	goto	i2l3805
 13329  003228  0E00               	movlw	0
 13330  00322A  1A2B               	xorwf	___ftsub@f2,f,c
 13331  00322C  0E00               	movlw	0
 13332  00322E  1A2C               	xorwf	___ftsub@f2+1,f,c
 13333  003230  0E80               	movlw	128
 13334  003232  1A2D               	xorwf	___ftsub@f2+2,f,c
 13335  003234                     i2l3805:
 13336  003234  C028  F01C         	movff	___ftsub@f1,___ftadd@f1
 13337  003238  C029  F01D         	movff	___ftsub@f1+1,___ftadd@f1+1
 13338  00323C  C02A  F01E         	movff	___ftsub@f1+2,___ftadd@f1+2
 13339  003240  C02B  F01F         	movff	___ftsub@f2,___ftadd@f2
 13340  003244  C02C  F020         	movff	___ftsub@f2+1,___ftadd@f2+1
 13341  003248  C02D  F021         	movff	___ftsub@f2+2,___ftadd@f2+2
 13342  00324C  ECEF  F00C         	call	___ftadd	;wreg free
 13343  003250  C01C  F028         	movff	?___ftadd,?___ftsub
 13344  003254  C01D  F029         	movff	?___ftadd+1,?___ftsub+1
 13345  003258  C01E  F02A         	movff	?___ftadd+2,?___ftsub+2
 13346  00325C  0012               	return	
 13347  00325E                     __end_of___ftsub:
 13348                           	opt stack 0
 13349                           pclatu	equ	0xFFB
 13350                           pclath	equ	0xFFA
 13351                           tblptru	equ	0xFF8
 13352                           tblptrh	equ	0xFF7
 13353                           tblptrl	equ	0xFF6
 13354                           tablat	equ	0xFF5
 13355                           prodh	equ	0xFF4
 13356                           prodl	equ	0xFF3
 13357                           intcon	equ	0xFF2
 13358                           intcon2	equ	0xFF1
 13359                           intcon3	equ	0xFF0
 13360                           postinc0	equ	0xFEE
 13361                           fsr0h	equ	0xFEA
 13362                           fsr0l	equ	0xFE9
 13363                           wreg	equ	0xFE8
 13364                           postdec1	equ	0xFE5
 13365                           fsr1h	equ	0xFE2
 13366                           fsr1l	equ	0xFE1
 13367                           indf2	equ	0xFDF
 13368                           postinc2	equ	0xFDE
 13369                           postdec2	equ	0xFDD
 13370                           fsr2h	equ	0xFDA
 13371                           fsr2l	equ	0xFD9
 13372                           status	equ	0xFD8
 13373                           
 13374 ;; *************** function ___ftadd *****************
 13375 ;; Defined at:
 13376 ;;		line 86 in file "/Applications/microchip/xc8/v1.40/sources/common/ftadd.c"
 13377 ;; Parameters:    Size  Location     Type
 13378 ;;  f1              3   27[COMRAM] float 
 13379 ;;  f2              3   30[COMRAM] float 
 13380 ;; Auto vars:     Size  Location     Type
 13381 ;;  exp1            1   38[COMRAM] unsigned char 
 13382 ;;  exp2            1   37[COMRAM] unsigned char 
 13383 ;;  sign            1   36[COMRAM] unsigned char 
 13384 ;; Return value:  Size  Location     Type
 13385 ;;                  3   27[COMRAM] float 
 13386 ;; Registers used:
 13387 ;;		wreg, status,2, status,0, cstack
 13388 ;; Tracked objects:
 13389 ;;		On entry : 0/0
 13390 ;;		On exit  : 0/0
 13391 ;;		Unchanged: 0/0
 13392 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13393 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13394 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13395 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13396 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13397 ;;Total ram usage:       12 bytes
 13398 ;; Hardware stack levels used:    1
 13399 ;; Hardware stack levels required when called:    1
 13400 ;; This function calls:
 13401 ;;		___ftpack
 13402 ;; This function is called by:
 13403 ;;		_dec_to_hex
 13404 ;;		___ftsub
 13405 ;;		_floor
 13406 ;;		_log
 13407 ;;		_eval_poly
 13408 ;; This function uses a non-reentrant model
 13409 ;;
 13410                           
 13411                           	psect	text60
 13412  0019DE                     __ptext60:
 13413                           	opt stack 0
 13414  0019DE                     ___ftadd:
 13415                           	opt stack 20
 13416                           
 13417                           ;incstack = 0
 13418  0019DE  C01E  F022         	movff	___ftadd@f1+2,??___ftadd
 13419  0019E2  6A23               	clrf	(??___ftadd+1)& (0+255),c
 13420  0019E4  6A24               	clrf	(??___ftadd+2)& (0+255),c
 13421  0019E6  341D               	rlcf	___ftadd@f1+1,w,c
 13422  0019E8  3622               	rlcf	??___ftadd& (0+255),f,c
 13423  0019EA  E301               	bnc	u291_41
 13424  0019EC  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 13425  0019EE                     u291_41:
 13426  0019EE  5022               	movf	??___ftadd,w,c
 13427  0019F0  6E27               	movwf	___ftadd@exp1,c
 13428  0019F2  C021  F022         	movff	___ftadd@f2+2,??___ftadd
 13429  0019F6  6A23               	clrf	(??___ftadd+1)& (0+255),c
 13430  0019F8  6A24               	clrf	(??___ftadd+2)& (0+255),c
 13431  0019FA  3420               	rlcf	___ftadd@f2+1,w,c
 13432  0019FC  3622               	rlcf	??___ftadd& (0+255),f,c
 13433  0019FE  E301               	bnc	u292_41
 13434  001A00  8023               	bsf	(??___ftadd+1)& (0+255),0,c
 13435  001A02                     u292_41:
 13436  001A02  5022               	movf	??___ftadd,w,c
 13437  001A04  6E26               	movwf	___ftadd@exp2,c
 13438  001A06  5027               	movf	___ftadd@exp1,w,c
 13439  001A08  B4D8               	btfsc	status,2,c
 13440  001A0A  D00B               	goto	i2l837
 13441  001A0C  5026               	movf	___ftadd@exp2,w,c
 13442  001A0E  5C27               	subwf	___ftadd@exp1,w,c
 13443  001A10  B0D8               	btfsc	status,0,c
 13444  001A12  D00E               	goto	i2l3533
 13445  001A14  5027               	movf	___ftadd@exp1,w,c
 13446  001A16  0800               	sublw	0
 13447  001A18  2426               	addwf	___ftadd@exp2,w,c
 13448  001A1A  6E22               	movwf	??___ftadd& (0+255),c
 13449  001A1C  0E18               	movlw	24
 13450  001A1E  6422               	cpfsgt	??___ftadd,c
 13451  001A20  D007               	goto	i2l3533
 13452  001A22                     i2l837:
 13453  001A22  C01F  F01C         	movff	___ftadd@f2,?___ftadd
 13454  001A26  C020  F01D         	movff	___ftadd@f2+1,?___ftadd+1
 13455  001A2A  C021  F01E         	movff	___ftadd@f2+2,?___ftadd+2
 13456  001A2E  0012               	return	
 13457  001A30                     i2l3533:
 13458  001A30  5026               	movf	___ftadd@exp2,w,c
 13459  001A32  B4D8               	btfsc	status,2,c
 13460  001A34  D00B               	goto	i2l841
 13461  001A36  5027               	movf	___ftadd@exp1,w,c
 13462  001A38  5C26               	subwf	___ftadd@exp2,w,c
 13463  001A3A  B0D8               	btfsc	status,0,c
 13464  001A3C  D00E               	goto	i2l3539
 13465  001A3E  5026               	movf	___ftadd@exp2,w,c
 13466  001A40  0800               	sublw	0
 13467  001A42  2427               	addwf	___ftadd@exp1,w,c
 13468  001A44  6E22               	movwf	??___ftadd& (0+255),c
 13469  001A46  0E18               	movlw	24
 13470  001A48  6422               	cpfsgt	??___ftadd,c
 13471  001A4A  D007               	goto	i2l3539
 13472  001A4C                     i2l841:
 13473  001A4C  C01C  F01C         	movff	___ftadd@f1,?___ftadd
 13474  001A50  C01D  F01D         	movff	___ftadd@f1+1,?___ftadd+1
 13475  001A54  C01E  F01E         	movff	___ftadd@f1+2,?___ftadd+2
 13476  001A58  0012               	return	
 13477  001A5A                     i2l3539:
 13478  001A5A  0E06               	movlw	6
 13479  001A5C  6E25               	movwf	___ftadd@sign,c
 13480  001A5E  BE1E               	btfsc	___ftadd@f1+2,7,c
 13481  001A60  8E25               	bsf	___ftadd@sign,7,c
 13482  001A62  BE21               	btfsc	___ftadd@f2+2,7,c
 13483  001A64  8C25               	bsf	___ftadd@sign,6,c
 13484  001A66  8E1D               	bsf	___ftadd@f1+1,7,c
 13485  001A68  0EFF               	movlw	255
 13486  001A6A  161C               	andwf	___ftadd@f1,f,c
 13487  001A6C  0EFF               	movlw	255
 13488  001A6E  161D               	andwf	___ftadd@f1+1,f,c
 13489  001A70  0E00               	movlw	0
 13490  001A72  161E               	andwf	___ftadd@f1+2,f,c
 13491  001A74  8E20               	bsf	___ftadd@f2+1,7,c
 13492  001A76  0EFF               	movlw	255
 13493  001A78  161F               	andwf	___ftadd@f2,f,c
 13494  001A7A  0EFF               	movlw	255
 13495  001A7C  1620               	andwf	___ftadd@f2+1,f,c
 13496  001A7E  0E00               	movlw	0
 13497  001A80  1621               	andwf	___ftadd@f2+2,f,c
 13498  001A82  5026               	movf	___ftadd@exp2,w,c
 13499  001A84  5C27               	subwf	___ftadd@exp1,w,c
 13500  001A86  B0D8               	btfsc	status,0,c
 13501  001A88  D01B               	goto	i2l3565
 13502  001A8A                     i2l3555:
 13503  001A8A  90D8               	bcf	status,0,c
 13504  001A8C  361F               	rlcf	___ftadd@f2,f,c
 13505  001A8E  3620               	rlcf	___ftadd@f2+1,f,c
 13506  001A90  3621               	rlcf	___ftadd@f2+2,f,c
 13507  001A92  0626               	decf	___ftadd@exp2,f,c
 13508  001A94  5027               	movf	___ftadd@exp1,w,c
 13509  001A96  1826               	xorwf	___ftadd@exp2,w,c
 13510  001A98  B4D8               	btfsc	status,2,c
 13511  001A9A  D00D               	goto	i2l3563
 13512  001A9C  0625               	decf	___ftadd@sign,f,c
 13513  001A9E  C025  F022         	movff	___ftadd@sign,??___ftadd
 13514  001AA2  0E07               	movlw	7
 13515  001AA4  1622               	andwf	??___ftadd,f,c
 13516  001AA6  B4D8               	btfsc	status,2,c
 13517  001AA8  D006               	goto	i2l3563
 13518  001AAA  D7EF               	goto	i2l3555
 13519  001AAC                     i2l3561:
 13520  001AAC  90D8               	bcf	status,0,c
 13521  001AAE  321E               	rrcf	___ftadd@f1+2,f,c
 13522  001AB0  321D               	rrcf	___ftadd@f1+1,f,c
 13523  001AB2  321C               	rrcf	___ftadd@f1,f,c
 13524  001AB4  2A27               	incf	___ftadd@exp1,f,c
 13525  001AB6                     i2l3563:
 13526  001AB6  5026               	movf	___ftadd@exp2,w,c
 13527  001AB8  1827               	xorwf	___ftadd@exp1,w,c
 13528  001ABA  B4D8               	btfsc	status,2,c
 13529  001ABC  D01F               	goto	i2l852
 13530  001ABE  D7F6               	goto	i2l3561
 13531  001AC0                     i2l3565:
 13532  001AC0  5027               	movf	___ftadd@exp1,w,c
 13533  001AC2  5C26               	subwf	___ftadd@exp2,w,c
 13534  001AC4  B0D8               	btfsc	status,0,c
 13535  001AC6  D01A               	goto	i2l852
 13536  001AC8                     i2l3567:
 13537  001AC8  90D8               	bcf	status,0,c
 13538  001ACA  361C               	rlcf	___ftadd@f1,f,c
 13539  001ACC  361D               	rlcf	___ftadd@f1+1,f,c
 13540  001ACE  361E               	rlcf	___ftadd@f1+2,f,c
 13541  001AD0  0627               	decf	___ftadd@exp1,f,c
 13542  001AD2  5027               	movf	___ftadd@exp1,w,c
 13543  001AD4  1826               	xorwf	___ftadd@exp2,w,c
 13544  001AD6  B4D8               	btfsc	status,2,c
 13545  001AD8  D00D               	goto	i2l3575
 13546  001ADA  0625               	decf	___ftadd@sign,f,c
 13547  001ADC  C025  F022         	movff	___ftadd@sign,??___ftadd
 13548  001AE0  0E07               	movlw	7
 13549  001AE2  1622               	andwf	??___ftadd,f,c
 13550  001AE4  B4D8               	btfsc	status,2,c
 13551  001AE6  D006               	goto	i2l3575
 13552  001AE8  D7EF               	goto	i2l3567
 13553  001AEA                     i2l3573:
 13554  001AEA  90D8               	bcf	status,0,c
 13555  001AEC  3221               	rrcf	___ftadd@f2+2,f,c
 13556  001AEE  3220               	rrcf	___ftadd@f2+1,f,c
 13557  001AF0  321F               	rrcf	___ftadd@f2,f,c
 13558  001AF2  2A26               	incf	___ftadd@exp2,f,c
 13559  001AF4                     i2l3575:
 13560  001AF4  5026               	movf	___ftadd@exp2,w,c
 13561  001AF6  1827               	xorwf	___ftadd@exp1,w,c
 13562  001AF8  A4D8               	btfss	status,2,c
 13563  001AFA  D7F7               	goto	i2l3573
 13564  001AFC                     i2l852:
 13565  001AFC  AE25               	btfss	___ftadd@sign,7,c
 13566  001AFE  D00C               	goto	i2l861
 13567  001B00  0EFF               	movlw	255
 13568  001B02  1A1C               	xorwf	___ftadd@f1,f,c
 13569  001B04  0EFF               	movlw	255
 13570  001B06  1A1D               	xorwf	___ftadd@f1+1,f,c
 13571  001B08  0EFF               	movlw	255
 13572  001B0A  1A1E               	xorwf	___ftadd@f1+2,f,c
 13573  001B0C  0E01               	movlw	1
 13574  001B0E  261C               	addwf	___ftadd@f1,f,c
 13575  001B10  0E00               	movlw	0
 13576  001B12  221D               	addwfc	___ftadd@f1+1,f,c
 13577  001B14  0E00               	movlw	0
 13578  001B16  221E               	addwfc	___ftadd@f1+2,f,c
 13579  001B18                     i2l861:
 13580  001B18  AC25               	btfss	___ftadd@sign,6,c
 13581  001B1A  D00C               	goto	i2l3581
 13582  001B1C  0EFF               	movlw	255
 13583  001B1E  1A1F               	xorwf	___ftadd@f2,f,c
 13584  001B20  0EFF               	movlw	255
 13585  001B22  1A20               	xorwf	___ftadd@f2+1,f,c
 13586  001B24  0EFF               	movlw	255
 13587  001B26  1A21               	xorwf	___ftadd@f2+2,f,c
 13588  001B28  0E01               	movlw	1
 13589  001B2A  261F               	addwf	___ftadd@f2,f,c
 13590  001B2C  0E00               	movlw	0
 13591  001B2E  2220               	addwfc	___ftadd@f2+1,f,c
 13592  001B30  0E00               	movlw	0
 13593  001B32  2221               	addwfc	___ftadd@f2+2,f,c
 13594  001B34                     i2l3581:
 13595  001B34  0E00               	movlw	0
 13596  001B36  6E25               	movwf	___ftadd@sign,c
 13597  001B38  501C               	movf	___ftadd@f1,w,c
 13598  001B3A  261F               	addwf	___ftadd@f2,f,c
 13599  001B3C  501D               	movf	___ftadd@f1+1,w,c
 13600  001B3E  2220               	addwfc	___ftadd@f2+1,f,c
 13601  001B40  501E               	movf	___ftadd@f1+2,w,c
 13602  001B42  2221               	addwfc	___ftadd@f2+2,f,c
 13603  001B44  AE21               	btfss	___ftadd@f2+2,7,c
 13604  001B46  D00E               	goto	i2l3591
 13605  001B48  0EFF               	movlw	255
 13606  001B4A  1A1F               	xorwf	___ftadd@f2,f,c
 13607  001B4C  0EFF               	movlw	255
 13608  001B4E  1A20               	xorwf	___ftadd@f2+1,f,c
 13609  001B50  0EFF               	movlw	255
 13610  001B52  1A21               	xorwf	___ftadd@f2+2,f,c
 13611  001B54  0E01               	movlw	1
 13612  001B56  261F               	addwf	___ftadd@f2,f,c
 13613  001B58  0E00               	movlw	0
 13614  001B5A  2220               	addwfc	___ftadd@f2+1,f,c
 13615  001B5C  0E00               	movlw	0
 13616  001B5E  2221               	addwfc	___ftadd@f2+2,f,c
 13617  001B60  0E01               	movlw	1
 13618  001B62  6E25               	movwf	___ftadd@sign,c
 13619  001B64                     i2l3591:
 13620  001B64  C01F  F001         	movff	___ftadd@f2,___ftpack@arg
 13621  001B68  C020  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
 13622  001B6C  C021  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
 13623  001B70  C027  F004         	movff	___ftadd@exp1,___ftpack@exp
 13624  001B74  C025  F005         	movff	___ftadd@sign,___ftpack@sign
 13625  001B78  ECB4  F014         	call	___ftpack	;wreg free
 13626  001B7C  C001  F01C         	movff	?___ftpack,?___ftadd
 13627  001B80  C002  F01D         	movff	?___ftpack+1,?___ftadd+1
 13628  001B84  C003  F01E         	movff	?___ftpack+2,?___ftadd+2
 13629  001B88  0012               	return	
 13630  001B8A                     __end_of___ftadd:
 13631                           	opt stack 0
 13632                           pclatu	equ	0xFFB
 13633                           pclath	equ	0xFFA
 13634                           tblptru	equ	0xFF8
 13635                           tblptrh	equ	0xFF7
 13636                           tblptrl	equ	0xFF6
 13637                           tablat	equ	0xFF5
 13638                           prodh	equ	0xFF4
 13639                           prodl	equ	0xFF3
 13640                           intcon	equ	0xFF2
 13641                           intcon2	equ	0xFF1
 13642                           intcon3	equ	0xFF0
 13643                           postinc0	equ	0xFEE
 13644                           fsr0h	equ	0xFEA
 13645                           fsr0l	equ	0xFE9
 13646                           wreg	equ	0xFE8
 13647                           postdec1	equ	0xFE5
 13648                           fsr1h	equ	0xFE2
 13649                           fsr1l	equ	0xFE1
 13650                           indf2	equ	0xFDF
 13651                           postinc2	equ	0xFDE
 13652                           postdec2	equ	0xFDD
 13653                           fsr2h	equ	0xFDA
 13654                           fsr2l	equ	0xFD9
 13655                           status	equ	0xFD8
 13656                           
 13657 ;; *************** function ___ftneg *****************
 13658 ;; Defined at:
 13659 ;;		line 15 in file "/Applications/microchip/xc8/v1.40/sources/common/ftneg.c"
 13660 ;; Parameters:    Size  Location     Type
 13661 ;;  f1              3    0[COMRAM] float 
 13662 ;; Auto vars:     Size  Location     Type
 13663 ;;		None
 13664 ;; Return value:  Size  Location     Type
 13665 ;;                  3    0[COMRAM] float 
 13666 ;; Registers used:
 13667 ;;		wreg, status,2, status,0
 13668 ;; Tracked objects:
 13669 ;;		On entry : 0/0
 13670 ;;		On exit  : 0/0
 13671 ;;		Unchanged: 0/0
 13672 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13673 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13674 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13675 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13676 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13677 ;;Total ram usage:        3 bytes
 13678 ;; Hardware stack levels used:    1
 13679 ;; This function calls:
 13680 ;;		Nothing
 13681 ;; This function is called by:
 13682 ;;		_pow
 13683 ;;		_exp
 13684 ;; This function uses a non-reentrant model
 13685 ;;
 13686                           
 13687                           	psect	text61
 13688  0033A6                     __ptext61:
 13689                           	opt stack 0
 13690  0033A6                     ___ftneg:
 13691                           	opt stack 22
 13692                           
 13693                           ;incstack = 0
 13694  0033A6  5001               	movf	___ftneg@f1,w,c
 13695  0033A8  1002               	iorwf	___ftneg@f1+1,w,c
 13696  0033AA  1003               	iorwf	___ftneg@f1+2,w,c
 13697  0033AC  B4D8               	btfsc	status,2,c
 13698  0033AE  D006               	goto	i2l894
 13699  0033B0  0E00               	movlw	0
 13700  0033B2  1A01               	xorwf	___ftneg@f1,f,c
 13701  0033B4  0E00               	movlw	0
 13702  0033B6  1A02               	xorwf	___ftneg@f1+1,f,c
 13703  0033B8  0E80               	movlw	128
 13704  0033BA  1A03               	xorwf	___ftneg@f1+2,f,c
 13705  0033BC                     i2l894:
 13706  0033BC  C001  F001         	movff	___ftneg@f1,?___ftneg
 13707  0033C0  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
 13708  0033C4  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
 13709  0033C8  0012               	return		;funcret
 13710  0033CA                     __end_of___ftneg:
 13711                           	opt stack 0
 13712                           pclatu	equ	0xFFB
 13713                           pclath	equ	0xFFA
 13714                           tblptru	equ	0xFF8
 13715                           tblptrh	equ	0xFF7
 13716                           tblptrl	equ	0xFF6
 13717                           tablat	equ	0xFF5
 13718                           prodh	equ	0xFF4
 13719                           prodl	equ	0xFF3
 13720                           intcon	equ	0xFF2
 13721                           intcon2	equ	0xFF1
 13722                           intcon3	equ	0xFF0
 13723                           postinc0	equ	0xFEE
 13724                           fsr0h	equ	0xFEA
 13725                           fsr0l	equ	0xFE9
 13726                           wreg	equ	0xFE8
 13727                           postdec1	equ	0xFE5
 13728                           fsr1h	equ	0xFE2
 13729                           fsr1l	equ	0xFE1
 13730                           indf2	equ	0xFDF
 13731                           postinc2	equ	0xFDE
 13732                           postdec2	equ	0xFDD
 13733                           fsr2h	equ	0xFDA
 13734                           fsr2l	equ	0xFD9
 13735                           status	equ	0xFD8
 13736                           
 13737 ;; *************** function ___ftdiv *****************
 13738 ;; Defined at:
 13739 ;;		line 54 in file "/Applications/microchip/xc8/v1.40/sources/common/ftdiv.c"
 13740 ;; Parameters:    Size  Location     Type
 13741 ;;  f1              3    8[COMRAM] float 
 13742 ;;  f2              3   11[COMRAM] float 
 13743 ;; Auto vars:     Size  Location     Type
 13744 ;;  f3              3   18[COMRAM] float 
 13745 ;;  sign            1   22[COMRAM] unsigned char 
 13746 ;;  exp             1   21[COMRAM] unsigned char 
 13747 ;;  cntr            1   17[COMRAM] unsigned char 
 13748 ;; Return value:  Size  Location     Type
 13749 ;;                  3    8[COMRAM] float 
 13750 ;; Registers used:
 13751 ;;		wreg, status,2, status,0, cstack
 13752 ;; Tracked objects:
 13753 ;;		On entry : 0/0
 13754 ;;		On exit  : 0/0
 13755 ;;		Unchanged: 0/0
 13756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13757 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13758 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13759 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13760 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13761 ;;Total ram usage:       15 bytes
 13762 ;; Hardware stack levels used:    1
 13763 ;; Hardware stack levels required when called:    1
 13764 ;; This function calls:
 13765 ;;		___ftpack
 13766 ;; This function is called by:
 13767 ;;		_exp
 13768 ;; This function uses a non-reentrant model
 13769 ;;
 13770                           
 13771                           	psect	text62
 13772  0023E8                     __ptext62:
 13773                           	opt stack 0
 13774  0023E8                     ___ftdiv:
 13775                           	opt stack 21
 13776                           
 13777                           ;incstack = 0
 13778  0023E8  C00B  F00F         	movff	___ftdiv@f1+2,??___ftdiv
 13779  0023EC  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 13780  0023EE  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 13781  0023F0  340A               	rlcf	___ftdiv@f1+1,w,c
 13782  0023F2  360F               	rlcf	??___ftdiv& (0+255),f,c
 13783  0023F4  E301               	bnc	u333_41
 13784  0023F6  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 13785  0023F8                     u333_41:
 13786  0023F8  500F               	movf	??___ftdiv,w,c
 13787  0023FA  6E16               	movwf	___ftdiv@exp,c
 13788  0023FC  5016               	movf	___ftdiv@exp,w,c
 13789  0023FE  A4D8               	btfss	status,2,c
 13790  002400  D007               	goto	i2l3761
 13791  002402  0E00               	movlw	0
 13792  002404  6E09               	movwf	?___ftdiv,c
 13793  002406  0E00               	movlw	0
 13794  002408  6E0A               	movwf	?___ftdiv+1,c
 13795  00240A  0E00               	movlw	0
 13796  00240C  6E0B               	movwf	?___ftdiv+2,c
 13797  00240E  0012               	return	
 13798  002410                     i2l3761:
 13799  002410  C00E  F00F         	movff	___ftdiv@f2+2,??___ftdiv
 13800  002414  6A10               	clrf	(??___ftdiv+1)& (0+255),c
 13801  002416  6A11               	clrf	(??___ftdiv+2)& (0+255),c
 13802  002418  340D               	rlcf	___ftdiv@f2+1,w,c
 13803  00241A  360F               	rlcf	??___ftdiv& (0+255),f,c
 13804  00241C  E301               	bnc	u335_41
 13805  00241E  8010               	bsf	(??___ftdiv+1)& (0+255),0,c
 13806  002420                     u335_41:
 13807  002420  500F               	movf	??___ftdiv,w,c
 13808  002422  6E17               	movwf	___ftdiv@sign,c
 13809  002424  5017               	movf	___ftdiv@sign,w,c
 13810  002426  A4D8               	btfss	status,2,c
 13811  002428  D007               	goto	i2l3767
 13812  00242A  0E00               	movlw	0
 13813  00242C  6E09               	movwf	?___ftdiv,c
 13814  00242E  0E00               	movlw	0
 13815  002430  6E0A               	movwf	?___ftdiv+1,c
 13816  002432  0E00               	movlw	0
 13817  002434  6E0B               	movwf	?___ftdiv+2,c
 13818  002436  0012               	return	
 13819  002438                     i2l3767:
 13820  002438  0E00               	movlw	0
 13821  00243A  6E13               	movwf	___ftdiv@f3,c
 13822  00243C  0E00               	movlw	0
 13823  00243E  6E14               	movwf	___ftdiv@f3+1,c
 13824  002440  0E00               	movlw	0
 13825  002442  6E15               	movwf	___ftdiv@f3+2,c
 13826  002444  5017               	movf	___ftdiv@sign,w,c
 13827  002446  0F89               	addlw	137
 13828  002448  5E16               	subwf	___ftdiv@exp,f,c
 13829  00244A  C00B  F017         	movff	___ftdiv@f1+2,___ftdiv@sign
 13830  00244E  500E               	movf	___ftdiv@f2+2,w,c
 13831  002450  1A17               	xorwf	___ftdiv@sign,f,c
 13832  002452  0E80               	movlw	128
 13833  002454  1617               	andwf	___ftdiv@sign,f,c
 13834  002456  8E0A               	bsf	___ftdiv@f1+1,7,c
 13835  002458  0EFF               	movlw	255
 13836  00245A  1609               	andwf	___ftdiv@f1,f,c
 13837  00245C  0EFF               	movlw	255
 13838  00245E  160A               	andwf	___ftdiv@f1+1,f,c
 13839  002460  0E00               	movlw	0
 13840  002462  160B               	andwf	___ftdiv@f1+2,f,c
 13841  002464  8E0D               	bsf	___ftdiv@f2+1,7,c
 13842  002466  0EFF               	movlw	255
 13843  002468  160C               	andwf	___ftdiv@f2,f,c
 13844  00246A  0EFF               	movlw	255
 13845  00246C  160D               	andwf	___ftdiv@f2+1,f,c
 13846  00246E  0E00               	movlw	0
 13847  002470  160E               	andwf	___ftdiv@f2+2,f,c
 13848  002472  0E18               	movlw	24
 13849  002474  6E12               	movwf	___ftdiv@cntr,c
 13850  002476                     i2l3787:
 13851  002476  90D8               	bcf	status,0,c
 13852  002478  3613               	rlcf	___ftdiv@f3,f,c
 13853  00247A  3614               	rlcf	___ftdiv@f3+1,f,c
 13854  00247C  3615               	rlcf	___ftdiv@f3+2,f,c
 13855  00247E  500C               	movf	___ftdiv@f2,w,c
 13856  002480  5C09               	subwf	___ftdiv@f1,w,c
 13857  002482  500D               	movf	___ftdiv@f2+1,w,c
 13858  002484  580A               	subwfb	___ftdiv@f1+1,w,c
 13859  002486  500E               	movf	___ftdiv@f2+2,w,c
 13860  002488  580B               	subwfb	___ftdiv@f1+2,w,c
 13861  00248A  A0D8               	btfss	status,0,c
 13862  00248C  D007               	goto	i2l872
 13863  00248E  500C               	movf	___ftdiv@f2,w,c
 13864  002490  5E09               	subwf	___ftdiv@f1,f,c
 13865  002492  500D               	movf	___ftdiv@f2+1,w,c
 13866  002494  5A0A               	subwfb	___ftdiv@f1+1,f,c
 13867  002496  500E               	movf	___ftdiv@f2+2,w,c
 13868  002498  5A0B               	subwfb	___ftdiv@f1+2,f,c
 13869  00249A  8013               	bsf	___ftdiv@f3,0,c
 13870  00249C                     i2l872:
 13871  00249C  90D8               	bcf	status,0,c
 13872  00249E  3609               	rlcf	___ftdiv@f1,f,c
 13873  0024A0  360A               	rlcf	___ftdiv@f1+1,f,c
 13874  0024A2  360B               	rlcf	___ftdiv@f1+2,f,c
 13875  0024A4  2E12               	decfsz	___ftdiv@cntr,f,c
 13876  0024A6  D7E7               	goto	i2l3787
 13877  0024A8  C013  F001         	movff	___ftdiv@f3,___ftpack@arg
 13878  0024AC  C014  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
 13879  0024B0  C015  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
 13880  0024B4  C016  F004         	movff	___ftdiv@exp,___ftpack@exp
 13881  0024B8  C017  F005         	movff	___ftdiv@sign,___ftpack@sign
 13882  0024BC  ECB4  F014         	call	___ftpack	;wreg free
 13883  0024C0  C001  F009         	movff	?___ftpack,?___ftdiv
 13884  0024C4  C002  F00A         	movff	?___ftpack+1,?___ftdiv+1
 13885  0024C8  C003  F00B         	movff	?___ftpack+2,?___ftdiv+2
 13886  0024CC  0012               	return	
 13887  0024CE                     __end_of___ftdiv:
 13888                           	opt stack 0
 13889                           pclatu	equ	0xFFB
 13890                           pclath	equ	0xFFA
 13891                           tblptru	equ	0xFF8
 13892                           tblptrh	equ	0xFF7
 13893                           tblptrl	equ	0xFF6
 13894                           tablat	equ	0xFF5
 13895                           prodh	equ	0xFF4
 13896                           prodl	equ	0xFF3
 13897                           intcon	equ	0xFF2
 13898                           intcon2	equ	0xFF1
 13899                           intcon3	equ	0xFF0
 13900                           postinc0	equ	0xFEE
 13901                           fsr0h	equ	0xFEA
 13902                           fsr0l	equ	0xFE9
 13903                           wreg	equ	0xFE8
 13904                           postdec1	equ	0xFE5
 13905                           fsr1h	equ	0xFE2
 13906                           fsr1l	equ	0xFE1
 13907                           indf2	equ	0xFDF
 13908                           postinc2	equ	0xFDE
 13909                           postdec2	equ	0xFDD
 13910                           fsr2h	equ	0xFDA
 13911                           fsr2l	equ	0xFD9
 13912                           status	equ	0xFD8
 13913                           
 13914 ;; *************** function ___awtoft *****************
 13915 ;; Defined at:
 13916 ;;		line 32 in file "/Applications/microchip/xc8/v1.40/sources/common/awtoft.c"
 13917 ;; Parameters:    Size  Location     Type
 13918 ;;  c               2    8[COMRAM] int 
 13919 ;; Auto vars:     Size  Location     Type
 13920 ;;  sign            1   11[COMRAM] unsigned char 
 13921 ;; Return value:  Size  Location     Type
 13922 ;;                  3    8[COMRAM] float 
 13923 ;; Registers used:
 13924 ;;		wreg, status,2, status,0, cstack
 13925 ;; Tracked objects:
 13926 ;;		On entry : 0/0
 13927 ;;		On exit  : 0/0
 13928 ;;		Unchanged: 0/0
 13929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13930 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13931 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13932 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13933 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13934 ;;Total ram usage:        4 bytes
 13935 ;; Hardware stack levels used:    1
 13936 ;; Hardware stack levels required when called:    1
 13937 ;; This function calls:
 13938 ;;		___ftpack
 13939 ;; This function is called by:
 13940 ;;		_dec_to_hex
 13941 ;;		_exp
 13942 ;;		_log
 13943 ;; This function uses a non-reentrant model
 13944 ;;
 13945                           
 13946                           	psect	text63
 13947  00325E                     __ptext63:
 13948                           	opt stack 0
 13949  00325E                     ___awtoft:
 13950                           	opt stack 21
 13951                           
 13952                           ;incstack = 0
 13953  00325E  0E00               	movlw	0
 13954  003260  6E0C               	movwf	___awtoft@sign,c
 13955  003262  AE0A               	btfss	___awtoft@c+1,7,c
 13956  003264  D006               	goto	i2l3817
 13957  003266  6C09               	negf	___awtoft@c,c
 13958  003268  1E0A               	comf	___awtoft@c+1,f,c
 13959  00326A  B0D8               	btfsc	status,0,c
 13960  00326C  2A0A               	incf	___awtoft@c+1,f,c
 13961  00326E  0E01               	movlw	1
 13962  003270  6E0C               	movwf	___awtoft@sign,c
 13963  003272                     i2l3817:
 13964  003272  C009  F001         	movff	___awtoft@c,___ftpack@arg
 13965  003276  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
 13966  00327A  6A03               	clrf	___ftpack@arg+2,c
 13967  00327C  0E8E               	movlw	142
 13968  00327E  6E04               	movwf	___ftpack@exp,c
 13969  003280  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
 13970  003284  ECB4  F014         	call	___ftpack	;wreg free
 13971  003288  C001  F009         	movff	?___ftpack,?___awtoft
 13972  00328C  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
 13973  003290  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
 13974  003294  0012               	return	
 13975  003296                     __end_of___awtoft:
 13976                           	opt stack 0
 13977                           pclatu	equ	0xFFB
 13978                           pclath	equ	0xFFA
 13979                           tblptru	equ	0xFF8
 13980                           tblptrh	equ	0xFF7
 13981                           tblptrl	equ	0xFF6
 13982                           tablat	equ	0xFF5
 13983                           prodh	equ	0xFF4
 13984                           prodl	equ	0xFF3
 13985                           intcon	equ	0xFF2
 13986                           intcon2	equ	0xFF1
 13987                           intcon3	equ	0xFF0
 13988                           postinc0	equ	0xFEE
 13989                           fsr0h	equ	0xFEA
 13990                           fsr0l	equ	0xFE9
 13991                           wreg	equ	0xFE8
 13992                           postdec1	equ	0xFE5
 13993                           fsr1h	equ	0xFE2
 13994                           fsr1l	equ	0xFE1
 13995                           indf2	equ	0xFDF
 13996                           postinc2	equ	0xFDE
 13997                           postdec2	equ	0xFDD
 13998                           fsr2h	equ	0xFDA
 13999                           fsr2l	equ	0xFD9
 14000                           status	equ	0xFD8
 14001                           
 14002 ;; *************** function ___lltoft *****************
 14003 ;; Defined at:
 14004 ;;		line 35 in file "/Applications/microchip/xc8/v1.40/sources/common/lltoft.c"
 14005 ;; Parameters:    Size  Location     Type
 14006 ;;  c               4    8[COMRAM] unsigned long 
 14007 ;; Auto vars:     Size  Location     Type
 14008 ;;  exp             1   16[COMRAM] unsigned char 
 14009 ;; Return value:  Size  Location     Type
 14010 ;;                  3    8[COMRAM] float 
 14011 ;; Registers used:
 14012 ;;		wreg, status,2, status,0, cstack
 14013 ;; Tracked objects:
 14014 ;;		On entry : 0/0
 14015 ;;		On exit  : 0/0
 14016 ;;		Unchanged: 0/0
 14017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14018 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14019 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14020 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14021 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14022 ;;Total ram usage:        9 bytes
 14023 ;; Hardware stack levels used:    1
 14024 ;; Hardware stack levels required when called:    1
 14025 ;; This function calls:
 14026 ;;		___ftpack
 14027 ;; This function is called by:
 14028 ;;		_pow
 14029 ;; This function uses a non-reentrant model
 14030 ;;
 14031                           
 14032                           	psect	text64
 14033  00303E                     __ptext64:
 14034                           	opt stack 0
 14035  00303E                     ___lltoft:
 14036                           	opt stack 22
 14037                           
 14038                           ;incstack = 0
 14039  00303E  0E8E               	movlw	142
 14040  003040  6E11               	movwf	___lltoft@exp,c
 14041  003042  D006               	goto	i2l3943
 14042  003044                     i2l3941:
 14043  003044  90D8               	bcf	status,0,c
 14044  003046  320C               	rrcf	___lltoft@c+3,f,c
 14045  003048  320B               	rrcf	___lltoft@c+2,f,c
 14046  00304A  320A               	rrcf	___lltoft@c+1,f,c
 14047  00304C  3209               	rrcf	___lltoft@c,f,c
 14048  00304E  2A11               	incf	___lltoft@exp,f,c
 14049  003050                     i2l3943:
 14050  003050  0E00               	movlw	0
 14051  003052  1409               	andwf	___lltoft@c,w,c
 14052  003054  6E0D               	movwf	??___lltoft& (0+255),c
 14053  003056  0E00               	movlw	0
 14054  003058  140A               	andwf	___lltoft@c+1,w,c
 14055  00305A  6E0E               	movwf	(??___lltoft+1)& (0+255),c
 14056  00305C  0E00               	movlw	0
 14057  00305E  140B               	andwf	___lltoft@c+2,w,c
 14058  003060  6E0F               	movwf	(??___lltoft+2)& (0+255),c
 14059  003062  0EFF               	movlw	255
 14060  003064  140C               	andwf	___lltoft@c+3,w,c
 14061  003066  6E10               	movwf	(??___lltoft+3)& (0+255),c
 14062  003068  500D               	movf	??___lltoft,w,c
 14063  00306A  100E               	iorwf	??___lltoft+1,w,c
 14064  00306C  100F               	iorwf	??___lltoft+2,w,c
 14065  00306E  1010               	iorwf	??___lltoft+3,w,c
 14066  003070  A4D8               	btfss	status,2,c
 14067  003072  D7E8               	goto	i2l3941
 14068  003074  C009  F001         	movff	___lltoft@c,___ftpack@arg
 14069  003078  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
 14070  00307C  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
 14071  003080  C011  F004         	movff	___lltoft@exp,___ftpack@exp
 14072  003084  0E00               	movlw	0
 14073  003086  6E05               	movwf	___ftpack@sign,c
 14074  003088  ECB4  F014         	call	___ftpack	;wreg free
 14075  00308C  C001  F009         	movff	?___ftpack,?___lltoft
 14076  003090  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
 14077  003094  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
 14078  003098  0012               	return	
 14079  00309A                     __end_of___lltoft:
 14080                           	opt stack 0
 14081                           pclatu	equ	0xFFB
 14082                           pclath	equ	0xFFA
 14083                           tblptru	equ	0xFF8
 14084                           tblptrh	equ	0xFF7
 14085                           tblptrl	equ	0xFF6
 14086                           tablat	equ	0xFF5
 14087                           prodh	equ	0xFF4
 14088                           prodl	equ	0xFF3
 14089                           intcon	equ	0xFF2
 14090                           intcon2	equ	0xFF1
 14091                           intcon3	equ	0xFF0
 14092                           postinc0	equ	0xFEE
 14093                           fsr0h	equ	0xFEA
 14094                           fsr0l	equ	0xFE9
 14095                           wreg	equ	0xFE8
 14096                           postdec1	equ	0xFE5
 14097                           fsr1h	equ	0xFE2
 14098                           fsr1l	equ	0xFE1
 14099                           indf2	equ	0xFDF
 14100                           postinc2	equ	0xFDE
 14101                           postdec2	equ	0xFDD
 14102                           fsr2h	equ	0xFDA
 14103                           fsr2l	equ	0xFD9
 14104                           status	equ	0xFD8
 14105                           
 14106 ;; *************** function ___ftpack *****************
 14107 ;; Defined at:
 14108 ;;		line 62 in file "/Applications/microchip/xc8/v1.40/sources/common/float.c"
 14109 ;; Parameters:    Size  Location     Type
 14110 ;;  arg             3    0[COMRAM] unsigned um
 14111 ;;  exp             1    3[COMRAM] unsigned char 
 14112 ;;  sign            1    4[COMRAM] unsigned char 
 14113 ;; Auto vars:     Size  Location     Type
 14114 ;;		None
 14115 ;; Return value:  Size  Location     Type
 14116 ;;                  3    0[COMRAM] float 
 14117 ;; Registers used:
 14118 ;;		wreg, status,2, status,0
 14119 ;; Tracked objects:
 14120 ;;		On entry : 0/0
 14121 ;;		On exit  : 0/0
 14122 ;;		Unchanged: 0/0
 14123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14124 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14126 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14127 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14128 ;;Total ram usage:        8 bytes
 14129 ;; Hardware stack levels used:    1
 14130 ;; This function calls:
 14131 ;;		Nothing
 14132 ;; This function is called by:
 14133 ;;		___altoft
 14134 ;;		___awtoft
 14135 ;;		___ftadd
 14136 ;;		___ftdiv
 14137 ;;		___ftmul
 14138 ;;		___lltoft
 14139 ;; This function uses a non-reentrant model
 14140 ;;
 14141                           
 14142                           	psect	text65
 14143  002968                     __ptext65:
 14144                           	opt stack 0
 14145  002968                     ___ftpack:
 14146                           	opt stack 20
 14147                           
 14148                           ;incstack = 0
 14149  002968  5004               	movf	___ftpack@exp,w,c
 14150  00296A  B4D8               	btfsc	status,2,c
 14151  00296C  D005               	goto	i2l3477
 14152  00296E  5001               	movf	___ftpack@arg,w,c
 14153  002970  1002               	iorwf	___ftpack@arg+1,w,c
 14154  002972  1003               	iorwf	___ftpack@arg+2,w,c
 14155  002974  A4D8               	btfss	status,2,c
 14156  002976  D00C               	goto	i2l3483
 14157  002978                     i2l3477:
 14158  002978  0E00               	movlw	0
 14159  00297A  6E01               	movwf	?___ftpack,c
 14160  00297C  0E00               	movlw	0
 14161  00297E  6E02               	movwf	?___ftpack+1,c
 14162  002980  0E00               	movlw	0
 14163  002982  6E03               	movwf	?___ftpack+2,c
 14164  002984  0012               	return	
 14165  002986                     i2l3481:
 14166  002986  2A04               	incf	___ftpack@exp,f,c
 14167  002988  90D8               	bcf	status,0,c
 14168  00298A  3203               	rrcf	___ftpack@arg+2,f,c
 14169  00298C  3202               	rrcf	___ftpack@arg+1,f,c
 14170  00298E  3201               	rrcf	___ftpack@arg,f,c
 14171  002990                     i2l3483:
 14172  002990  0E00               	movlw	0
 14173  002992  1401               	andwf	___ftpack@arg,w,c
 14174  002994  6E06               	movwf	??___ftpack& (0+255),c
 14175  002996  0E00               	movlw	0
 14176  002998  1402               	andwf	___ftpack@arg+1,w,c
 14177  00299A  6E07               	movwf	(??___ftpack+1)& (0+255),c
 14178  00299C  0EFE               	movlw	254
 14179  00299E  1403               	andwf	___ftpack@arg+2,w,c
 14180  0029A0  6E08               	movwf	(??___ftpack+2)& (0+255),c
 14181  0029A2  5006               	movf	??___ftpack,w,c
 14182  0029A4  1007               	iorwf	??___ftpack+1,w,c
 14183  0029A6  1008               	iorwf	??___ftpack+2,w,c
 14184  0029A8  B4D8               	btfsc	status,2,c
 14185  0029AA  D00C               	goto	i2l3489
 14186  0029AC  D7EC               	goto	i2l3481
 14187  0029AE                     i2l3485:
 14188  0029AE  2A04               	incf	___ftpack@exp,f,c
 14189  0029B0  0E01               	movlw	1
 14190  0029B2  2601               	addwf	___ftpack@arg,f,c
 14191  0029B4  0E00               	movlw	0
 14192  0029B6  2202               	addwfc	___ftpack@arg+1,f,c
 14193  0029B8  0E00               	movlw	0
 14194  0029BA  2203               	addwfc	___ftpack@arg+2,f,c
 14195  0029BC  90D8               	bcf	status,0,c
 14196  0029BE  3203               	rrcf	___ftpack@arg+2,f,c
 14197  0029C0  3202               	rrcf	___ftpack@arg+1,f,c
 14198  0029C2  3201               	rrcf	___ftpack@arg,f,c
 14199  0029C4                     i2l3489:
 14200  0029C4  0E00               	movlw	0
 14201  0029C6  1401               	andwf	___ftpack@arg,w,c
 14202  0029C8  6E06               	movwf	??___ftpack& (0+255),c
 14203  0029CA  0E00               	movlw	0
 14204  0029CC  1402               	andwf	___ftpack@arg+1,w,c
 14205  0029CE  6E07               	movwf	(??___ftpack+1)& (0+255),c
 14206  0029D0  0EFF               	movlw	255
 14207  0029D2  1403               	andwf	___ftpack@arg+2,w,c
 14208  0029D4  6E08               	movwf	(??___ftpack+2)& (0+255),c
 14209  0029D6  5006               	movf	??___ftpack,w,c
 14210  0029D8  1007               	iorwf	??___ftpack+1,w,c
 14211  0029DA  1008               	iorwf	??___ftpack+2,w,c
 14212  0029DC  B4D8               	btfsc	status,2,c
 14213  0029DE  D006               	goto	i2l3493
 14214  0029E0  D7E6               	goto	i2l3485
 14215  0029E2                     i2l3491:
 14216  0029E2  0604               	decf	___ftpack@exp,f,c
 14217  0029E4  90D8               	bcf	status,0,c
 14218  0029E6  3601               	rlcf	___ftpack@arg,f,c
 14219  0029E8  3602               	rlcf	___ftpack@arg+1,f,c
 14220  0029EA  3603               	rlcf	___ftpack@arg+2,f,c
 14221  0029EC                     i2l3493:
 14222  0029EC  BE02               	btfsc	___ftpack@arg+1,7,c
 14223  0029EE  D003               	goto	i2l814
 14224  0029F0  0E02               	movlw	2
 14225  0029F2  6004               	cpfslt	___ftpack@exp,c
 14226  0029F4  D7F6               	goto	i2l3491
 14227  0029F6                     i2l814:
 14228  0029F6  A004               	btfss	___ftpack@exp,0,c
 14229  0029F8  9E02               	bcf	___ftpack@arg+1,7,c
 14230  0029FA  90D8               	bcf	status,0,c
 14231  0029FC  3204               	rrcf	___ftpack@exp,f,c
 14232  0029FE  5004               	movf	___ftpack@exp,w,c
 14233  002A00  1203               	iorwf	___ftpack@arg+2,f,c
 14234  002A02  5005               	movf	___ftpack@sign,w,c
 14235  002A04  A4D8               	btfss	status,2,c
 14236  002A06  8E03               	bsf	___ftpack@arg+2,7,c
 14237  002A08  C001  F001         	movff	___ftpack@arg,?___ftpack
 14238  002A0C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
 14239  002A10  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
 14240  002A14  0012               	return	
 14241  002A16                     __end_of___ftpack:
 14242                           	opt stack 0
 14243                           pclatu	equ	0xFFB
 14244                           pclath	equ	0xFFA
 14245                           tblptru	equ	0xFF8
 14246                           tblptrh	equ	0xFF7
 14247                           tblptrl	equ	0xFF6
 14248                           tablat	equ	0xFF5
 14249                           prodh	equ	0xFF4
 14250                           prodl	equ	0xFF3
 14251                           intcon	equ	0xFF2
 14252                           intcon2	equ	0xFF1
 14253                           intcon3	equ	0xFF0
 14254                           postinc0	equ	0xFEE
 14255                           fsr0h	equ	0xFEA
 14256                           fsr0l	equ	0xFE9
 14257                           wreg	equ	0xFE8
 14258                           postdec1	equ	0xFE5
 14259                           fsr1h	equ	0xFE2
 14260                           fsr1l	equ	0xFE1
 14261                           indf2	equ	0xFDF
 14262                           postinc2	equ	0xFDE
 14263                           postdec2	equ	0xFDD
 14264                           fsr2h	equ	0xFDA
 14265                           fsr2l	equ	0xFD9
 14266                           status	equ	0xFD8
 14267                           
 14268 ;; *************** function ___awdiv *****************
 14269 ;; Defined at:
 14270 ;;		line 8 in file "/Applications/microchip/xc8/v1.40/sources/common/awdiv.c"
 14271 ;; Parameters:    Size  Location     Type
 14272 ;;  dividend        2    6[COMRAM] int 
 14273 ;;  divisor         2    8[COMRAM] int 
 14274 ;; Auto vars:     Size  Location     Type
 14275 ;;  quotient        2   12[COMRAM] int 
 14276 ;;  sign            1   11[COMRAM] unsigned char 
 14277 ;;  counter         1   10[COMRAM] unsigned char 
 14278 ;; Return value:  Size  Location     Type
 14279 ;;                  2    6[COMRAM] int 
 14280 ;; Registers used:
 14281 ;;		wreg, status,2, status,0
 14282 ;; Tracked objects:
 14283 ;;		On entry : 0/0
 14284 ;;		On exit  : 0/0
 14285 ;;		Unchanged: 0/0
 14286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14287 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14288 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14290 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14291 ;;Total ram usage:        8 bytes
 14292 ;; Hardware stack levels used:    1
 14293 ;; This function calls:
 14294 ;;		Nothing
 14295 ;; This function is called by:
 14296 ;;		_dec_to_hex
 14297 ;;		_servo_rotate1
 14298 ;;		_servo_rotate2
 14299 ;; This function uses a non-reentrant model
 14300 ;;
 14301                           
 14302                           	psect	text66
 14303  002C68                     __ptext66:
 14304                           	opt stack 0
 14305  002C68                     ___awdiv:
 14306                           	opt stack 24
 14307                           
 14308                           ;incstack = 0
 14309  002C68  0E00               	movlw	0
 14310  002C6A  6E0C               	movwf	___awdiv@sign,c
 14311  002C6C  AE0A               	btfss	___awdiv@divisor+1,7,c
 14312  002C6E  D006               	goto	i2l4459
 14313  002C70  6C09               	negf	___awdiv@divisor,c
 14314  002C72  1E0A               	comf	___awdiv@divisor+1,f,c
 14315  002C74  B0D8               	btfsc	status,0,c
 14316  002C76  2A0A               	incf	___awdiv@divisor+1,f,c
 14317  002C78  0E01               	movlw	1
 14318  002C7A  6E0C               	movwf	___awdiv@sign,c
 14319  002C7C                     i2l4459:
 14320  002C7C  AE08               	btfss	___awdiv@dividend+1,7,c
 14321  002C7E  D006               	goto	i2l4465
 14322  002C80  6C07               	negf	___awdiv@dividend,c
 14323  002C82  1E08               	comf	___awdiv@dividend+1,f,c
 14324  002C84  B0D8               	btfsc	status,0,c
 14325  002C86  2A08               	incf	___awdiv@dividend+1,f,c
 14326  002C88  0E01               	movlw	1
 14327  002C8A  1A0C               	xorwf	___awdiv@sign,f,c
 14328  002C8C                     i2l4465:
 14329  002C8C  0E00               	movlw	0
 14330  002C8E  6E0E               	movwf	___awdiv@quotient+1,c
 14331  002C90  0E00               	movlw	0
 14332  002C92  6E0D               	movwf	___awdiv@quotient,c
 14333  002C94  5009               	movf	___awdiv@divisor,w,c
 14334  002C96  100A               	iorwf	___awdiv@divisor+1,w,c
 14335  002C98  B4D8               	btfsc	status,2,c
 14336  002C9A  D01C               	goto	i2l4487
 14337  002C9C  0E01               	movlw	1
 14338  002C9E  6E0B               	movwf	___awdiv@counter,c
 14339  002CA0  D004               	goto	i2l4473
 14340  002CA2                     i2l4471:
 14341  002CA2  90D8               	bcf	status,0,c
 14342  002CA4  3609               	rlcf	___awdiv@divisor,f,c
 14343  002CA6  360A               	rlcf	___awdiv@divisor+1,f,c
 14344  002CA8  2A0B               	incf	___awdiv@counter,f,c
 14345  002CAA                     i2l4473:
 14346  002CAA  AE0A               	btfss	___awdiv@divisor+1,7,c
 14347  002CAC  D7FA               	goto	i2l4471
 14348  002CAE                     i2l4475:
 14349  002CAE  90D8               	bcf	status,0,c
 14350  002CB0  360D               	rlcf	___awdiv@quotient,f,c
 14351  002CB2  360E               	rlcf	___awdiv@quotient+1,f,c
 14352  002CB4  5009               	movf	___awdiv@divisor,w,c
 14353  002CB6  5C07               	subwf	___awdiv@dividend,w,c
 14354  002CB8  500A               	movf	___awdiv@divisor+1,w,c
 14355  002CBA  5808               	subwfb	___awdiv@dividend+1,w,c
 14356  002CBC  A0D8               	btfss	status,0,c
 14357  002CBE  D005               	goto	i2l4483
 14358  002CC0  5009               	movf	___awdiv@divisor,w,c
 14359  002CC2  5E07               	subwf	___awdiv@dividend,f,c
 14360  002CC4  500A               	movf	___awdiv@divisor+1,w,c
 14361  002CC6  5A08               	subwfb	___awdiv@dividend+1,f,c
 14362  002CC8  800D               	bsf	___awdiv@quotient,0,c
 14363  002CCA                     i2l4483:
 14364  002CCA  90D8               	bcf	status,0,c
 14365  002CCC  320A               	rrcf	___awdiv@divisor+1,f,c
 14366  002CCE  3209               	rrcf	___awdiv@divisor,f,c
 14367  002CD0  2E0B               	decfsz	___awdiv@counter,f,c
 14368  002CD2  D7ED               	goto	i2l4475
 14369  002CD4                     i2l4487:
 14370  002CD4  500C               	movf	___awdiv@sign,w,c
 14371  002CD6  B4D8               	btfsc	status,2,c
 14372  002CD8  D004               	goto	i2l4491
 14373  002CDA  6C0D               	negf	___awdiv@quotient,c
 14374  002CDC  1E0E               	comf	___awdiv@quotient+1,f,c
 14375  002CDE  B0D8               	btfsc	status,0,c
 14376  002CE0  2A0E               	incf	___awdiv@quotient+1,f,c
 14377  002CE2                     i2l4491:
 14378  002CE2  C00D  F007         	movff	___awdiv@quotient,?___awdiv
 14379  002CE6  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
 14380  002CEA  0012               	return	
 14381  002CEC                     __end_of___awdiv:
 14382                           	opt stack 0
 14383                           pclatu	equ	0xFFB
 14384                           pclath	equ	0xFFA
 14385                           tblptru	equ	0xFF8
 14386                           tblptrh	equ	0xFF7
 14387                           tblptrl	equ	0xFF6
 14388                           tablat	equ	0xFF5
 14389                           prodh	equ	0xFF4
 14390                           prodl	equ	0xFF3
 14391                           intcon	equ	0xFF2
 14392                           intcon2	equ	0xFF1
 14393                           intcon3	equ	0xFF0
 14394                           postinc0	equ	0xFEE
 14395                           fsr0h	equ	0xFEA
 14396                           fsr0l	equ	0xFE9
 14397                           wreg	equ	0xFE8
 14398                           postdec1	equ	0xFE5
 14399                           fsr1h	equ	0xFE2
 14400                           fsr1l	equ	0xFE1
 14401                           indf2	equ	0xFDF
 14402                           postinc2	equ	0xFDE
 14403                           postdec2	equ	0xFDD
 14404                           fsr2h	equ	0xFDA
 14405                           fsr2l	equ	0xFD9
 14406                           status	equ	0xFD8
 14407                           pclatu	equ	0xFFB
 14408                           pclath	equ	0xFFA
 14409                           tblptru	equ	0xFF8
 14410                           tblptrh	equ	0xFF7
 14411                           tblptrl	equ	0xFF6
 14412                           tablat	equ	0xFF5
 14413                           prodh	equ	0xFF4
 14414                           prodl	equ	0xFF3
 14415                           intcon	equ	0xFF2
 14416                           intcon2	equ	0xFF1
 14417                           intcon3	equ	0xFF0
 14418                           postinc0	equ	0xFEE
 14419                           fsr0h	equ	0xFEA
 14420                           fsr0l	equ	0xFE9
 14421                           wreg	equ	0xFE8
 14422                           postdec1	equ	0xFE5
 14423                           fsr1h	equ	0xFE2
 14424                           fsr1l	equ	0xFE1
 14425                           indf2	equ	0xFDF
 14426                           postinc2	equ	0xFDE
 14427                           postdec2	equ	0xFDD
 14428                           fsr2h	equ	0xFDA
 14429                           fsr2l	equ	0xFD9
 14430                           status	equ	0xFD8
 14431                           
 14432                           	psect	rparam
 14433  0000                     pclatu	equ	0xFFB
 14434                           pclath	equ	0xFFA
 14435                           tblptru	equ	0xFF8
 14436                           tblptrh	equ	0xFF7
 14437                           tblptrl	equ	0xFF6
 14438                           tablat	equ	0xFF5
 14439                           prodh	equ	0xFF4
 14440                           prodl	equ	0xFF3
 14441                           intcon	equ	0xFF2
 14442                           intcon2	equ	0xFF1
 14443                           intcon3	equ	0xFF0
 14444                           postinc0	equ	0xFEE
 14445                           fsr0h	equ	0xFEA
 14446                           fsr0l	equ	0xFE9
 14447                           wreg	equ	0xFE8
 14448                           postdec1	equ	0xFE5
 14449                           fsr1h	equ	0xFE2
 14450                           fsr1l	equ	0xFE1
 14451                           indf2	equ	0xFDF
 14452                           postinc2	equ	0xFDE
 14453                           postdec2	equ	0xFDD
 14454                           fsr2h	equ	0xFDA
 14455                           fsr2l	equ	0xFD9
 14456                           status	equ	0xFD8
 14457                           
 14458                           	psect	temp
 14459  00007F                     btemp:
 14460                           	opt stack 0
 14461  00007F                     	ds	1
 14462  0000                     int$flags	set	btemp
 14463                           pclatu	equ	0xFFB
 14464                           pclath	equ	0xFFA
 14465                           tblptru	equ	0xFF8
 14466                           tblptrh	equ	0xFF7
 14467                           tblptrl	equ	0xFF6
 14468                           tablat	equ	0xFF5
 14469                           prodh	equ	0xFF4
 14470                           prodl	equ	0xFF3
 14471                           intcon	equ	0xFF2
 14472                           intcon2	equ	0xFF1
 14473                           intcon3	equ	0xFF0
 14474                           postinc0	equ	0xFEE
 14475                           fsr0h	equ	0xFEA
 14476                           fsr0l	equ	0xFE9
 14477                           wreg	equ	0xFE8
 14478                           postdec1	equ	0xFE5
 14479                           fsr1h	equ	0xFE2
 14480                           fsr1l	equ	0xFE1
 14481                           indf2	equ	0xFDF
 14482                           postinc2	equ	0xFDE
 14483                           postdec2	equ	0xFDD
 14484                           fsr2h	equ	0xFDA
 14485                           fsr2l	equ	0xFD9
 14486                           status	equ	0xFD8


Data Sizes:
    Strings     521
    Constant    111
    Data        4
    BSS         71
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126    117     126
    BANK0           128     67     111
    BANK1           256      2      24
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    eval_poly@d	PTR const  size(2) Largest target is 30
		 -> log@coeff(CODE[27]), exp@coeff(CODE[30]), 

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> log@exponent(COMRAM[2]), floor@expon(COMRAM[2]), 

    printf$748	PTR const unsigned char  size(2) Largest target is 17
		 -> STR_45(CODE[17]), STR_44(CODE[17]), 

    printf@cp	PTR const unsigned char  size(2) Largest target is 1
		 -> printf@c(BANK0[1]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 25
		 -> STR_43(CODE[18]), STR_42(CODE[18]), STR_41(CODE[18]), STR_40(CODE[25]), 
		 -> STR_39(CODE[25]), STR_38(CODE[25]), STR_37(CODE[24]), STR_36(CODE[23]), 
		 -> STR_35(CODE[18]), STR_34(CODE[18]), STR_33(CODE[10]), STR_32(CODE[18]), 
		 -> STR_31(CODE[18]), STR_30(CODE[18]), STR_29(CODE[18]), STR_28(CODE[18]), 
		 -> STR_27(CODE[18]), STR_26(CODE[18]), STR_25(CODE[18]), STR_24(CODE[18]), 
		 -> STR_23(CODE[18]), STR_22(CODE[18]), STR_21(CODE[18]), STR_20(CODE[18]), 
		 -> STR_19(CODE[18]), STR_18(CODE[18]), STR_17(CODE[18]), STR_16(CODE[18]), 
		 -> STR_15(CODE[18]), STR_14(CODE[10]), STR_13(CODE[18]), STR_12(CODE[18]), 
		 -> STR_11(CODE[18]), STR_10(CODE[18]), STR_9(CODE[17]), STR_8(CODE[17]), 
		 -> STR_7(CODE[21]), STR_6(CODE[21]), STR_5(CODE[16]), STR_4(CODE[15]), 
		 -> STR_3(CODE[15]), STR_2(CODE[13]), STR_1(CODE[13]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?i2_printf(COMRAM[2]), ?_printf(BANK0[2]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _isr in COMRAM

    _isr->_dec_to_hex
    i2_printf->i2___lwmod
    i2_putch->i2_lcdNibble
    i2___lwmod->i2___lwdiv
    i2_lcdInst->i2_lcdNibble
    _servo_rotate2->___awdiv
    _servo_rotate1->___awdiv
    _read_time->i2_I2C_Master_Read
    _read_time->i2_I2C_Master_Write
    i2_I2C_Master_Write->i2_I2C_Master_Wait
    i2_I2C_Master_Stop->i2_I2C_Master_Wait
    i2_I2C_Master_Start->i2_I2C_Master_Wait
    i2_I2C_Master_Read->i2_I2C_Master_Wait
    _dec_to_hex->_pow
    _pow->_exp
    _log->_eval_poly
    _exp->_floor
    _ldexp->_eval_poly
    _floor->___altoft
    ___fttol->___ftadd
    ___altoft->___fttol
    _eval_poly->___ftadd
    ___ftmul->___awtoft
    ___ftsub->___ftadd
    ___ftadd->___ftmul
    ___ftdiv->___ftpack
    ___awtoft->___ftpack
    ___lltoft->___ftpack
    ___awdiv->i2___wmul

Critical Paths under _main in BANK0

    _main->_operation
    _standby->_printf
    _getRTC->_I2C_Master_Read
    _getRTC->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _I2C_Master_Read->_I2C_Master_Wait
    _operationend->_printf
    _operation->_printf
    _initLCD->_lcdInst
    _emergencystop->_printf
    _display_log->_printf
    _bottle_time->_printf
    _bottle_count->_printf
    _printf->___lwmod
    _putch->_lcdNibble
    ___lwmod->___lwdiv
    _lcdInst->_lcdNibble
    _I2C_Master_Init->___lldiv

Critical Paths under _isr in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _isr in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _isr in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _isr in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _isr in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _isr in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _isr in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _isr in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _isr in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _isr in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   52381
                                              0 BANK1      2     2      0
                    _I2C_Master_Init
                       _bottle_count
                        _bottle_time
                        _display_log
                      _emergencystop
                            _initLCD
                          _operation
                       _operationend
                            _standby
 ---------------------------------------------------------------------------------
 (1) _standby                                              0     0      0    8124
                             _getRTC
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _getRTC                                               1     1      0    1017
                                             19 BANK0      1     1      0
                    _I2C_Master_Read
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     904
                                             17 BANK0      2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Read                                      2     2      0      45
                                             17 BANK0      2     2      0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             16 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _operationend                                         0     0      0    7107
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _operation                                            2     2      0    7107
                                             65 BANK0      2     2      0
                            _lcdInst
                             _printf
                        _read_sensor
 ---------------------------------------------------------------------------------
 (2) _read_sensor                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     135
                                             19 BANK0      1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _emergencystop                                        0     0      0    7107
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _display_log                                          0     0      0    7659
                            ___awmod
                           _keycheck
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _keycheck                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _bottle_time                                          0     0      0    7107
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (1) _bottle_count                                         0     0      0    7659
                            ___awmod
                            _lcdInst
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              41    29     12    6972
                                             28 BANK0     37    25     12
                            ___lwdiv
                            ___lwmod
                             ___wmul
                            _isdigit
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (3) _isdigit                                              3     3      0      68
                                             16 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     897
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     287
                                             23 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     546
                                             16 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) _lcdInst                                              1     1      0     135
                                             18 BANK0      1     1      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     113
                                             16 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___awmod                                              6     2      4     552
                                             16 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (1) _I2C_Master_Init                                      8     4      4     376
                                             29 BANK0      8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     290
                                             16 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _isr                                                 25    25      0   79637
                                            114 COMRAM     3     3      0
                                              0 BANK0     16    16      0
                         _dec_to_hex
                          _read_time
                      _servo_rotate0
                      _servo_rotate1
                      _servo_rotate2
                           i2___wmul
                          i2_lcdInst
                           i2_printf
                      i2_read_sensor
 ---------------------------------------------------------------------------------
 (6) i2_read_sensor                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (6) i2_printf                                            31    29      2    3798
                                             12 COMRAM    27    25      2
                          i2___lwdiv
                          i2___lwmod
                           i2___wmul
                          i2_isdigit
                            i2_putch
 ---------------------------------------------------------------------------------
 (7) i2_putch                                              1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (7) i2_isdigit                                            3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (7) i2___lwmod                                            5     1      4     211
                                              7 COMRAM     5     1      4
                          i2___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (7) i2___lwdiv                                            7     3      4     318
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (6) i2_lcdInst                                            1     1      0     135
                                              2 COMRAM     1     1      0
                        i2_lcdNibble
 ---------------------------------------------------------------------------------
 (8) i2_lcdNibble                                          2     2      0     113
                                              0 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 (6) _servo_rotate2                                       10     8      2    1726
                                             14 COMRAM    10     8      2
                            ___awdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) _servo_rotate1                                       10     8      2    1726
                                             14 COMRAM    10     8      2
                            ___awdiv
                           i2___wmul
 ---------------------------------------------------------------------------------
 (6) _servo_rotate0                                       10     8      2     801
                                              0 COMRAM    10     8      2
 ---------------------------------------------------------------------------------
 (6) _read_time                                            1     1      0     213
                                              3 COMRAM     1     1      0
                  i2_I2C_Master_Read
                 i2_I2C_Master_Start
                  i2_I2C_Master_Stop
                 i2_I2C_Master_Write
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Write                                   2     0      2     100
                                              1 COMRAM     2     0      2
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Stop                                    0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Start                                   0     0      0       0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (7) i2_I2C_Master_Read                                    2     2      0      45
                                              1 COMRAM     2     2      0
                  i2_I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (8) i2_I2C_Master_Wait                                    1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (6) _dec_to_hex                                          16    14      2   70199
                                             98 COMRAM    16    14      2
                            ___awdiv
                           ___awtoft
                            ___ftadd
                            ___ftmul
                            ___fttol
                                _pow
 ---------------------------------------------------------------------------------
 (7) _pow                                                 17    11      6   58403
                                             81 COMRAM    17    11      6
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___fttol
                           ___lltoft
                                _exp
                                _log
 ---------------------------------------------------------------------------------
 (8) _log                                                  5     2      3   19114
                                             51 COMRAM     5     2      3
                           ___awtoft
                            ___ftadd
                            ___ftmul
                          _eval_poly
                              _frexp
 ---------------------------------------------------------------------------------
 (8) _exp                                                  9     6      3   31682
                                             72 COMRAM     9     6      3
                           ___awtoft
                            ___ftdiv
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                          _eval_poly
                              _floor
                              _ldexp
 ---------------------------------------------------------------------------------
 (9) _ldexp                                                7     2      5     376
                                             51 COMRAM     7     2      5
                          _eval_poly (ARG)
 ---------------------------------------------------------------------------------
 (9) _floor                                                8     5      3    8159
                                             64 COMRAM     8     5      3
                           ___altoft
                            ___ftadd
                             ___ftge
                            ___fttol
                              _frexp
 ---------------------------------------------------------------------------------
 (9) _frexp                                                7     2      5     480
                                              0 COMRAM     7     2      5
 ---------------------------------------------------------------------------------
 (10) ___fttol                                            15    11      4     508
                                             39 COMRAM    15    11      4
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftmul (ARG)
 ---------------------------------------------------------------------------------
 (10) ___ftge                                              9     3      6     648
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) ___altoft                                           10     6      4    2350
                                             54 COMRAM    10     6      4
                           ___ftpack
                            ___fttol (ARG)
 ---------------------------------------------------------------------------------
 (9) _eval_poly                                           12     5      7    8491
                                             39 COMRAM    12     5      7
                            ___ftadd
                            ___ftmul
                           i2___wmul
 ---------------------------------------------------------------------------------
 (7) i2___wmul                                             6     2      4     625
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (10) ___ftmul                                            15     9      6    3446
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftsub                                              6     0      6    4155
                                             39 COMRAM     6     0      6
                           ___awtoft (ARG)
                            ___ftadd
 ---------------------------------------------------------------------------------
 (10) ___ftadd                                            12     6      6    3858
                                             27 COMRAM    12     6      6
                           ___awtoft (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                              _frexp (ARG)
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 (9) ___ftneg                                              3     0      3     237
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (9) ___ftdiv                                             15     9      6    2658
                                              8 COMRAM    15     9      6
                           ___ftpack
 ---------------------------------------------------------------------------------
 (9) ___awtoft                                             4     1      3    2559
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (8) ___lltoft                                             9     5      4    2281
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (11) ___ftpack                                            8     3      5    2148
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (7) ___awdiv                                              8     4      4     684
                                              6 COMRAM     8     4      4
                           i2___wmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Master_Init
     ___lldiv
   _bottle_count
     ___awmod
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _bottle_time
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _display_log
     ___awmod
     _keycheck
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _emergencystop
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _initLCD
     _lcdInst
       _lcdNibble
   _operation
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
     _read_sensor
   _operationend
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble
   _standby
     _getRTC
       _I2C_Master_Read
         _I2C_Master_Wait
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
     _lcdInst
       _lcdNibble
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       ___wmul
       _isdigit
       _putch
         _lcdNibble

 _isr (ROOT)
   _dec_to_hex
     ___awdiv
       i2___wmul (ARG)
     ___awtoft
       ___ftpack
     ___ftadd
       ___awtoft (ARG)
         ___ftpack
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftpack (ARG)
       _frexp (ARG)
       i2___wmul (ARG)
     ___ftmul
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _frexp (ARG)
     ___fttol
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftpack (ARG)
         _frexp (ARG)
         i2___wmul (ARG)
       ___ftmul (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
     _pow
       ___ftge
       ___ftmul
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _frexp (ARG)
       ___ftneg
       ___fttol
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
       ___lltoft
         ___ftpack
       _exp
         ___awtoft
           ___ftpack
         ___ftdiv
           ___ftpack
         ___ftge
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         ___ftneg
         ___ftsub
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
         ___fttol
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _floor
           ___altoft
             ___ftpack
             ___fttol (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftadd (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftmul (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _frexp (ARG)
                 ___ftpack (ARG)
                 _frexp (ARG)
                 i2___wmul (ARG)
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftge
           ___fttol
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
           _frexp
         _ldexp
           _eval_poly (ARG)
             ___ftadd
               ___awtoft (ARG)
                 ___ftpack
               ___ftmul (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _frexp (ARG)
               ___ftpack (ARG)
               _frexp (ARG)
               i2___wmul (ARG)
             ___ftmul
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             i2___wmul
       _log
         ___awtoft
           ___ftpack
         ___ftadd
           ___awtoft (ARG)
             ___ftpack
           ___ftmul (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           ___ftpack (ARG)
           _frexp (ARG)
           i2___wmul (ARG)
         ___ftmul
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _frexp (ARG)
         _eval_poly
           ___ftadd
             ___awtoft (ARG)
               ___ftpack
             ___ftmul (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _frexp (ARG)
             ___ftpack (ARG)
             _frexp (ARG)
             i2___wmul (ARG)
           ___ftmul
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _frexp (ARG)
           i2___wmul
         _frexp
   _read_time
     i2_I2C_Master_Read
       i2_I2C_Master_Wait
     i2_I2C_Master_Start
       i2_I2C_Master_Wait
     i2_I2C_Master_Stop
       i2_I2C_Master_Wait
     i2_I2C_Master_Write
       i2_I2C_Master_Wait
   _servo_rotate0
   _servo_rotate1
     ___awdiv
       i2___wmul (ARG)
     i2___wmul
   _servo_rotate2
     ___awdiv
       i2___wmul (ARG)
     i2___wmul
   i2___wmul
   i2_lcdInst
     i2_lcdNibble
   i2_printf
     i2___lwdiv
     i2___lwmod
       i2___lwdiv (ARG)
     i2___wmul
     i2_isdigit
     i2_putch
       i2_lcdNibble
   i2_read_sensor

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      2      18       7        9.4%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     43      6F       5       86.7%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     75      7E       1      100.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     105      34        0.0%
DATA                 0      0     105       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Wed Mar  1 06:13:36 2017

             _SOUP_LBL_count 00CE                 ___altoft@exp 003F           i2_I2C_Master_Start 34C0  
         i2_I2C_Master_Write 349E                ___altoft@sign 0040                           l34 3422  
               ?_display_log 0001               ?_emergencystop 0001                 ___awdiv@sign 000C  
        ___wmul@multiplicand 0092           i2___lwdiv@dividend 0001                  __CFG_BORV$3 000000  
           _POPCAN_TAB_count 00CC                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
               ___ftadd@exp1 0027                 ___ftadd@exp2 0026                 ___ftadd@sign 0025  
                        l403 33EA                          l354 3436                          l357 3442  
                        l562 0772                          l546 0696                          l492 0204  
                        l944 27EE                          _GIE 007F97                          l997 2D5A  
               __CFG_CPB$OFF 000000                          _PEN 007E2A                 __CFG_CPD$OFF 000000  
                        _SEN 007E28                          _PSA 007EAB          ?i2_I2C_Master_Start 0001  
        ?i2_I2C_Master_Write 0002                          _exp 17F6                          _log 1D00  
                        _isr 0008                          _pow 1B8A                 ___awmod@sign 0095  
                        prod 000FF3                          wreg 000FE8                 ?_bottle_time 0001  
               __CFG_LVP$OFF 000000             _SOUP_NOLBL_COUNT 00D0                 ___ftdiv@cntr 0012  
         _POPCAN_NOTAB_count 00CA                 ___ftdiv@sign 0017                 __CFG_WDT$OFF 000000  
                       l1007 2F74                         l4101 0098                         l4121 0160  
                       l4105 00B6                         l4113 012E                         l4301 065E  
                       l4205 03BC                         l4133 01AE                         l4141 01F2  
                       l4311 06A4                         l4303 0668                         l4231 0434  
                       l4215 03F2                         l4143 01FA                         l4135 01B6  
                       l4217 03F8                         l4209 03D6                         l4153 0242  
                       l4145 0200                         l4081 0022                         l4323 0702  
                       l4243 046A                         l4163 027A                         l4171 02AC  
                       l4147 020A                         l4139 01DC                         l4091 005A  
                       l4333 0730                         l4245 0470                         l4229 042E  
                       l4261 04C4                         l4165 0280                         l4157 0268  
                       l4093 0060                         l4085 0038                         l4405 2E42  
                       l4511 2A56                         l4503 2A32                         l4343 077E  
                       l4319 06F0                         l4183 0300                         l4175 02CA  
                       l4167 0298                         l4159 0272                         l4191 0320  
                       l4087 004E                         l4513 2A62                         l4361 0862  
                       l4337 074A                         l4329 071E                         l4281 056E  
                       l4265 04E2                         l4177 02D0                         l4193 036A  
                       l4089 0054                         l4097 006A                         l4515 2A68  
                       l4523 2A9A                         l4507 2A42                         l4371 08DC  
                       l4355 0808                         l4347 07BC                         l4283 0578  
                       l4275 0530                         l4259 04A6                         l4187 0318  
                       l4179 02E8                         l4541 2788                         l4269 04FC  
                       l4527 2AAE                         l4519 2A8C                         l4383 0960  
                       l4367 08A6                         l4359 081C                         l4375 0914  
                       l4295 061C                         l4703 2378                         l4711 2398  
                       l3911 3328                         l4537 2772                         l4377 0932  
                       l4297 0626                         l4289 05C4                         l4713 23CC  
                       l4539 2782                         l4379 093A                         l4387 097A  
                       l4707 238E                         l4395 2E18                         l4549 27DC  
                       l4733 1E20                         l4813 1706                         l4751 1ED2  
                       l4399 2E22                         l3929 3350                         l4745 1E94  
                       l4833 179E                         l3955 2D0A                         l4739 1E56  
                       l4691 2344                         ?_exp 0049                         l3957 2D16  
                       l4757 1EF2                         l4773 15DC                         l4685 2324  
                       ?_log 0034                         l3967 2D4C                         l3959 2D1C  
                       l3983 2F66                         l3975 2F30                         l4839 17BE  
                       l4679 2304                         l5671 20A4                         l3977 2F3C  
                       l4793 166E                         l4697 2360                         l5681 20C2  
                       l5673 20AA                         _ADFM 007E07                         l3979 2F42  
                       l5683 20C8                         l5675 20B0                         ?_isr 0001  
                       l5677 20B6                         l5679 20BC                         l5687 20CE  
                       l5689 20FC                         ?_pow 0052                         STR_1 FFE8  
                       STR_2 FFE8                         STR_3 FFCA                         STR_4 FFD9  
                       STR_5 FFBA                         STR_6 FE3E                         STR_7 FE53  
                       STR_8 FFA9                         STR_9 FF98                         _T0CS 007EAD  
                       _LATA 000F89                         _LATB 000F8A                         _LATC 000F8B  
                       _LATD 000F8C                         _LATE 000F8D                         u4120 0610  
                       u3510 3326                         u4271 07F0                         u4705 300E  
                       _RCEN 007E2B                         u5607 210A                         u5617 3146  
                       i2l34 344A                         u5627 3182                         u5637 2F9E  
                       u5647 2FA6                         u5657 2FD0                         u5667 2FD8  
                       _TMR0 000FD6                         _RSEN 007E29                         _data 00D6  
                       _main 2026                 ___ftpack@arg 0001                         _keys FD87  
               ___ftpack@exp 0004                         _time 00C3                         fsr0h 000FEA  
                       fsr1h 000FE2           i2___lwdiv@quotient 0005                         fsr2h 000FDA  
                       fsr0l 000FE9                         indf2 000FDF                         fsr1l 000FE1  
                       fsr2l 000FD9                         btemp 007F                         exp@x 0049  
                       log@x 0034                         isr@i 0073         ??i2_I2C_Master_Start 0002  
       ??i2_I2C_Master_Write 0004                         pow@x 0052                         pow@y 0055  
                       prodh 000FF4                         prodl 000FF3                         start 000E  
              __CFG_IESO$OFF 000000              __end_ofi2_putch 3488                __CFG_MCLRE$ON 000000  
               ___ftmul@cntr 001A                 ___param_bank 000000                 ___ftmul@sign 001B  
                i2_lcdNibble 318E                ?_bottle_count 0001                 ___fttol@exp1 0036  
                      ??_exp 004C                        ??_log 0037                 ___fttol@lval 0032  
                      ??_isr 0080                        ??_pow 0058                _eskacap_count 00DC  
           ?_I2C_Master_Init 009D             ?_I2C_Master_Read 0001             ?_I2C_Master_Wait 0001  
           ?_I2C_Master_Stop 0001                        ?_main 0001                        _ACKEN 007E2C  
                      _ACKDT 007E2D              __end_of___awdiv 2CEC              __end_of___ftadd 1B8A  
                      STR_10 FE7A                        STR_11 FED4                        STR_12 FEC2  
                      STR_20 FE9E                        STR_13 FF52                        STR_21 FF2E  
                      STR_22 FE8C                        STR_30 FEB0                        STR_14 FFF5  
                      STR_23 FF2E                        STR_31 FF40                        STR_15 FF1C  
                      STR_40 FDF6                        STR_32 FE9E                        STR_24 FEB0  
                      STR_16 FE8C                        STR_17 FF1C                        STR_25 FF2E  
                      STR_33 FFF5                        STR_41 FEF8                        STR_26 FE9E  
                      STR_34 FF0A                        STR_42 FEE6                        STR_18 FEB0  
                      STR_19 FF1C                        STR_43 FF64                        STR_27 FF40  
                      STR_35 FE68                        STR_28 FE8C                        STR_44 FF76  
                      STR_36 FE27              __end_of___awmod 2AB8                        STR_29 FF40  
                      STR_45 FF87                        STR_37 FE0F                        STR_38 FDF6  
                      STR_39 FDF6              __end_of___ftdiv 24CE              __end_of___ftneg 33CA  
            __end_of___lldiv 2800              __end_of___ftmul 2302              ___awdiv@divisor 0009  
            __end_of___ftsub 325E              __end_of___fttol 220E                        _T0PS0 007EA8  
                      _T0PS1 007EA9                        _T0PS2 007EAA              __end_of___lwdiv 2D64  
            __end_of___lwmod 2F7E                        i2l302 14B0                        i2l303 14AC  
                      i2l322 159E                        i2l411 2AF2                        i2l414 2B1C  
                      i2l422 2918                        i2l417 2B46                        i2l425 293C  
                      i2l433 2864                        i2l283 131E                        i2l428 2966  
                      i2l436 2888                        i2l293 11F2                        i2l285 1144  
                      i2l294 11FC                        i2l286 131A                        i2l439 28B2  
                      i2l295 12B2                        i2l287 1160                        i2l562 0F44  
                      i2l546 0EA2                        i2l299 134A                        i2l492 0B32  
                      i2l814 29F6                        i2l841 1A4C                        i2l852 1AFC  
                      i2l861 1B18                        i2l837 1A22                        i2l872 249C  
            ___awdiv@counter 000B                        i2l894 33BC                        i2l997 3134  
                      _PORTB 000F81                        _TRISA 000F92                        _TRISB 000F93  
                      _TRISC 000F94                        _TRISD 000F95                        _TRISE 000F96  
            ??_servo_rotate0 0003              ??_servo_rotate1 0011              ??_servo_rotate2 0011  
              __CFG_PWRT$OFF 000000                __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000  
              __CFG_WRT2$OFF 000000                __CFG_WRT3$OFF 000000                 ___lltoft@exp 0011  
            __end_of_lcdInst 347C               __CFG_EBTR0$OFF 000000               __CFG_FCMEN$OFF 000000  
             __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000               __CFG_EBTR3$OFF 000000  
                      _nRBPU 007F8F                __CFG_WRTB$OFF 000000                __CFG_WRTC$OFF 000000  
              __CFG_WRTD$OFF 000000              __end_of_initLCD 318E               __CFG_EBTRB$OFF 000000  
                 i2isdigit@c 0003                ___awtoft@sign 000C              __end_of_dpowers FDAE  
                      _floor 24CE                 ?_read_sensor 0001                        _etime 0078  
                      _ldexp 267E                        _frexp 2B48                        _errno 00D8  
            __end_of_isdigit 335A                ___ftpack@sign 0005                        _putch 345C  
                      _stime 007C                        pclath 000FFA                        tablat 000FF5  
              _eskalbl_count 00E0                        pow@yi 005F             __end_ofi2___wmul 33A6  
            __end_of_standby 2F1C                        status 000FD8               __CFG_PBADEN$ON 000000  
              i2printf@width 0023                  exp@exponent 004F             __end_ofi2_printf 1104  
         __size_ofi2___lwdiv 0052           __size_ofi2___lwmod 0042                  ldexp@newexp 0037  
            __initialization 309A                  log@exponent 0037           __size_ofi2_lcdInst 000C  
            ??_emergencystop 00C1               ??_bottle_count 00C1                 __end_of_main 211A  
               __end_of_keys FD98                   i2printf@ap 001E                   i2printf@cp 0014  
         __size_ofi2_isdigit 001E                       ??_main 0116                ___fttol@sign1 0031  
              __activetblptr 000002            ?_I2C_Master_Start 0001            ?_I2C_Master_Write 0091  
             servo_rotate0@i 0007               servo_rotate0@j 0009               servo_rotate1@i 0015  
             servo_rotate1@j 0017               servo_rotate2@i 0015               servo_rotate2@j 0017  
         ??_I2C_Master_Start 0091                       _ADCON0 000FC2                       _ADCON1 000FC1  
         ??_I2C_Master_Write 0093                       ?_floor 0041                       ?_ldexp 0034  
                     ?_frexp 0001             __end_of___altoft 2DDC                       _T08BIT 007EAE  
           ___awdiv@dividend 0007              i2lcdNibble@data 0002             __end_of___awtoft 3296  
                     ?_putch 0001             __end_of___ftpack 2A16              i2lcdNibble@temp 0001  
           __end_of___lltoft 309A                       _INT0IE 007F94                       _INT0IF 007F91  
                     _INT1IE 007F83                       _INT1IF 007F80                       _INT2IE 007F84  
                     _INT2IF 007F81                       _CVRCON 000FB5                       i2l1007 3214  
                     i2l1034 1CF2                       i2l1203 259E                       i2l1029 1BC2  
                     i2l1192 18AC                       i2l1193 19D0                       i2l4021 1846  
                     i2l4015 180E                       i2l5001 0AA8                       i2l4027 187E  
                     i2l5013 0AEC                       i2l5021 0B26                       i2l5111 0CE6  
                     i2l5023 0B2C                       i2l5015 0AF2                       i2l3601 2236  
                     i2l4049 19A6                       i2l5033 0B5C                       i2l5025 0B30  
                     i2l5203 0EF4                       i2l5123 0D12                       i2l5043 0B80  
                     i2l5051 0BAA                       i2l5027 0B36                       i2l5019 0B10  
                     i2l3533 1A30                       i2l3621 2290                       i2l3517 2D86  
                     i2l5213 0F14                       i2l5125 0D16                       i2l5109 0CE2  
                     i2l5141 0D5E                       i2l5045 0B86                       i2l5037 0B72  
                     i2l3631 22B8                       i2l3607 225E                       i2l3519 2D92  
                     i2l3703 21FC                       i2l4431 1C4C                       i2l4423 1BE8  
                     i2l5223 0F4E                       i2l5063 0BEC                       i2l5055 0BC0  
                     i2l5047 0B98                       i2l5039 0B7A                       i2l5071 0C04  
                     i2l3481 2986                       i2l3561 1AAC                       i2l3625 22A0  
                     i2l4417 1BD0                       i2l4601 3102                       i2l5241 1004  
                     i2l5217 0F28                       i2l5209 0F0A                       i2l5161 0DD0  
                     i2l5145 0D74                       i2l5057 0BC6                       i2l5073 0C4A  
                     i2l5401 12D4                       i2l3491 29E2                       i2l3483 2990  
                     i2l3563 1AB6                       i2l3555 1A8A                       i2l3539 1A5A  
                     i2l3635 22C8                       i2l3651 2C38                       i2l3715 2B70  
                     i2l4435 1C6E                       i2l4603 310A                       i2l5251 106A  
                     i2l5235 0FB4                       i2l5227 0F7C                       i2l5163 0DD8  
                     i2l5155 0DA8                       i2l5139 0D42                       i2l5067 0BFE  
                     i2l5059 0BD8                       i2l3493 29EC                       i2l3485 29AE  
                     i2l3477 2978                       i2l3581 1B34                       i2l3573 1AEA  
                     i2l3565 1AC0                       i2l3805 3234                       i2l4613 312A  
                     i2l4605 310E                       i2l4621 31EA                       i2l5181 0E7A  
                     i2l5149 0D86                       i2l5085 0C88                       i2l5421 1366  
                     i2l5413 1346                       i2l5405 12E2                       i2l4471 2CA2  
                     i2l3591 1B64                       i2l3575 1AF4                       i2l3567 1AC8  
                     i2l3647 2C08                       i2l4623 31F2                       i2l5263 10D6  
                     i2l5247 103E                       i2l5239 0FC4                       i2l5255 109C  
                     i2l5191 0EAE                       i2l5183 0E82                       i2l5175 0E4E  
                     i2l5095 0CB2                       i2l5503 1580                       i2l4473 2CAA  
                     i2l4465 2C8C                       i2l3489 29C4                       i2l3817 3272  
                     i2l3761 2410                       i2l3657 2C64                       i2l4625 31F6  
                     i2l5257 10B8                       i2l5177 0E56                       i2l5169 0E0E  
                     i2l5097 0CB6                       i2l5089 0CA0                       i2l5433 13A6  
                     i2l5361 11AC                       i2l4491 2CE2                       i2l4483 2CCA  
                     i2l4475 2CAE                       i2l4459 2C7C                       i2l3851 25EC  
                     i2l3667 2146                       i2l3843 2524                       i2l3835 24FC  
                     i2l5259 10BE                       i2l5267 10EA                       i2l5507 1588  
                     i2l5451 1406                       i2l5427 1386                       i2l3941 3044  
                     u312_41 221E                       i2l3853 2668                       i2l3685 21AC  
                     i2l3861 2696                       i2l4573 337A                       i2l4629 320A  
                     i2l5445 13E6                       i2l5365 11B8                       i2l4487 2CD4  
                     i2l3943 3050                       i2l3767 2438                       i2l3695 21D4  
                     i2l3839 250A                       i2l4591 3402                       i2l5199 0EE6  
                     i2l5463 1446                       i2l5439 13C6                       i2l5471 1466  
                     i2l5367 11C2                       i2l3697 21E0                       i2l3689 21BC  
                     i2l3881 2700                       i2l4921 287C                       i2l5457 1426  
                     i2l3787 2476                       i2l3699 21E6                       i2l4915 2858  
                     u321_41 212A                       i2l3885 270C                       i2l3869 26DC  
                     i2l4853 2E8E                       i2l4933 28F4                       i2l4909 2840  
                     i2l5399 12C6                       i2l3993 1D1C                       i2l4849 2E86  
                     i2l4945 2930                       i2l4961 09A4                       i2l5497 156A  
                     i2l4867 1F44                       i2l4859 2EAA                       i2l4891 2AE0  
                     i2l4939 290C                       i2l4971 09CE                       u314_41 2246  
                     i2l4885 2AC8                       i2l4973 09D2                       i2l4965 09B4  
                     i2l3999 1D3E                       i2l4879 2014                       i2l4967 09C6  
                     i2l4897 2B0A                       i2l4985 0A1C                       i2l4993 0A7A  
                     i2l4969 09CA                       i2l4977 09D8                       u333_41 23F8  
                     u335_41 2420                       u291_41 19EE                       u292_41 1A02  
                     _OSCCON 000FD3                       _TMR0IE 007F95                       _TMR0IF 007F92  
                  ??i2_putch 0003                       _TMR0ON 007EAF                       _SSPADD 000FC8  
                     _TRISC3 007CA3                       _TRISC4 007CA4                       _SSPBUF 000FC9  
             __CFG_XINST$OFF 000000                       ___ftge 2BD8                       ___wmul 32CC  
                  ??___awdiv 000B                    ??___ftadd 0022               __CFG_STVREN$ON 000000  
                  ??___awmod 0094                    ??___ftdiv 000F                    ??___ftneg 0004  
                     _getRTC 2DDC                    ??___lldiv 0098                    ??___ftmul 0013  
                  ??___ftsub 002E                    ??___fttol 002C                    ??___lwdiv 0094  
                  ??___lwmod 009B                dec_to_hex@num 0063             __end_of_keycheck 344A  
                     clear_0 30C0                       clear_1 30CC                       clear_2 30D8  
           ___awdiv@quotient 000D              ___awmod@divisor 0092              ___awmod@counter 0094  
                  ??_lcdInst 0092                       _printf 0012         __size_of_display_log 021C  
                     floor@i 0044                       floor@x 0041        ___ftmul@f3_as_product 0017  
                  ??_initLCD 0093                    ??_isdigit 0090            __end_ofi2___lwdiv 313E  
               __mediumconst FD86            __end_ofi2___lwmod 321E                       tblptrh 000FF7  
                     tblptrl 000FF6                       tblptru 000FF8                    ??_standby 00C1  
          __end_ofi2_lcdInst 3494            __end_ofi2_isdigit 340A             __end_ofexp@coeff FDDB  
       __size_of_bottle_time 0036             __end_oflog@coeff FDF6                   __accesstop 0080  
    __end_of__initialization 30DE                   ___altoft@c 0037                   ___ftadd@f1 001C  
                 ___ftadd@f2 001F                   ___ftge@ff1 0001                   ___ftge@ff2 0004  
               eval_poly@res 0031                ___rparam_used 000001                   ___ftdiv@f1 0009  
                 ___ftdiv@f2 000C                   ___ftdiv@f3 0013                   ___ftneg@f1 0001  
                 ___awtoft@c 0009                   ___ftmul@f1 000D                   ___ftmul@f2 0010  
                 ___ftsub@f1 0028                   ___ftsub@f2 002B                   ___fttol@f1 0028  
         i2___lwmod@dividend 0008               __pcstackCOMRAM 0001                 __pidataBANK0 34C8  
                 ___lltoft@c 0009                __end_of_floor 25AC                __end_of_ldexp 2744  
              __end_of_frexp 2BD8                __end_of_putch 346C                 i2_printf$741 0016  
               i2_printf$742 0018                 i2_printf$748 001A                  i2printf@idx 0013  
                i2printf@len 001C                  i2printf@val 0020          servo_rotate0@degree 0001  
        servo_rotate1@degree 000F          servo_rotate2@degree 000F                    ?i2___wmul 0001  
         __size_of_lcdNibble 0060                  i2putch@data 0003                    ?i2_printf 000D  
                    ??_floor 0044                      ??_ldexp 0039                      ??_frexp 0006  
       __end_of_bottle_count 1F2A                   _dec_to_hex 1F2A                      ??_putch 0092  
                 __pbssBANK0 00C3                   __pbssBANK1 0100           __size_of_eval_poly 00D2  
       __size_of_read_sensor 0002            servo_rotate0@duty 0005            servo_rotate1@duty 0013  
          servo_rotate2@duty 0013           __size_of_read_time 0068                      ?___ftge 0001  
               ?i2_lcdNibble 0001                      ?___wmul 0090                      ?_getRTC 0001  
                  ?___altoft 0037       __size_ofi2_read_sensor 0002                    ?___awtoft 0009  
                  ?___ftpack 0001                      ?_printf 009C           __size_of_operation 00E6  
                  ?___lltoft 0009                   ??i2___wmul 0005                   ??i2_printf 000F  
                    _SSPCON1 000FC6                      _SSPCON2 000FC5                      _SSPSTAT 000FC7  
                 _eska_count 00DA                      i2_putch 347C                    ?_keycheck 0001  
__size_ofi2_I2C_Master_Start 0008            __end_of_lcdNibble 2FDE  __size_ofi2_I2C_Master_Write 000A  
              ?_operationend 0001                      __Hparam 0000                      __Lparam 0000  
            __size_of___ftge 0090                      ___awdiv 2C68                      ___ftadd 19DE  
                    ___awmod 2A16                      ___ftdiv 23E8                      ___ftneg 33A6  
                    ___lldiv 2744              __size_of___wmul 0036                      ___ftmul 220E  
                    ___ftsub 321E                      ___fttol 211A                      ___lwdiv 2CEC  
                    ___lwmod 2F1C              __size_of_getRTC 0076                   _curr_state 00EA  
                 ??___altoft 003B                      __pcinit 309A                   ??___awtoft 000C  
                 ??___ftpack 0006            __end_of_eval_poly 267E                      __ramtop 1000  
                    _lcdInst 346C                   ??___lltoft 000D                      __ptext0 2026  
                    __ptext1 2EBA                      __ptext2 2DDC                      __ptext3 3494  
                    __ptext4 34A8                      __ptext5 34B0                      __ptext6 3302  
                    __ptext7 3422                      __ptext8 340A                      __ptext9 2302  
            __size_of_printf 0988               dec_to_hex@temp 006B                      _initLCD 313E  
          __end_of_hexpowers FDB6                i2_isdigit$962 0002                      _dpowers FDA4  
               __size_of_exp 01E8                 __size_of_log 011E                      _isdigit 3330  
               __size_of_isr 15D2                 __size_of_pow 0176             ___awmod@dividend 0090  
                    getRTC@j 0093            __end_of_read_time 2EBA     __size_of_I2C_Master_Init 0060  
   __size_of_I2C_Master_Read 002E     __size_of_I2C_Master_Wait 0014     __size_of_I2C_Master_Stop 0008  
      __end_of_servo_rotate0 2B48        __end_of_servo_rotate1 2968        __end_of_servo_rotate2 28B4  
                    _standby 2EBA                  ?_dec_to_hex 0063               __pintcode_body 1104  
       end_of_initialization 30DE            __end_of_octpowers FDA4                i2_read_sensor 34CE  
                    exp@sign 0051                   ??_keycheck 0090                __Lmediumconst FD86  
                    int_func 1104          i2___wmul@multiplier 0001            __end_of_operation 23E8  
             _operation_disp 00E2               _operation_time 00E4               ??_operationend 00C1  
  __size_of_I2C_Master_Start 0008    __size_of_I2C_Master_Write 000A              ___lldiv@divisor 0094  
                    pow@sign 005E              ___lldiv@counter 009C                      printf@c 00BE  
                    printf@f 009C             I2C_Master_Init@c 009D             I2C_Master_Read@a 0091  
                    postdec1 000FE5                      postdec2 000FDD                      postinc0 000FEE  
                    postinc2 000FDE                   _printf$741 00AE                   _printf$742 00B0  
                 _printf$748 00B2        __end_of_emergencystop 33EC                    _PORTAbits 000F80  
                  _PORTBbits 000F81        __size_of_bottle_count 010C            i2_I2C_Master_Read 335A  
          i2_I2C_Master_Wait 344A            i2_I2C_Master_Stop 34B8               ?i2_read_sensor 0001  
          i2___lwdiv@divisor 0003                    i2___lwdiv 30EC                    i2___lwmod 31DC  
          i2___lwdiv@counter 0007           ?i2_I2C_Master_Read 0001           ?i2_I2C_Master_Wait 0001  
         ?i2_I2C_Master_Stop 0001                   _start_time 007A                    i2_lcdInst 3488  
                ___ftdiv@exp 0016                  printf@width 00BC          ??i2_I2C_Master_Read 0002  
                  i2_isdigit 33EC          ??i2_I2C_Master_Wait 0001          ??i2_I2C_Master_Stop 0002  
                ___ftmul@exp 0016                ??_display_log 00C1                 _bottle_count 1E1E  
             __end_of___ftge 2C68               __end_of___wmul 3302          __size_of_dec_to_hex 00FC  
             __end_of_getRTC 2E52         __size_ofi2_lcdNibble 004E           _total_bottle_count 00E8  
              i2lcdInst@data 0003                   floor@expon 0047             i2___wmul@product 0005  
             __end_of_printf 099A                 i2printf@flag 0026    __end_ofi2_I2C_Master_Read 3380  
  __end_ofi2_I2C_Master_Wait 345C                 i2printf@prec 0022          start_initialization 309A  
  __end_ofi2_I2C_Master_Stop 34C0                   eval_poly@d 002B                   eval_poly@n 002D  
                 eval_poly@x 0028            __size_ofi2___wmul 0026                   ldexp@value 0034  
                __end_of_exp 19DE                  __end_of_log 1E1E                  __end_of_isr 15DA  
                __end_of_pow 1D00                    i2printf@c 0025                    i2printf@f 000D  
              ??_bottle_time 00C1        i2I2C_Master_Read@temp 0003                   ?i2___lwdiv 0001  
                 ?i2___lwmod 0008            __size_ofi2_printf 076A                   frexp@value 0001  
          ??_I2C_Master_Init 00A1            ??_I2C_Master_Read 0091            ??_I2C_Master_Wait 0090  
                 ?i2_lcdInst 0001            ??_I2C_Master_Stop 0091                   ?i2_isdigit 0001  
                   ??___ftge 0007                     ??___wmul 0094                     ??_getRTC 0093  
                __pdataBANK0 00EB             __CFG_LPT1OSC$OFF 000000                     ??_printf 00A8  
          __size_of___altoft 0078                   read_time@i 0004            __size_of___awtoft 0038  
          __size_of___ftpack 00AE          __end_of_display_log 17F6            __size_of___lltoft 005C  
                __pbssCOMRAM 0076         __end_of_operationend 3422                __pcstackBANK0 0080  
              __pcstackBANK1 0116              ??i2_read_sensor 0001            i2___lwmod@divisor 000A  
              ??_read_sensor 0090            i2___lwmod@counter 000C                     ?i2_putch 0001  
        __end_of_bottle_time 32CC             _I2C_Master_Start 34B0          i2I2C_Master_Write@d 0002  
           _I2C_Master_Write 3494             _eskacaplbl_count 00DE            __size_of_keycheck 0014  
           ___lwdiv@dividend 0090            __CFG_CCP2MX$PORTC 000000                    __pintcode 0008  
              __pmediumconst FD86                    _lcdNibble 2F7E                     ?___awdiv 0007  
                   ?___ftadd 001C                     ?___awmod 0090                     ?___ftdiv 0009  
                   ?___ftneg 0001                     ?___lldiv 0090                     ?___ftmul 000D  
                   ?___ftsub 0028                     ?___fttol 0028                     ?___lwdiv 0090  
                   ?___lwmod 0097                     ?_lcdInst 0001             dec_to_hex@hexnum 006F  
                   ?_initLCD 0001                     ?_isdigit 0001   __size_ofi2_I2C_Master_Read 0026  
 __size_ofi2_I2C_Master_Wait 0012                    _eval_poly 25AC   __size_ofi2_I2C_Master_Stop 0008  
                  _hexpowers FDAE                     ?_standby 0001             ___lwdiv@quotient 0094  
             __size_of_floor 00DE               __size_of_ldexp 00C6               __size_of_frexp 0090  
               ??_dec_to_hex 0065          __end_of_currentTime FDBD                  ??i2___lwdiv 0005  
                ??i2___lwmod 000C                    _read_time 2E52               __size_of_putch 0010  
               _log_position 00ED   __end_ofi2_I2C_Master_Start 34C8   __end_ofi2_I2C_Master_Write 34A8  
                ??i2_lcdInst 0003               ___wmul@product 0094                     _LATAbits 000F89  
                   _LATCbits 000F8B                     _LATDbits 000F8C          __end_of_read_sensor 34CE  
                  _octpowers FD98                  ??i2_isdigit 0001                     i2u330_40 2B98  
                   i2u323_40 2164                     i2u330_48 2B9A                     i2u323_45 215C  
                   i2u343_40 2516                     i2u441_40 1C34                     i2u347_40 26B6  
                   i2u347_48 26B8                     i2u460_40 3378                     i2u524_40 0E44  
                   i2u367_40 1886                    _operation 2302                     i2u368_40 1888  
                   i2u570_47 31AE                     i2u539_41 0FA0                     i2u571_47 31CE  
                   i2u572_47 31D6                     i2u573_47 285A                     i2u574_47 287E  
                   i2u575_47 290E                     i2u567_47 1338                     i2u576_47 2932  
                   i2u568_47 1590                     i2u577_47 2AE6                     i2u569_47 31A6  
                   i2u578_47 2B10             __CFG_WDTPS$32768 000000                   ?_lcdNibble 0001  
                _display_log 15DA           __end_of_dec_to_hex 2026            ___wmul@multiplier 0090  
                   i2___wmul 3380                lcdNibble@data 0091                   printf@flag 00BF  
              lcdNibble@temp 0090                   printf@prec 00BB                   ?_eval_poly 0028  
                   i2_printf 099A                  _bottle_time 3296          I2C_Master_Read@temp 0092  
                  copy_data0 30AE                   ?_read_time 0001           dec_to_hex@quotient 0071  
                _bottlequeue 0100             __size_ofi2_putch 000C                    frexp@eptr 0004  
                   __Hrparam 0000                   ?_operation 0001                     __Lrparam 0000  
         __CFG_BOREN$SBORDIS 000000                  dec_to_hex@i 006D       __size_of_servo_rotate0 0090  
     __size_of_servo_rotate1 00B4       __size_of_servo_rotate2 00B4             __size_of___awdiv 0084  
           __size_of___ftadd 01AC             __size_of___awmod 00A2             __size_of___ftdiv 00E6  
           __size_of___ftneg 0024        i2___wmul@multiplicand 0003             __size_of___lldiv 00BC  
                   ___altoft 2D64             __size_of___ftmul 00F4             __size_of___ftsub 0040  
           __size_of___fttol 00F4             __size_of___lwdiv 0078             __size_of___lwmod 0062  
      __size_of_operationend 0018                     ___awtoft 325E                     ___ftpack 2968  
                   ___lltoft 303E                  _isdigit$962 0091           i2I2C_Master_Read@a 0002  
             _can_count_disp 00EB             __size_of_lcdInst 0010                     _exp$1410 004C  
                _currentTime FDB6              _I2C_Master_Init 2FDE              _I2C_Master_Read 3302  
           __size_of_initLCD 0050              _I2C_Master_Wait 3422                     _isr$1501 0074  
            _I2C_Master_Stop 34A8             __size_of_isdigit 002A              ___lwdiv@divisor 0092  
            ___lwdiv@counter 0096                     __ptext10 34CC                     __ptext11 313E  
                   __ptext20 32CC                     __ptext12 33CA                     __ptext21 2F1C  
                   __ptext13 15DA                     __ptext30 099A                     __ptext22 2CEC  
                   __ptext14 3436                     __ptext31 347C                     __ptext23 346C  
                   __ptext15 3296                     __ptext40 2E52                     __ptext32 33EC  
                   __ptext24 2F7E                     __ptext16 1E1E                     __ptext41 349E  
                   __ptext33 31DC                     __ptext25 2A16                     __ptext17 0012  
                   __ptext50 267E                     __ptext42 34B8                     __ptext34 30EC  
                   __ptext26 2FDE                     __ptext18 345C                     __ptext51 24CE  
                   __ptext43 34C0                     __ptext35 3488                     __ptext27 2744  
                   __ptext19 3330                     __ptext60 19DE                     __ptext52 2B48  
                   __ptext44 335A                     __ptext36 318E                     __ptext61 33A6  
                   __ptext53 211A                     __ptext45 344A                     __ptext37 2800  
                   __ptext29 34CE                     __ptext62 23E8                     __ptext54 2BD8  
                   __ptext46 1F2A                     __ptext38 28B4                     __ptext63 325E  
                   __ptext55 2D64                     __ptext47 1B8A                     __ptext39 2AB8  
                   __ptext64 303E                     __ptext56 25AC                     __ptext48 1D00  
                   __ptext65 2968                     __ptext57 3380                     __ptext49 17F6  
                   __ptext66 2C68                     __ptext58 220E                     __ptext59 321E  
                   _end_time 0076                  _read_sensor 34CC             __size_of_standby 0062  
                   _pow$1408 0058                     _pow$1409 005B       __size_of_emergencystop 0022  
                   _keycheck 3436                __size_of_main 00F4                     _keypress 007E  
            _dec_to_hex$1406 0065              _dec_to_hex$1407 0068                 _operationend 340A  
              ??i2_lcdNibble 0001                  ??_lcdNibble 0090                     _testdata 00E6  
                   int$flags 007F                    printf@idx 00B4                    printf@len 00B5  
                  printf@val 00B9                     exp@coeff FDBD                     log@coeff FDDB  
           _bottlequeue_head 00D2                    putch@data 0092     __end_of_I2C_Master_Start 34B8  
           _bottlequeue_tail 00D4                  _OSCTUNEbits 000F9B     __end_of_I2C_Master_Write 349E  
                 _INTCONbits 000FF2                  ??_eval_poly 002F                     isdigit@c 0092  
              _servo_rotate0 2AB8                _servo_rotate1 28B4                _servo_rotate2 2800  
                ??_read_time 0004                     intlevel2 0000             ___lwmod@dividend 0097  
           ___lldiv@dividend 0090                  ??_operation 00C1                     printf@ap 00B7  
                   printf@cp 00AC      __end_of_I2C_Master_Init 303E      __end_of_I2C_Master_Read 3330  
    __end_of_I2C_Master_Wait 3436      __end_of_I2C_Master_Stop 34B0                  lcdInst@data 0092  
              _emergencystop 33CA          __end_ofi2_lcdNibble 31DC             ___lldiv@quotient 0098  
          I2C_Master_Write@d 0091              ___lwmod@divisor 0099              ___lwmod@counter 009B  
             ?_servo_rotate0 0001               ?_servo_rotate1 000F               ?_servo_rotate2 000F  
      __end_ofi2_read_sensor 34D0  
